
	   Please note the warning under -fgcse about invoking
	   -O2 on programs that use computed gotos.

       -O3 Optimize yet more.  -O3 turns on all optimizations
	   specified by -O2 and also turns on the -finline-func-
	   tions and -frename-registers options.

       -O0 Do not optimize.  This is the default.

       -Os Optimize for size.  -Os enables all -O2 optimizations
	   that do not typically increase code size.  It also
	   performs further optimizations designed to reduce code
	   size.

	   -Os disables the following optimization flags:
	   -falign-functions  -falign-jumps  -falign-loops
	   -falign-labels  -freorder-blocks  -fprefetch-loop-
	   arrays

	   If you use multiple -O options, with or without level
	   numbers, the last such option is the one that is
	   effective.

       Options of the form -fflag specify machine-independent
       flags.  Most flags have both positive and negative forms;
       the negative form of -ffoo would be -fno-foo.  In the
       table below, only one of the forms is listed---the one you
       typically will use.  You can figure out the other form by
       either removing no- or adding it.

       The following options control specific optimizations.
       They are either activated by -O options or are related to
       ones that are.  You can use the following flags in the
       rare cases when ``fine-tuning'' of optimizations to be
       performed is desired.

       -fno-default-inline
	   Do not make member functions inline by default merely
	   because they are defined inside the class scope (C++
	   only).  Otherwise, when you specify -O, member func-
	   tions defined inside class scope are compiled inline
	   by default; i.e., you don't need to add inline in
	   front of the member function name.

       -fno-defer-pop
	   Always pop the arguments to each function call as soon
	   as that function returns.  For machines which must pop
	   arguments after a function call, the compiler normally
	   lets arguments accumulate on the stack for several
	   function calls and pops them all at once.

	   Disabled at levels -O, -O2, -O3, -Os.



       -fforce-mem
	   Force memory operands to be copied into registers
	   before doing arithmetic on them.  This produces better
	   code by making all memory references potential common
	   subexpressions.  When they are not common subexpres-
	   sions, instruction combination should eliminate the
	   separate register-load.

	   Enabled at levels -O2, -O3, -Os.

       -fforce-addr
	   Force memory address constants to be copied into reg-
	   isters before doing arithmetic on them.  This may pro-
	   duce better code just as -fforce-mem may.

       -fomit-frame-pointer
	   Don't keep the frame pointer in a register for func-
	   tions that don't need one.  This avoids the instruc-
	   tions to save, set up and restore frame pointers; it
	   also makes an extra register available in many func-
	   tions.  It also makes debugging impossible on some
	   machines.

	   On some machines, such as the VAX, this flag has no
	   effect, because the standard calling sequence automat-
	   ically handles the frame pointer and nothing is saved
	   by pretending it doesn't exist.  The machine-descrip-
	   tion macro "FRAME_POINTER_REQUIRED" controls whether a
	   target machine supports this flag.

	   Enabled at levels -O, -O2, -O3, -Os.

       -foptimize-sibling-calls
	   Optimize sibling and tail recursive calls.

	   Enabled at levels -O2, -O3, -Os.

       -fno-inline
	   Don't pay attention to the "inline" keyword.	 Normally
	   this option is used to keep the compiler from expand-
	   ing any functions inline.  Note that if you are not
	   optimizing, no functions can be expanded inline.

       -finline-functions
	   Integrate all simple functions into their callers.
	   The compiler heuristically decides which functions are
	   simple enough to be worth integrating in this way.

	   If all calls to a given function are integrated, and
	   the function is declared "static", then the function
	   is normally not output as assembler code in its own
	   right.

	   Enabled at level -O3.

       -finline-limit=n
	   By default, gcc limits the size of functions that can
	   be inlined.	This flag allows the control of this
	   limit for functions that are explicitly marked as
	   inline (i.e., marked with the inline keyword or
	   defined within the class definition in c++).	 n is the
	   size of functions that can be inlined in number of
	   pseudo instructions (not counting parameter handling).
	   The default value of n is 600.  Increasing this value
	   can result in more inlined code at the cost of
	   compilation time and memory consumption.  Decreasing
	   usually makes the compilation faster and less code
	   will be inlined (which presumably means slower pro-
	   grams).  This option is particularly useful for pro-
	   grams that use inlining heavily such as those based on
	   recursive templates with C++.

	   Inlining is actually controlled by a number of parame-
	   ters, which may be specified individually by using
	   --param name=value.	The -finline-limit=n option sets
	   some of these parameters as follows:

	    @item max-inline-insns
	     is set to I<n>.
	    @item max-inline-insns-single
	     is set to I<n>/2.
	    @item max-inline-insns-auto
	     is set to I<n>/2.
	    @item min-inline-insns
	     is set to 130 or I<n>/4, whichever is smaller.
	    @item max-inline-insns-rtl
	     is set to I<n>.


	   Using -finline-limit=600 thus results in the default
	   settings for these parameters.  See below for a docu-
	   mentation of the individual parameters controlling
	   inlining.

	   Note: pseudo instruction represents, in this particu-
	   lar context, an abstract measurement of function's
	   size.  In no way, it represents a count of assembly
	   instructions and as such its exact meaning might
	   change from one release to an another.

       -fkeep-inline-functions
	   Even if all calls to a given function are integrated,
	   and the function is declared "static", nevertheless
	   output a separate run-time callable version of the
	   function.  This switch does not affect "extern inline"
	   functions.

       -fkeep-static-consts
	   Emit variables declared "static const" when optimiza-
	   tion isn't turned on, even if the variables aren't
	   referenced.

	   GCC enables this option by default.	If you want to
	   force the compiler to check if the variable was refer-
	   enced, regardless of whether or not optimization is
	   turned on, use the -fno-keep-static-consts option.

       -fmerge-constants
	   Attempt to merge identical constants (string constants
	   and floating point constants) across compilation
	   units.

	   This option is the default for optimized compilation
	   if the assembler and linker support it.  Use -fno-
	   merge-constants to inhibit this behavior.

	   Enabled at levels -O, -O2, -O3, -Os.

       -fmerge-all-constants
	   Attempt to merge identical constants and identical
	   variables.

	   This option implies -fmerge-constants.  In addition to
	   -fmerge-constants this considers e.g. even constant
	   initialized arrays or initialized constant variables
	   with integral or floating point types.  Languages like
	   C or C++ require each non-automatic variable to have
	   distinct location, so using this option will result in
	   non-conforming behavior.

       -fno-branch-count-reg
	   Do not use ``decrement and branch'' instructions on a
	   count register, but instead generate a sequence of
	   instructions that decrement a register, compare it
	   against zero, then branch based upon the result.  This
	   option is only meaningful on architectures that sup-
	   port such instructions, which include x86, PowerPC,
	   IA-64 and S/390.

	   The default is -fbranch-count-reg, enabled when
	   -fstrength-reduce is enabled.

       -fno-function-cse
	   Do not put function addresses in registers; make each
	   instruction that calls a constant function contain the
	   function's address explicitly.

	   This option results in less efficient code, but some
	   strange hacks that alter the assembler output may be
	   confused by the optimizations performed when this
	   option is not used.

	   The default is -ffunction-cse

       -fno-zero-initialized-in-bss
	   If the target supports a BSS section, GCC by default
	   puts variables that are initialized to zero into BSS.
	   This can save space in the resulting code.

	   This option turns off this behavior because some pro-
	   grams explicitly rely on variables going to the data
	   section.  E.g., so that the resulting executable can
	   find the beginning of that section and/or make assump-
	   tions based on that.

	   The default is -fzero-initialized-in-bss.

       -fstrength-reduce
	   Perform the optimizations of loop strength reduction
	   and elimination of iteration variables.

	   Enabled at levels -O2, -O3, -Os.

       -fthread-jumps
	   Perform optimizations where we check to see if a jump
	   branches to a location where another comparison sub-
	   sumed by the first is found.	 If so, the first branch
	   is redirected to either the destination of the second
	   branch or a point immediately following it, depending
	   on whether the condition is known to be true or false.

	   Enabled at levels -O, -O2, -O3, -Os.

       -fcse-follow-jumps
	   In common subexpression elimination, scan through jump
	   instructions when the target of the jump is not
	   reached by any other path.  For example, when CSE
	   encounters an "if" statement with an "else" clause,
	   CSE will follow the jump when the condition tested is
	   false.

	   Enabled at levels -O2, -O3, -Os.

       -fcse-skip-blocks
	   This is similar to -fcse-follow-jumps, but causes CSE
	   to follow jumps which conditionally skip over blocks.
	   When CSE encounters a simple "if" statement with no
	   else clause, -fcse-skip-blocks causes CSE to follow
	   the jump around the body of the "if".

	   Enabled at levels -O2, -O3, -Os.

       -frerun-cse-after-loop
	   Re-run common subexpression elimination after loop
	   optimizations has been performed.

	   Enabled at levels -O2, -O3, -Os.

       -frerun-loop-opt
	   Run the loop optimizer twice.

	   Enabled at levels -O2, -O3, -Os.

       -fgcse
	   Perform a global common subexpression elimination
	   pass.  This pass also performs global constant and
	   copy propagation.

	   Note: When compiling a program using computed gotos, a
	   GCC extension, you may get better runtime performance
	   if you disable the global common subexpression elimi-
	   nation pass by adding -fno-gcse to the command line.

	   Enabled at levels -O2, -O3, -Os.

       -fgcse-lm
	   When -fgcse-lm is enabled, global common subexpression
	   elimination will attempt to move loads which are only
	   killed by stores into themselves.  This allows a loop
	   containing a load/store sequence to be changed to a
	   load outside the loop, and a copy/store within the
	   loop.

	   Enabled by default when gcse is enabled.

       -fgcse-sm
	   When -fgcse-sm is enabled, A store motion pass is run
	   after global common subexpression elimination.  This
	   pass will attempt to move stores out of loops.  When
	   used in conjunction with -fgcse-lm, loops containing a
	   load/store sequence can be changed to a load before
	   the loop and a store after the loop.

	   Enabled by default when gcse is enabled.

       -floop-optimize
	   Perform loop optimizations: move constant expressions
	   out of loops, simplify exit test conditions and
	   optionally do strength-reduction and loop unrolling as
	   well.

	   Enabled at levels -O, -O2, -O3, -Os.


       -fcrossjumping
	   Perform cross-jumping transformation. This transforma-
	   tion unifies equivalent code and save code size. The
	   resulting code may or may not perform better than
	   without cross-jumping.

	   Enabled at levels -O, -O2, -O3, -Os.

       -fif-conversion
	   Attempt to transform conditional jumps into branch-
	   less equivalents.  This include use of conditional
	   moves, min, max, set flags and abs instructions, and
	   some tricks doable by standard arithmetics.	The use
	   of conditional execution on chips where it is avail-
	   able is controlled by "if-conversion2".

	   Enabled at levels -O, -O2, -O3, -Os.

       -fif-conversion2
	   Use conditional execution (where available) to trans-
	   form conditional jumps into branch-less equivalents.

	   Enabled at levels -O, -O2, -O3, -Os.

       -fdelete-null-pointer-checks
	   Use global dataflow analysis to identify and eliminate
	   useless checks for null pointers.  The compiler
	   assumes that dereferencing a null pointer would have
	   halted the program.	If a pointer is checked after it
	   has already been dereferenced, it cannot be null.

	   In some environments, this assumption is not true, and
	   programs can safely dereference null pointers.  Use
	   -fno-delete-null-pointer-checks to disable this opti-
	   mization for programs which depend on that behavior.

	   Enabled at levels -O2, -O3, -Os.

       -fexpensive-optimizations
	   Perform a number of minor optimizations that are rela-
	   tively expensive.

	   Enabled at levels -O2, -O3, -Os.

       -foptimize-register-move
       -fregmove
	   Attempt to reassign register numbers in move instruc-
	   tions and as operands of other simple instructions in
	   order to maximize the amount of register tying.  This
	   is especially helpful on machines with two-operand
	   instructions.

	   Note -fregmove and -foptimize-register-move are the
	   same optimization.

	   Enabled at levels -O2, -O3, -Os.

       -fdelayed-branch
	   If supported for the target machine, attempt to
	   reorder instructions to exploit instruction slots
	   available after delayed branch instructions.

	   Enabled at levels -O, -O2, -O3, -Os.



       -fschedule-insns
	   If supported for the target machine, attempt to
	   reorder instructions to eliminate execution stalls due
	   to required data being unavailable.	This helps
	   machines that have slow floating point or memory load
	   instructions by allowing other instructions to be
	   issued until the result of the load or floating point
	   instruction is required.

	   Enabled at levels -O2, -O3, -Os.

       -fschedule-insns2
	   Similar to -fschedule-insns, but requests an addi-
	   tional pass of instruction scheduling after register
	   allocation has been done.  This is especially useful
	   on machines with a relatively small number of regis-
	   ters and where memory load instructions take more than
	   one cycle.

	   Enabled at levels -O2, -O3, -Os.

       -fno-sched-interblock
	   Don't schedule instructions across basic blocks.  This
	   is normally enabled by default when scheduling before
	   register allocation, i.e.  with -fschedule-insns or at
	   -O2 or higher.

       -fno-sched-spec
	   Don't allow speculative motion of non-load instruc-
	   tions.  This is normally enabled by default when
	   scheduling before register allocation, i.e.	with
	   -fschedule-insns or at -O2 or higher.

       -fsched-spec-load
	   Allow speculative motion of some load instructions.
	   This only makes sense when scheduling before register
	   allocation, i.e. with -fschedule-insns or at -O2 or
	   higher.

       -fsched-spec-load-dangerous
	   Allow speculative motion of more load instructions.
	   This only makes sense when scheduling before register
	   allocation, i.e. with -fschedule-insns or at -O2 or
	   higher.

       -fcaller-saves
	   Enable values to be allocated in registers that will
	   be clobbered by function calls, by emitting extra
	   instructions to save and restore the registers around
	   such calls.	Such allocation is done only when it
	   seems to result in better code than would otherwise be
	   produced.

	   This option is always enabled by default on certain
	   machines, usually those which have no call-preserved
	   registers to use instead.

	   Enabled at levels -O2, -O3, -Os.

       -fmove-all-movables
	   Forces all invariant computations in loops to be moved
	   outside the loop.

       -freduce-all-givs
	   Forces all general-induction variables in loops to be
	   strength-reduced.

	   Note: When compiling programs written in Fortran,
	   -fmove-all-movables and -freduce-all-givs are enabled
	   by default when you use the optimizer.

	   These options may generate better or worse code;
	   results are highly dependent on the structure of loops
	   within the source code.

	   These two options are intended to be removed someday,
	   once they have helped determine the efficacy of vari-
	   ous approaches to improving loop optimizations.

	   Please let us (<gcc@gcc.gnu.org> and <for-
	   tran@gnu.org>) know how use of these options affects
	   the performance of your production code.  We're very
	   interested in code that runs slower when these options
	   are enabled.

       -fno-peephole
       -fno-peephole2
	   Disable any machine-specific peephole optimizations.
	   The difference between -fno-peephole and -fno-peep-
	   hole2 is in how they are implemented in the compiler;
	   some targets use one, some use the other, a few use
	   both.

	   -fpeephole is enabled by default.  -fpeephole2 enabled
	   at levels -O2, -O3, -Os.

       -fbranch-probabilities
       -fno-guess-branch-probability
	   Do not guess branch probabilities using a randomized
	   model.

	   Sometimes gcc will opt to use a randomized model to
	   guess branch probabilities, when none are available
	   from either profiling feedback (-fprofile-arcs) or
	   __builtin_expect.  This means that different runs of
	   the compiler on the same program may produce different
	   object code.

	   In a hard real-time system, people don't want differ-
	   ent runs of the compiler to produce code that has dif-
	   ferent behavior; minimizing non-determinism is of
	   paramount import.  This switch allows users to reduce
	   non-determinism, possibly at the expense of inferior
	   optimization.

	   The default is -fguess-branch-probability at levels
	   -O, -O2, -O3, -Os.

       -freorder-blocks
	   Reorder basic blocks in the compiled function in order
	   to reduce number of taken branches and improve code
	   locality.

	   Enabled at levels -O2, -O3.

       -freorder-functions
	   Reorder basic blocks in the compiled function in order
	   to reduce number of taken branches and improve code
	   locality. This is implemented by using special subsec-
	   tions "text.hot" for most frequently executed func-
	   tions and "text.unlikely" for unlikely executed
	   functions.  Reordering is done by the linker so object
	   file format must support named sections and linker
	   must place them in a reasonable way.

	   Also profile feedback must be available in to make
	   this option effective.  See -fprofile-arcs for
	   details.

	   Enabled at levels -O2, -O3, -Os.

       -fstrict-aliasing
	   Allows the compiler to assume the strictest aliasing
	   rules applicable to the language being compiled.  For
	   C (and C++), this activates optimizations based on the
	   type of expressions.	 In particular, an object of one
	   type is assumed never to reside at the same address as
	   an object of a different type, unless the types are
	   almost the same.  For example, an "unsigned int" can
	   alias an "int", but not a "void*" or a "double".  A
	   character type may alias any other type.

	   Pay special attention to code like this:

		   union a_union {
		     int i;
		     double d;
		   };

		   int f() {
		     a_union t;
		     t.d = 3.0;
		     return t.i;
		   }

	   The practice of reading from a different union member
	   than the one most recently written to (called ``type-
	   punning'') is common.  Even with -fstrict-aliasing,
	   type-punning is allowed, provided the memory is
	   accessed through the union type.  So, the code above
	   will work as expected.  However, this code might not:

		   int f() {
		     a_union t;
		     int* ip;
		     t.d = 3.0;
		     ip = &t.i;
		     return *ip;
		   }

	   Every language that wishes to perform language-spe-
	   cific alias analysis should define a function that
	   computes, given an "tree" node, an alias set for the
	   node.  Nodes in different alias sets are not allowed
	   to alias.  For an example, see the C front-end func-
	   tion "c_get_alias_set".

	   Enabled at levels -O2, -O3, -Os.

       -falign-functions
       -falign-functions=n
	   Align the start of functions to the next power-of-two
	   greater than n, skipping up to n bytes.  For instance,
	   -falign-functions=32 aligns functions to the next
	   32-byte boundary, but -falign-functions=24 would align
	   to the next 32-byte boundary only if this can be done
	   by skipping 23 bytes or less.

	   -fno-align-functions and -falign-functions=1 are
	   equivalent and mean that functions will not be
	   aligned.

	   Some assemblers only support this flag when n is a
	   power of two; in that case, it is rounded up.

	   If n is not specified or is zero, use a machine-depen-
	   dent default.

	   Enabled at levels -O2, -O3.

       -falign-labels
       -falign-labels=n
	   Align all branch targets to a power-of-two boundary,
	   skipping up to n bytes like -falign-functions.  This
	   option can easily make code slower, because it must
	   insert dummy operations for when the branch target is
	   reached in the usual flow of the code.

	   -fno-align-labels and -falign-labels=1 are equivalent
	   and mean that labels will not be aligned.

	   If -falign-loops or -falign-jumps are applicable and
	   are greater than this value, then their values are
	   used instead.

	   If n is not specified or is zero, use a machine-depen-
	   dent default which is very likely to be 1, meaning no
	   alignment.

	   Enabled at levels -O2, -O3.

       -falign-loops
       -falign-loops=n
	   Align loops to a power-of-two boundary, skipping up to
	   n bytes like -falign-functions.  The hope is that the
	   loop will be executed many times, which will make up
	   for any execution of the dummy operations.

	   -fno-align-loops and -falign-loops=1 are equivalent
	   and mean that loops will not be aligned.

	   If n is not specified or is zero, use a machine-depen-
	   dent default.

	   Enabled at levels -O2, -O3.

       -falign-jumps
       -falign-jumps=n
	   Align branch targets to a power-of-two boundary, for
	   branch targets where the targets can only be reached
	   by jumping, skipping up to n bytes like -falign-func-
	   tions.  In this case, no dummy operations need be exe-
	   cuted.

	   -fno-align-jumps and -falign-jumps=1 are equivalent
	   and mean that loops will not be aligned.

	   If n is not specified or is zero, use a machine-depen-
	   dent default.

	   Enabled at levels -O2, -O3.



       -frename-registers
	   Attempt to avoid false dependencies in scheduled code
	   by making use of registers left over after register
	   allocation.	This optimization will most benefit pro-
	   cessors with lots of registers.  It can, however, make
	   debugging impossible, since variables will no longer
	   stay in a ``home register''.

	   Enabled at levels -O3.

       -fno-cprop-registers
	   After register allocation and post-register allocation
	   instruction splitting, we perform a copy-propagation
	   pass to try to reduce scheduling dependencies and
	   occasionally eliminate the copy.

	   Disabled at levels -O, -O2, -O3, -Os.

       The following options control compiler behavior regarding
       floating point arithmetic.  These options trade off
       between speed and correctness.  All must be specifically
       enabled.

       -ffloat-store
	   Do not store floating point variables in registers,
	   and inhibit other options that might change whether a
	   floating point value is taken from a register or mem-
	   ory.

	   This option prevents undesirable excess precision on
	   machines such as the 68000 where the floating regis-
	   ters (of the 68881) keep more precision than a "dou-
	   ble" is supposed to have.  Similarly for the x86
	   architecture.  For most programs, the excess precision
	   does only good, but a few programs rely on the precise
	   definition of IEEE floating point.  Use -ffloat-store
	   for such programs, after modifying them to store all
	   pertinent intermediate computations into variables.

       -ffast-math
	   Sets -fno-math-errno, -funsafe-math-optimizations,
	   -fno-trapping-math, -ffinite-math-only and -fno-sig-
	   naling-nans.

	   This option causes the preprocessor macro
	   "__FAST_MATH__" to be defined.

	   This option should never be turned on by any -O option
	   since it can result in incorrect output for programs
	   which depend on an exact implementation of IEEE or ISO
	   rules/specifications for math functions.

       -fno-math-errno
	   Do not set ERRNO after calling math functions that are
	   executed with a single instruction, e.g., sqrt.  A
	   program that relies on IEEE exceptions for math error
	   handling may want to use this flag for speed while
	   maintaining IEEE arithmetic compatibility.

	   This option should never be turned on by any -O option
	   since it can result in incorrect output for programs
	   which depend on an exact implementation of IEEE or ISO
	   rules/specifications for math functions.

	   The default is -fmath-errno.

       -funsafe-math-optimizations
	   Allow optimizations for floating-point arithmetic that
	   (a) assume that arguments and results are valid and
	   (b) may violate IEEE or ANSI standards.  When used at
	   link-time, it may include libraries or startup files
	   that change the default FPU control word or other sim-
	   ilar optimizations.

	   This option should never be turned on by any -O option
	   since it can result in incorrect output for programs
	   which depend on an exact implementation of IEEE or ISO
	   rules/specifications for math functions.

	   The default is -fno-unsafe-math-optimizations.

       -ffinite-math-only
	   Allow optimizations for floating-point arithmetic that
	   assume that arguments and results are not NaNs or
	   +-Infs.

	   This option should never be turned on by any -O option
	   since it can result in incorrect output for programs
	   which depend on an exact implementation of IEEE or ISO
	   rules/specifications.

	   The default is -fno-finite-math-only.

       -fno-trapping-math
	   Compile code assuming that floating-point operations
	   cannot generate user-visible traps.	These traps
	   include division by zero, overflow, underflow, inexact
	   result and invalid operation.  This option implies
	   -fno-signaling-nans.	 Setting this option may allow
	   faster code if one relies on ``non-stop'' IEEE arith-
	   metic, for example.

	   This option should never be turned on by any -O option
	   since it can result in incorrect output for programs
	   which depend on an exact implementation of IEEE or ISO
	   rules/specifications for math functions.

	   The default is -ftrapping-math.

       -fsignaling-nans
	   Compile code assuming that IEEE signaling NaNs may
	   generate user-visible traps during floating-point
	   operations.	Setting this option disables optimiza-
	   tions that may change the number of exceptions visible
	   with signaling NaNs.	 This option implies -ftrapping-
	   math.

	   This option causes the preprocessor macro "__SUP-
	   PORT_SNAN__" to be defined.

	   The default is -fno-signaling-nans.

	   This option is experimental and does not currently
	   guarantee to disable all GCC optimizations that affect
	   signaling NaN behavior.

       -fsingle-precision-constant
	   Treat floating point constant as single precision con-
	   stant instead of implicitly converting it to double
	   precision constant.

       The following options control optimizations that may
       improve performance, but are not enabled by any -O
       options.	 This section includes experimental options that
       may produce broken code.

       -fbranch-probabilities
	   After running a program compiled with -fprofile-arcs,
	   you can compile it a second time using -fbranch-proba-
	   bilities, to improve optimizations based on the number
	   of times each branch was taken.  When the program com-
	   piled with -fprofile-arcs exits it saves arc execution
	   counts to a file called sourcename.da for each source
	   file	 The information in this data file is very depen-
	   dent on the structure of the generated code, so you
	   must use the same source code and the same optimiza-
	   tion options for both compilations.

	   With -fbranch-probabilities, GCC puts a REG_BR_PROB
	   note on each JUMP_INSN and CALL_INSN.  These can be
	   used to improve optimization.  Currently, they are
	   only used in one place: in reorg.c, instead of guess-
	   ing which path a branch is mostly to take, the
	   REG_BR_PROB values are used to exactly determine which
	   path is taken more often.

       -fnew-ra
	   Use a graph coloring register allocator.  Currently
	   this option is meant only for testing.  Users should
	   not specify this option, since it is not yet ready for
	   production use.

       -ftracer
	   Perform tail duplication to enlarge superblock size.
	   This transformation simplifies the control flow of the
	   function allowing other optimizations to do better
	   job.

       -funroll-loops
	   Unroll loops whose number of iterations can be deter-
	   mined at compile time or upon entry to the loop.
	   -funroll-loops implies both -fstrength-reduce and
	   -frerun-cse-after-loop.  This option makes code
	   larger, and may or may not make it run faster.

       -funroll-all-loops
	   Unroll all loops, even if their number of iterations
	   is uncertain when the loop is entered.  This usually
	   makes programs run more slowly.  -funroll-all-loops
	   implies the same options as -funroll-loops,

       -fprefetch-loop-arrays
	   If supported by the target machine, generate instruc-
	   tions to prefetch memory to improve the performance of
	   loops that access large arrays.

	   Disabled at level -Os.

       -ffunction-sections
       -fdata-sections
	   Place each function or data item into its own section
	   in the output file if the target supports arbitrary
	   sections.  The name of the function or the name of the
	   data item determines the section's name in the output
	   file.

	   Use these options on systems where the linker can
	   perform optimizations to improve locality of reference
	   in the instruction space.  Most systems using the ELF
	   object format and SPARC processors running Solaris 2
	   have linkers with such optimizations.  AIX may have
	   these optimizations in the future.

	   Only use these options when there are significant ben-
	   efits from doing so.	 When you specify these options,
	   the assembler and linker will create larger object and
	   executable files and will also be slower.  You will
	   not be able to use "gprof" on all systems if you spec-
	   ify this option and you may have problems with debug-
	   ging if you specify both this option and -g.

       -fssa
	   Perform optimizations in static single assignment
	   form.  Each function's flow graph is translated into
	   SSA form, optimizations are performed, and the flow
	   graph is translated back from SSA form.  Users should
	   not specify this option, since it is not yet ready for
	   production use.

       -fssa-ccp
	   Perform Sparse Conditional Constant Propagation in SSA
	   form.  Requires -fssa.  Like -fssa, this is an experi-
	   mental feature.

       -fssa-dce
	   Perform aggressive dead-code elimination in SSA form.
	   Requires -fssa.  Like -fssa, this is an experimental
	   feature.

       --param name=value
	   In some places, GCC uses various constants to control
	   the amount of optimization that is done.  For example,
	   GCC will not inline functions that contain more that a
	   certain number of instructions.  You can control some
	   of these constants on the command-line using the
	   --param option.

	   The names of specific parameters, and the meaning of
	   the values, are tied to the internals of the compiler,
	   and are subject to change without notice in future
	   releases.

	   In each case, the value is an integer.  The allowable
	   choices for name are given in the following table:

	   max-crossjump-edges
	       The maximum number of incoming edges to consider
	       for crossjumping.  The algorithm used by
	       -fcrossjumping is O(N^2) in the number of edges
	       incoming to each block.	Increasing values mean
	       more aggressive optimization, making the compile
	       time increase with probably small improvement in
	       executable size.

	   max-delay-slot-insn-search
	       The maximum number of instructions to consider
	       when looking for an instruction to fill a delay
	       slot.  If more than this arbitrary number of
	       instructions is searched, the time savings from
	       filling the delay slot will be minimal so stop
	       searching.  Increasing values mean more aggressive
	       optimization, making the compile time increase
	       with probably small improvement in executable run
	       time.

	   max-delay-slot-live-search
	       When trying to fill delay slots, the maximum num-
	       ber of instructions to consider when searching for
	       a block with valid live register information.
	       Increasing this arbitrarily chosen value means
	       more aggressive optimization, increasing the com-
	       pile time.  This parameter should be removed when
	       the delay slot code is rewritten to maintain the
	       control-flow graph.

	   max-gcse-memory
	       The approximate maximum amount of memory that will
	       be allocated in order to perform the global common
	       subexpression elimination optimization.	If more
	       memory than specified is required, the optimiza-
	       tion will not be done.

	   max-gcse-passes
	       The maximum number of passes of GCSE to run.

	   max-pending-list-length
	       The maximum number of pending dependencies
	       scheduling will allow before flushing the current
	       state and starting over.	 Large functions with few
	       branches or calls can create excessively large
	       lists which needlessly consume memory and
	       resources.

	   max-inline-insns-single
	       Several parameters control the tree inliner used
	       in gcc.	This number sets the maximum number of
	       instructions (counted in gcc's internal represen-
	       tation) in a single function that the tree inliner
	       will consider for inlining.  This only affects
	       functions declared inline and methods implemented
	       in a class declaration (C++).  The default value
	       is 300.

	   max-inline-insns-auto
	       When you use -finline-functions (included in -O3),
	       a lot of functions that would otherwise not be
	       considered for inlining by the compiler will be
	       investigated.  To those functions, a different
	       (more restrictive) limit compared to functions
	       declared inline can be applied.	The default value
	       is 300.

	   max-inline-insns
	       The tree inliner does decrease the allowable size
	       for single functions to be inlined after we
	       already inlined the number of instructions given
	       here by repeated inlining.  This number should be
	       a factor of two or more larger than the single
	       function limit.	Higher numbers result in better
	       runtime performance, but incur higher compile-time
	       resource (CPU time, memory) requirements and
	       result in larger binaries.  Very high values are
	       not advisable, as too large binaries may adversely
	       affect runtime performance.  The default value is
	       600.

	   max-inline-slope
	       After exceeding the maximum number of inlined
	       instructions by repeated inlining, a linear
	       function is used to decrease the allowable size
	       for single functions.  The slope of that function
	       is the negative reciprocal of the number specified
	       here.  The default value is 32.

	   min-inline-insns
	       The repeated inlining is throttled more and more
	       by the linear function after exceeding the limit.
	       To avoid too much throttling, a minimum for this
	       function is specified here to allow repeated
	       inlining for very small functions even when a lot
	       of repeated inlining already has been done.  The
	       default value is 130.

	   max-inline-insns-rtl
	       For languages that use the RTL inliner (this hap-
	       pens at a later stage than tree inlining), you can
	       set the maximum allowable size (counted in RTL
	       instructions) for the RTL inliner with this param-
	       eter.  The default value is 600.

	   max-unrolled-insns
	       The maximum number of instructions that a loop
	       should have if that loop is unrolled, and if the
	       loop is unrolled, it determines how many times the
	       loop code is unrolled.

	   hot-bb-count-fraction
	       Select fraction of the maximal count of repeti-
	       tions of basic block in program given basic block
	       needs to have to be considered hot.

	   hot-bb-frequency-fraction
	       Select fraction of the maximal frequency of execu-
	       tions of basic block in function given basic block
	       needs to have to be considered hot

	   tracer-dynamic-coverage
	   tracer-dynamic-coverage-feedback
	       This value is used to limit superblock formation
	       once the given percentage of executed instructions
	       is covered.  This limits unnecessary code size
	       expansion.

	       The tracer-dynamic-coverage-feedback is used only
	       when profile feedback is available.  The real pro-
	       files (as opposed to statically estimated ones)
	       are much less balanced allowing the threshold to
	       be larger value.

	   tracer-max-code-growth
	       Stop tail duplication once code growth has reached
	       given percentage.  This is rather hokey argument,
	       as most of the duplicates will be eliminated later
	       in cross jumping, so it may be set to much higher
	       values than is the desired code growth.

	   tracer-min-branch-ratio
	       Stop reverse growth when the reverse probability
	       of best edge is less than this threshold (in per-
	       cent).

	   tracer-min-branch-ratio
	   tracer-min-branch-ratio-feedback
	       Stop forward growth if the best edge do have prob-
	       ability lower than this threshold.

	       Similarly to tracer-dynamic-coverage two values
	       are present, one for compilation for profile feed-
	       back and one for compilation without.  The value
	       for compilation with profile feedback needs to be
	       more conservative (higher) in order to make tracer
	       effective.

	   ggc-min-expand
	       GCC uses a garbage collector to manage its own
	       memory allocation.  This parameter specifies the
	       minimum percentage by which the garbage collec-
	       tor's heap should be allowed to expand between
	       collections.  Tuning this may improve compilation
	       speed; it has no effect on code generation.

	       The default is 30% + 70% * (RAM/1GB) with an upper
	       bound of 100% when RAM >= 1GB.  If "getrlimit" is
	       available, the notion of "RAM" is the smallest of
	       actual RAM, RLIMIT_RSS, RLIMIT_DATA and RLIMIT_AS.
	       If GCC is not able to calculate RAM on a particu-
	       lar platform, the lower bound of 30% is used.
	       Setting this parameter and ggc-min-heapsize to
	       zero causes a full collection to occur at every
	       opportunity.  This is extremely slow, but can be
	       useful for debugging.

	   ggc-min-heapsize
	       Minimum size of the garbage collector's heap
	       before it begins bothering to collect garbage.
	       The first collection occurs after the heap expands
	       by ggc-min-expand% beyond ggc-min-heapsize.
	       Again, tuning this may improve compilation speed,
	       and has no effect on code generation.

	       The default is RAM/8, with a lower bound of 4096
	       (four megabytes) and an upper bound of 131072 (128
	       megabytes).  If "getrlimit" is available, the
	       notion of "RAM" is the smallest of actual RAM,
	       RLIMIT_RSS, RLIMIT_DATA and RLIMIT_AS.  If GCC is
	       not able to calculate RAM on a particular plat-
	       form, the lower bound is used.  Setting this
	       parameter very large effectively disables garbage
	       collection.  Setting this parameter and ggc-min-
	       expand to zero causes a full collection to occur
	       at every opportunity.

       Options Controlling the Preprocessor

       These options control the C preprocessor, which is run on
       each C source file before actual compilation.

       If you use the -E option, nothing is done except prepro-
       cessing.	 Some of these options make sense only together
       with -E because they cause the preprocessor output to be
       unsuitable for actual compilation.

       You can use -Wp,option to bypass the compiler driver and
       pass option directly through to the preprocessor.  If
       option contains commas, it is split into multiple options
       at the commas.  However, many options are modified, trans-
       lated or interpreted by the compiler driver before being
       passed to the preprocessor, and -Wp forcibly bypasses this
       phase.  The preprocessor's direct interface is undocu-
       mented and subject to change, so whenever possible you
       should avoid using -Wp and let the driver handle the
       options instead.

       -D name
	   Predefine name as a macro, with definition "1".

       -D name=definition
	   Predefine name as a macro, with definition definition.
	   There are no restrictions on the contents of defini-
	   tion, but if you are invoking the preprocessor from a
	   shell or shell-like program you may need to use the
	   shell's quoting syntax to protect characters such as
	   spaces that have a meaning in the shell syntax.

	   If you wish to define a function-like macro on the
	   command line, write its argument list with surrounding
	   parentheses before the equals sign (if any).	 Paren-
	   theses are meaningful to most shells, so you will need
	   to quote the option.	 With sh and csh,
	   -D'name(args...)=definition' works.

	   -D and -U options are processed in the order they are
	   given on the command line.  All -imacros file and
	   -include file options are processed after all -D and
	   -U options.

       -U name
	   Cancel any previous definition of name, either built
	   in or provided with a -D option.

       -undef
	   Do not predefine any system-specific or GCC-specific
	   macros.  The standard predefined macros remain
	   defined.

       -I dir
	   Add the directory dir to the list of directories to be
	   searched for header files.  Directories named by -I
	   are searched before the standard system include direc-
	   tories.  If the directory dir is a standard system
	   include directory, the option is ignored to ensure
	   that the default search order for system directories
	   and the special treatment of system headers are not
	   defeated .

       -o file
	   Write output to file.  This is the same as specifying
	   file as the second non-option argument to cpp.  gcc
	   has a different interpretation of a second non-option
	   argument, so you must use -o to specify the output
	   file.

       -Wall
	   Turns on all optional warnings which are desirable for
	   normal code.	 At present this is -Wcomment and -Wtri-
	   graphs.  Note that many of the preprocessor's warnings
	   are on by default and have no options to control them.

       -Wcomment
       -Wcomments
	   Warn whenever a comment-start sequence /* appears in a
	   /* comment, or whenever a backslash-newline appears in
	   a // comment.  (Both forms have the same effect.)

       -Wtrigraphs
	   Warn if any trigraphs are encountered.  This option
	   used to take effect only if -trigraphs was also
	   specified, but now works independently.  Warnings are
	   not given for trigraphs within comments, as they do
	   not affect the meaning of the program.

       -Wtraditional
	   Warn about certain constructs that behave differently
	   in traditional and ISO C.  Also warn about ISO C con-
	   structs that have no traditional C equivalent, and
	   problematic constructs which should be avoided.

       -Wimport
	   Warn the first time #import is used.

       -Wundef
	   Warn whenever an identifier which is not a macro is
	   encountered in an #if directive, outside of defined.
	   Such identifiers are replaced with zero.

       -Wunused-macros
	   Warn about macros defined in the main file that are
	   unused.  A macro is used if it is expanded or tested
	   for existence at least once.	 The preprocessor will
	   also warn if the macro has not been used at the time
	   it is redefined or undefined.

	   Built-in macros, macros defined on the command line,
	   and macros defined in include files are not warned
	   about.

	   Note: If a macro is actually used, but only used in
	   skipped conditional blocks, then CPP will report it as
	   unused.  To avoid the warning in such a case, you
	   might improve the scope of the macro's definition by,
	   for example, moving it into the first skipped block.
	   Alternatively, you could provide a dummy use with
	   something like:

		   #if defined the_macro_causing_the_warning
		   #endif


       -Wendif-labels
	   Warn whenever an #else or an #endif are followed by
	   text.  This usually happens in code of the form

		   #if FOO
		   ...
		   #else FOO
		   ...
		   #endif FOO

	   The second and third "FOO" should be in comments, but
	   often are not in older programs.  This warning is on
	   by default.

       -Werror
	   Make all warnings into hard errors.	Source code which
	   triggers warnings will be rejected.

       -Wsystem-headers
	   Issue warnings for code in system headers.  These are
	   normally unhelpful in finding bugs in your own code,
	   therefore suppressed.  If you are responsible for the
	   system library, you may want to see them.



       -w  Suppress all warnings, including those which GNU CPP
	   issues by default.

       -pedantic
	   Issue all the mandatory diagnostics listed in the C
	   standard.  Some of them are left out by default, since
	   they trigger frequently on harmless code.

       -pedantic-errors
	   Issue all the mandatory diagnostics, and make all
	   mandatory diagnostics into errors.  This includes
	   mandatory diagnostics that GCC issues without -pedan-
	   tic but treats as warnings.

       -M  Instead of outputting the result of preprocessing,
	   output a rule suitable for make describing the depen-
	   dencies of the main source file.  The preprocessor
	   outputs one make rule containing the object file name
	   for that source file, a colon, and the names of all
	   the included files, including those coming from
	   -include or -imacros command line options.

	   Unless specified explicitly (with -MT or -MQ), the
	   object file name consists of the basename of the
	   source file with any suffix replaced with object file
	   suffix.  If there are many included files then the
	   rule is split into several lines using \-newline.  The
	   rule has no commands.

	   This option does not suppress the preprocessor's debug
	   output, such as -dM.	 To avoid mixing such debug out-
	   put with the dependency rules you should explicitly
	   specify the dependency output file with -MF, or use an
	   environment variable like DEPENDENCIES_OUTPUT.  Debug
	   output will still be sent to the regular output stream
	   as normal.

	   Passing -M to the driver implies -E, and suppresses
	   warnings with an implicit -w.

       -MM Like -M but do not mention header files that are found
	   in system header directories, nor header files that
	   are included, directly or indirectly, from such a
	   header.

	   This implies that the choice of angle brackets or dou-
	   ble quotes in an #include directive does not in itself
	   determine whether that header will appear in -MM
	   dependency output.  This is a slight change in seman-
	   tics from GCC versions 3.0 and earlier.

       -MF file
	   @anchor{-MF} When used with -M or -MM, specifies a
	   file to write the dependencies to.  If no -MF switch
	   is given the preprocessor sends the rules to the same
	   place it would have sent preprocessed output.

	   When used with the driver options -MD or -MMD, -MF
	   overrides the default dependency output file.

       -MG In conjunction with an option such as -M requesting
	   dependency generation, -MG assumes missing header
	   files are generated files and adds them to the depen-
	   dency list without raising an error.	 The dependency
	   filename is taken directly from the "#include"
	   directive without prepending any path.  -MG also sup-
	   presses preprocessed output, as a missing header file
	   renders this useless.

	   This feature is used in automatic updating of make-
	   files.

       -MP This option instructs CPP to add a phony target for
	   each dependency other than the main file, causing each
	   to depend on nothing.  These dummy rules work around
	   errors make gives if you remove header files without
	   updating the Makefile to match.

	   This is typical output:

		   test.o: test.c test.h

		   test.h:


       -MT target
	   Change the target of the rule emitted by dependency
	   generation.	By default CPP takes the name of the main
	   input file, including any path, deletes any file suf-
	   fix such as .c, and appends the platform's usual
	   object suffix.  The result is the target.

	   An -MT option will set the target to be exactly the
	   string you specify.	If you want multiple targets, you
	   can specify them as a single argument to -MT, or use
	   multiple -MT options.

	   For example, -MT '$(objpfx)foo.o' might give

		   $(objpfx)foo.o: foo.c


       -MQ target
	   Same as -MT, but it quotes any characters which are
	   special to Make.  -MQ '$(objpfx)foo.o' gives

		   $$(objpfx)foo.o: foo.c

	   The default target is automatically quoted, as if it
	   were given with -MQ.

       -MD -MD is equivalent to -M -MF file, except that -E is
	   not implied.	 The driver determines file based on
	   whether an -o option is given.  If it is, the driver
	   uses its argument but with a suffix of .d, otherwise
	   it take the basename of the input file and applies a
	   .d suffix.

	   If -MD is used in conjunction with -E, any -o switch
	   is understood to specify the dependency output file
	   (but @pxref{-MF}), but if used without -E, each -o is
	   understood to specify a target object file.

	   Since -E is not implied, -MD can be used to generate a
	   dependency output file as a side-effect of the compi-
	   lation process.

       -MMD
	   Like -MD except mention only user header files, not
	   system -header files.


       -x c
       -x c++
       -x objective-c
       -x assembler-with-cpp
	   Specify the source language: C, C++, Objective-C, or
	   assembly.  This has nothing to do with standards con-
	   formance or extensions; it merely selects which base
	   syntax to expect.  If you give none of these options,
	   cpp will deduce the language from the extension of the
	   source file: .c, .cc, .m, or .S.  Some other common
	   extensions for C++ and assembly are also recognized.
	   If cpp does not recognize the extension, it will treat
	   the file as C; this is the most generic mode.

	   Note: Previous versions of cpp accepted a -lang option
	   which selected both the language and the standards
	   conformance level.  This option has been removed,
	   because it conflicts with the -l option.

       -std=standard
       -ansi
	   Specify the standard to which the code should conform.
	   Currently CPP knows about C and C++ standards; others
	   may be added in the future.

	   standard may be one of:

	   ""iso9899:1990""
	   ""c89""
	       The ISO C standard from 1990.  c89 is the custom-
	       ary shorthand for this version of the standard.

	       The -ansi option is equivalent to -std=c89.

	   ""iso9899:199409""
	       The 1990 C standard, as amended in 1994.

	   ""iso9899:1999""
	   ""c99""
	   ""iso9899:199x""
	   ""c9x""
	       The revised ISO C standard, published in December
	       1999.  Before publication, this was known as C9X.

	   ""gnu89""
	       The 1990 C standard plus GNU extensions.	 This is
	       the default.

	   ""gnu99""
	   ""gnu9x""
	       The 1999 C standard plus GNU extensions.

	   ""c++98""
	       The 1998 ISO C++ standard plus amendments.

	   ""gnu++98""
	       The same as -std=c++98 plus GNU extensions.  This
	       is the default for C++ code.

       -I- Split the include path.  Any directories specified
	   with -I options before -I- are searched only for head-
	   ers requested with "#include "file""; they are not
	   searched for "#include <file>".  If additional direc-
	   tories are specified with -I options after the -I-,
	   those directories are searched for all #include
	   directives.

	   In addition, -I- inhibits the use of the directory of
	   the current file directory as the first search direc-
	   tory for "#include "file"".

       -nostdinc
	   Do not search the standard system directories for
	   header files.  Only the directories you have specified
	   with -I options (and the directory of the current
	   file, if appropriate) are searched.

       -nostdinc++
	   Do not search for header files in the C++-specific
	   standard directories, but do still search the other
	   standard directories.  (This option is used when
	   building the C++ library.)

       -include file
	   Process file as if "#include "file"" appeared as the
	   first line of the primary source file.  However, the
	   first directory searched for file is the preproces-
	   sor's working directory instead of the directory con-
	   taining the main source file.  If not found there, it
	   is searched for in the remainder of the "#include
	   "..."" search chain as normal.

	   If multiple -include options are given, the files are
	   included in the order they appear on the command line.

       -imacros file
	   Exactly like -include, except that any output produced
	   by scanning file is thrown away.  Macros it defines
	   remain defined.  This allows you to acquire all the
	   macros from a header without also processing its dec-
	   larations.

	   All files specified by -imacros are processed before
	   all files specified by -include.

       -idirafter dir
	   Search dir for header files, but do it after all
	   directories specified with -I and the standard system
	   directories have been exhausted.  dir is treated as a
	   system include directory.

       -iprefix prefix
	   Specify prefix as the prefix for subsequent -iwithpre-
	   fix options.	 If the prefix represents a directory,
	   you should include the final /.

       -iwithprefix dir
       -iwithprefixbefore dir
	   Append dir to the prefix specified previously with
	   -iprefix, and add the resulting directory to the
	   include search path.	 -iwithprefixbefore puts it in
	   the same place -I would; -iwithprefix puts it where
	   -idirafter would.

	   Use of these options is discouraged.

       -isystem dir
	   Search dir for header files, after all directories
	   specified by -I but before the standard system direc-
	   tories.  Mark it as a system directory, so that it
	   gets the same special treatment as is applied to the
	   standard system directories.

       -fpreprocessed
	   Indicate to the preprocessor that the input file has
	   already been preprocessed.  This suppresses things
	   like macro expansion, trigraph conversion, escaped
	   newline splicing, and processing of most directives.
	   The preprocessor still recognizes and removes com-
	   ments, so that you can pass a file preprocessed with
	   -C to the compiler without problems.	 In this mode the
	   integrated preprocessor is little more than a tok-
	   enizer for the front ends.

	   -fpreprocessed is implicit if the input file has one
	   of the extensions .i, .ii or .mi.  These are the
	   extensions that GCC uses for preprocessed files cre-
	   ated by -save-temps.

       -ftabstop=width
	   Set the distance between tab stops.	This helps the
	   preprocessor report correct column numbers in warnings
	   or errors, even if tabs appear on the line.	If the
	   value is less than 1 or greater than 100, the option
	   is ignored.	The default is 8.

       -fno-show-column
	   Do not print column numbers in diagnostics.	This may
	   be necessary if diagnostics are being scanned by a
	   program that does not understand the column numbers,
	   such as dejagnu.

       -A predicate=answer
	   Make an assertion with the predicate predicate and
	   answer answer.  This form is preferred to the older
	   form -A predicate(answer), which is still supported,
	   because it does not use shell special characters.

       -A -predicate=answer
	   Cancel an assertion with the predicate predicate and
	   answer answer.

       -dCHARS
	   CHARS is a sequence of one or more of the following
	   characters, and must not be preceded by a space.
	   Other characters are interpreted by the compiler
	   proper, or reserved for future versions of GCC, and so
	   are silently ignored.  If you specify characters whose
	   behavior conflicts, the result is undefined.

	   M   Instead of the normal output, generate a list of
	       #define directives for all the macros defined dur-
	       ing the execution of the preprocessor, including
	       predefined macros.  This gives you a way of find-
	       ing out what is predefined in your version of the
	       preprocessor.  Assuming you have no file foo.h,
	       the command

		       touch foo.h; cpp -dM foo.h

	       will show all the predefined macros.

	   D   Like M except in two respects: it does not include
	       the predefined macros, and it outputs both the
	       #define directives and the result of preprocess-
	       ing.  Both kinds of output go to the standard out-
	       put file.

	   N   Like D, but emit only the macro names, not their
	       expansions.

	   I   Output #include directives in addition to the
	       result of preprocessing.

       -P  Inhibit generation of linemarkers in the output from
	   the preprocessor.  This might be useful when running
	   the preprocessor on something that is not C code, and
	   will be sent to a program which might be confused by
	   the linemarkers.

       -C  Do not discard comments.  All comments are passed
	   through to the output file, except for comments in
	   processed directives, which are deleted along with the
	   directive.

	   You should be prepared for side effects when using -C;
	   it causes the preprocessor to treat comments as tokens
	   in their own right.	For example, comments appearing
	   at the start of what would be a directive line have
	   the effect of turning that line into an ordinary
	   source line, since the first token on the line is no
	   longer a #.

       -CC Do not discard comments, including during macro expan-
	   sion.  This is like -C, except that comments contained
	   within macros are also passed through to the output
	   file where the macro is expanded.

	   In addition to the side-effects of the -C option, the
	   -CC option causes all C++-style comments inside a
	   macro to be converted to C-style comments.  This is to
	   prevent later use of that macro from inadvertently
	   commenting out the remainder of the source line.

	   The -CC option is generally used to support lint com-
	   ments.

       -traditional-cpp
	   Try to imitate the behavior of old-fashioned C prepro-
	   cessors, as opposed to ISO C preprocessors.

       -trigraphs
	   Process trigraph sequences.	These are three-character
	   sequences, all starting with ??, that are defined by
	   ISO C to stand for single characters.  For example,
	   ??/ stands for \, so '??/n' is a character constant
	   for a newline.  By default, GCC ignores trigraphs, but
	   in standard-conforming modes it converts them.  See
	   the -std and -ansi options.

	   The nine trigraphs and their replacements are

		   Trigraph:	   ??(	??)  ??<  ??>  ??=  ??/	 ??'  ??!  ??-
		   Replacement:	     [	  ]    {    }	 #    \	   ^	|    ~


       -remap
	   Enable special code to work around file systems which
	   only permit very short file names, such as MS-DOS.

       --help


       --target-help
	   Print text describing all the command line options
	   instead of preprocessing anything.

       -v  Verbose mode.  Print out GNU CPP's version number at
	   the beginning of execution, and report the final form
	   of the include path.

       -H  Print the name of each header file used, in addition
	   to other normal activities.	Each name is indented to
	   show how deep in the #include stack it is.

       -version
       --version
	   Print out GNU CPP's version number.	With one dash,
	   proceed to preprocess as normal.  With two dashes,
	   exit immediately.

       Passing Options to the Assembler

       You can pass options to the assembler.

       -Wa,option
	   Pass option as an option to the assembler.  If option
	   contains commas, it is split into multiple options at
	   the commas.

       Options for Linking

       These options come into play when the compiler links
       object files into an executable output file.  They are
       meaningless if the compiler is not doing a link step.

       object-file-name
	   A file name that does not end in a special recognized
	   suffix is considered to name an object file or
	   library.  (Object files are distinguished from
	   libraries by the linker according to the file con-
	   tents.)  If linking is done, these object files are
	   used as input to the linker.

       -c
       -S
       -E  If any of these options is used, then the linker is
	   not run, and object file names should not be used as
	   arguments.

       -llibrary
       -l library
	   Search the library named library when linking.  (The
	   second alternative with the library as a separate
	   argument is only for POSIX compliance and is not rec-
	   ommended.)

	   It makes a difference where in the command you write
	   this option; the linker searches and processes
	   libraries and object files in the order they are spec-
	   ified.  Thus, foo.o -lz bar.o searches library z after
	   file foo.o but before bar.o.	 If bar.o refers to func-
	   tions in z, those functions may not be loaded.

	   The linker searches a standard list of directories for
	   the library, which is actually a file named libli-
	   brary.a.  The linker then uses this file as if it had
	   been specified precisely by name.

	   The directories searched include several standard sys-
	   tem directories plus any that you specify with -L.

	   Normally the files found this way are library
	   files---archive files whose members are object files.
	   The linker handles an archive file by scanning through
	   it for members which define symbols that have so far
	   been referenced but not defined.  But if the file that
	   is found is an ordinary object file, it is linked in
	   the usual fashion.  The only difference between using
	   an -l option and specifying a file name is that -l
	   surrounds library with lib and .a and searches several
	   directories.

       -lobjc
	   You need this special case of the -l option in order
	   to link an Objective-C program.

       -nostartfiles
	   Do not use the standard system startup files when
	   linking.  The standard system libraries are used nor-
	   mally, unless -nostdlib or -nodefaultlibs is used.

       -nodefaultlibs
	   Do not use the standard system libraries when linking.
	   Only the libraries you specify will be passed to the
	   linker.  The standard startup files are used normally,
	   unless -nostartfiles is used.  The compiler may gener-
	   ate calls to memcmp, memset, and memcpy for System V
	   (and ISO C) environments or to bcopy and bzero for BSD
	   environments.  These entries are usually resolved by
	   entries in libc.  These entry points should be sup-
	   plied through some other mechanism when this option is
	   specified.

       -nostdlib
	   Do not use the standard system startup files or
	   libraries when linking.  No startup files and only the
	   libraries you specify will be passed to the linker.
	   The compiler may generate calls to memcmp, memset, and
	   memcpy for System V (and ISO C) environments or to
	   bcopy and bzero for BSD environments.  These entries
	   are usually resolved by entries in libc.  These entry
	   points should be supplied through some other mechanism
	   when this option is specified.

	   One of the standard libraries bypassed by -nostdlib
	   and -nodefaultlibs is libgcc.a, a library of internal
	   subroutines that GCC uses to overcome shortcomings of
	   particular machines, or special needs for some lan-
	   guages.

	   In most cases, you need libgcc.a even when you want to
	   avoid other standard libraries.  In other words, when
	   you specify -nostdlib or -nodefaultlibs you should
	   usually specify -lgcc as well.  This ensures that you
	   have no unresolved references to internal GCC library
	   subroutines.	 (For example, __main, used to ensure C++
	   constructors will be called.)

       -s  Remove all symbol table and relocation information
	   from the executable.

       -static
	   On systems that support dynamic linking, this prevents
	   linking with the shared libraries.  On other systems,
	   this option has no effect.

       -shared
	   Produce a shared object which can then be linked with
	   other objects to form an executable.	 Not all systems
	   support this option.	 For predictable results, you
	   must also specify the same set of options that were
	   used to generate code (-fpic, -fPIC, or model subop-
	   tions) when you specify this option.[1]

       -shared-libgcc
       -static-libgcc
	   On systems that provide libgcc as a shared library,
	   these options force the use of either the shared or
	   static version respectively.	 If no shared version of
	   libgcc was built when the compiler was configured,
	   these options have no effect.

	   There are several situations in which an application
	   should use the shared libgcc instead of the static
	   version.  The most common of these is when the appli-
	   cation wishes to throw and catch exceptions across
	   different shared libraries.	In that case, each of the
	   libraries as well as the application itself should use
	   the shared libgcc.

	   Therefore, the G++ and GCJ drivers automatically add
	   -shared-libgcc whenever you build a shared library or
	   a main executable, because C++ and Java programs typi-
	   cally use exceptions, so this is the right thing to
	   do.

	   If, instead, you use the GCC driver to create shared
	   libraries, you may find that they will not always be
	   linked with the shared libgcc.  If GCC finds, at its
	   configuration time, that you have a GNU linker that
	   does not support option --eh-frame-hdr, it will link
	   the shared version of libgcc into shared libraries by
	   default.  Otherwise, it will take advantage of the
	   linker and optimize away the linking with the shared
	   version of libgcc, linking with the static version of
	   libgcc by default.  This allows exceptions to propa-
	   gate through such shared libraries, without incurring
	   relocation costs at library load time.

	   However, if a library or main executable is supposed
	   to throw or catch exceptions, you must link it using
	   the G++ or GCJ driver, as appropriate for the lan-
	   guages used in the program, or using the option
	   -shared-libgcc, such that it is linked with the shared
	   libgcc.

       -symbolic
	   Bind references to global symbols when building a
	   shared object.  Warn about any unresolved references
	   (unless overridden by the link editor option -Xlinker
	   -z -Xlinker defs).  Only a few systems support this
	   option.

       -Xlinker option
	   Pass option as an option to the linker.  You can use
	   this to supply system-specific linker options which
	   GCC does not know how to recognize.

	   If you want to pass an option that takes an argument,
	   you must use -Xlinker twice, once for the option and
	   once for the argument.  For example, to pass -assert
	   definitions, you must write -Xlinker -assert -Xlinker
	   definitions.	 It does not work to write -Xlinker
	   "-assert definitions", because this passes the entire
	   string as a single argument, which is not what the
	   linker expects.

       -Wl,option
	   Pass option as an option to the linker.  If option
	   contains commas, it is split into multiple options at
	   the commas.

       -u symbol
	   Pretend the symbol symbol is undefined, to force link-
	   ing of library modules to define it.	 You can use -u
	   multiple times with different symbols to force loading
	   of additional library modules.

       Options for Directory Search

       These options specify directories to search for header
       files, for libraries and for parts of the compiler:

       -Idir
	   Add the directory dir to the head of the list of
	   directories to be searched for header files.	 This can
	   be used to override a system header file, substituting
	   your own version, since these directories are searched
	   before the system header file directories.  However,
	   you should not use this option to add directories that
	   contain vendor-supplied system header files (use
	   -isystem for that).	If you use more than one -I
	   option, the directories are scanned in left-to-right
	   order; the standard system directories come after.

	   If a standard system include directory, or a directory
	   specified with -isystem, is also specified with -I,
	   the -I option will be ignored.  The directory will
	   still be searched but as a system directory at its
	   normal position in the system include chain.	 This is
	   to ensure that GCC's procedure to fix buggy system
	   headers and the ordering for the include_next direc-
	   tive are not inadvertently changed.	If you really
	   need to change the search order for system directo-
	   ries, use the -nostdinc and/or -isystem options.

       -I- Any directories you specify with -I options before the
	   -I- option are searched only for the case of #include
	   "file"; they are not searched for #include <file>.

	   If additional directories are specified with -I
	   options after the -I-, these directories are searched
	   for all #include directives.	 (Ordinarily all -I
	   directories are used this way.)

	   In addition, the -I- option inhibits the use of the
	   current directory (where the current input file came
	   from) as the first search directory for #include
	   "file".  There is no way to override this effect of
	   -I-.	 With -I. you can specify searching the directory
	   which was current when the compiler was invoked.  That
	   is not exactly the same as what the preprocessor does
	   by default, but it is often satisfactory.

	   -I- does not inhibit the use of the standard system
	   directories for header files.  Thus, -I- and -nostdinc
	   are independent.

       -Ldir
	   Add directory dir to the list of directories to be
	   searched for -l.

       -Bprefix
	   This option specifies where to find the executables,
	   libraries, include files, and data files of the com-
	   piler itself.

	   The compiler driver program runs one or more of the
	   subprograms cpp, cc1, as and ld.  It tries prefix as a
	   prefix for each program it tries to run, both with and
	   without machine/version/.

	   For each subprogram to be run, the compiler driver
	   first tries the -B prefix, if any.  If that name is
	   not found, or if -B was not specified, the driver
	   tries two standard prefixes, which are /usr/lib/gcc/
	   and /usr/local/lib/gcc-lib/.	 If neither of those
	   results in a file name that is found, the unmodified
	   program name is searched for using the directories
	   specified in your PATH environment variable.

	   The compiler will check to see if the path provided by
	   the -B refers to a directory, and if necessary it will
	   add a directory separator character at the end of the
	   path.

	   -B prefixes that effectively specify directory names
	   also apply to libraries in the linker, because the
	   compiler translates these options into -L options for
	   the linker.	They also apply to includes files in the
	   preprocessor, because the compiler translates these
	   options into -isystem options for the preprocessor.
	   In this case, the compiler appends include to the pre-
	   fix.

	   The run-time support file libgcc.a can also be
	   searched for using the -B prefix, if needed.	 If it is
	   not found there, the two standard prefixes above are
	   tried, and that is all.  The file is left out of the
	   link if it is not found by those means.

	   Another way to specify a prefix much like the -B pre-
	   fix is to use the environment variable GCC_EXEC_PRE-
	   FIX.

	   As a special kludge, if the path provided by -B is
	   [dir/]stageN/, where N is a number in the range 0 to
	   9, then it will be replaced by [dir/]include.  This is
	   to help with boot-strapping the compiler.

       -specs=file
	   Process file after the compiler reads in the standard
	   specs file, in order to override the defaults that the
	   gcc driver program uses when determining what switches
	   to pass to cc1, cc1plus, as, ld, etc.  More than one
	   -specs=file can be specified on the command line, and
	   they are processed in order, from left to right.

       Specifying Target Machine and Compiler Version

       The usual way to run GCC is to run the executable called
       gcc, or <machine>-gcc when cross-compiling, or
       <machine>-gcc-<version> to run a version other than the
       one that was installed last.  Sometimes this is inconve-
       nient, so GCC provides options that will switch to another
       cross-compiler or version.

       -b machine
	   The argument machine specifies the target machine for
	   compilation.

	   The value to use for machine is the same as was speci-
	   fied as the machine type when configuring GCC as a
	   cross-compiler.  For example, if a cross-compiler was
	   configured with configure i386v, meaning to compile
	   for an 80386 running System V, then you would specify
	   -b i386v to run that cross compiler.

       -V version
	   The argument version specifies which version of GCC to
	   run.	 This is useful when multiple versions are
	   installed.  For example, version might be 2.0, meaning
	   to run GCC version 2.0.

       The -V and -b options work by running the
       <machine>-gcc-<version> executable, so there's no real
       reason to use them if you can just run that directly.

       Hardware Models and Configurations

       Earlier we discussed the standard option -b which chooses
       among different installed compilers for completely differ-
       ent target machines, such as VAX vs. 68000 vs. 80386.

       In addition, each of these target machine types can have
       its own special options, starting with -m, to choose among
       various hardware models or configurations---for example,
       68010 vs 68020, floating coprocessor or none.  A single
       installed version of the compiler can compile for any
       model or configuration, according to the options speci-
       fied.

       Some configurations of the compiler also support addi-
       tional special options, usually for compatibility with
       other compilers on the same platform.

       These options are defined by the macro "TARGET_SWITCHES"
       in the machine description.  The default for the options
       is also defined by that macro, which enables you to change
       the defaults.

       M680x0 Options

       These are the -m options defined for the 68000 series.
       The default values for these options depends on which
       style of 68000 was selected when the compiler was config-
       ured; the defaults for the most common choices are given
       below.

       -m68000
       -mc68000
	   Generate output for a 68000.	 This is the default when
	   the compiler is configured for 68000-based systems.

	   Use this option for microcontrollers with a 68000 or
	   EC000 core, including the 68008, 68302, 68306, 68307,
	   68322, 68328 and 68356.


       -m68020
       -mc68020
	   Generate output for a 68020.	 This is the default when
	   the compiler is configured for 68020-based systems.

       -m68881
	   Generate output containing 68881 instructions for
	   floating point.  This is the default for most 68020
	   systems unless --nfp was specified when the compiler
	   was configured.

       -m68030
	   Generate output for a 68030.	 This is the default when
	   the compiler is configured for 68030-based systems.

       -m68040
	   Generate output for a 68040.	 This is the default when
	   the compiler is configured for 68040-based systems.

	   This option inhibits the use of 68881/68882 instruc-
	   tions that have to be emulated by software on the
	   68040.  Use this option if your 68040 does not have
	   code to emulate those instructions.

       -m68060
	   Generate output for a 68060.	 This is the default when
	   the compiler is configured for 68060-based systems.

	   This option inhibits the use of 68020 and 68881/68882
	   instructions that have to be emulated by software on
	   the 68060.  Use this option if your 68060 does not
	   have code to emulate those instructions.

       -mcpu32
	   Generate output for a CPU32.	 This is the default when
	   the compiler is configured for CPU32-based systems.

	   Use this option for microcontrollers with a CPU32 or
	   CPU32+ core, including the 68330, 68331, 68332, 68333,
	   68334, 68336, 68340, 68341, 68349 and 68360.

       -m5200
	   Generate output for a 520X ``coldfire'' family cpu.
	   This is the default when the compiler is configured
	   for 520X-based systems.

	   Use this option for microcontroller with a 5200 core,
	   including the MCF5202, MCF5203, MCF5204 and MCF5202.

       -m68020-40
	   Generate output for a 68040, without using any of the
	   new instructions.  This results in code which can run
	   relatively efficiently on either a 68020/68881 or a
	   68030 or a 68040.  The generated code does use the
	   68881 instructions that are emulated on the 68040.

       -m68020-60
	   Generate output for a 68060, without using any of the
	   new instructions.  This results in code which can run
	   relatively efficiently on either a 68020/68881 or a
	   68030 or a 68040.  The generated code does use the
	   68881 instructions that are emulated on the 68060.

       -mfpa
	   Generate output containing Sun FPA instructions for
	   floating point.

       -msoft-float
	   Generate output containing library calls for floating
	   point.  Warning: the requisite libraries are not
	   available for all m68k targets.  Normally the facili-
	   ties of the machine's usual C compiler are used, but
	   this can't be done directly in cross-compilation.  You
	   must make your own arrangements to provide suitable
	   library functions for cross-compilation.  The embedded
	   targets m68k-*-aout and m68k-*-coff do provide soft-
	   ware floating point support.

       -mshort
	   Consider type "int" to be 16 bits wide, like "short
	   int".

       -mnobitfield
	   Do not use the bit-field instructions.  The -m68000,
	   -mcpu32 and -m5200 options imply -mnobitfield.

       -mbitfield
	   Do use the bit-field instructions.  The -m68020 option
	   implies -mbitfield.	This is the default if you use a
	   configuration designed for a 68020.

       -mrtd
	   Use a different function-calling convention, in which
	   functions that take a fixed number of arguments return
	   with the "rtd" instruction, which pops their arguments
	   while returning.  This saves one instruction in the
	   caller since there is no need to pop the arguments
	   there.

	   This calling convention is incompatible with the one
	   normally used on Unix, so you cannot use it if you
	   need to call libraries compiled with the Unix com-
	   piler.

	   Also, you must provide function prototypes for all
	   functions that take variable numbers of arguments
	   (including "printf"); otherwise incorrect code will be
	   generated for calls to those functions.

	   In addition, seriously incorrect code will result if
	   you call a function with too many arguments.	 (Nor-
	   mally, extra arguments are harmlessly ignored.)

	   The "rtd" instruction is supported by the 68010,
	   68020, 68030, 68040, 68060 and CPU32 processors, but
	   not by the 68000 or 5200.

       -malign-int
       -mno-align-int
	   Control whether GCC aligns "int", "long", "long long",
	   "float", "double", and "long double" variables on a
	   32-bit boundary (-malign-int) or a 16-bit boundary
	   (-mno-align-int).  Aligning variables on 32-bit bound-
	   aries produces code that runs somewhat faster on pro-
	   cessors with 32-bit busses at the expense of more mem-
	   ory.

	   Warning: if you use the -malign-int switch, GCC will
	   align structures containing the above types	differ-
	   ently than most published application binary interface
	   specifications for the m68k.

       -mpcrel
	   Use the pc-relative addressing mode of the 68000
	   directly, instead of using a global offset table.  At
	   present, this option implies -fpic, allowing at most a
	   16-bit offset for pc-relative addressing.  -fPIC is
	   not presently supported with -mpcrel, though this
	   could be supported for 68020 and higher processors.

       -mno-strict-align
       -mstrict-align
	   Do not (do) assume that unaligned memory references
	   will be handled by the system.

       M68hc1x Options

       These are the -m options defined for the 68hc11 and 68hc12
       microcontrollers.  The default values for these options
       depends on which style of microcontroller was selected
       when the compiler was configured; the defaults for the
       most common choices are given below.

       -m6811
       -m68hc11
	   Generate output for a 68HC11.  This is the default
	   when the compiler is configured for 68HC11-based sys-
	   tems.

       -m6812
       -m68hc12
	   Generate output for a 68HC12.  This is the default
	   when the compiler is configured for 68HC12-based sys-
	   tems.

       -m68S12
       -m68hcs12
	   Generate output for a 68HCS12.

       -mauto-incdec
	   Enable the use of 68HC12 pre and post auto-increment
	   and auto-decrement addressing modes.

       -minmax
       -nominmax
	   Enable the use of 68HC12 min and max instructions.

       -mlong-calls
       -mno-long-calls
	   Treat all calls as being far away (near).  If calls
	   are assumed to be far away, the compiler will use the
	   "call" instruction to call a function and the "rtc"
	   instruction for returning.

       -mshort
	   Consider type "int" to be 16 bits wide, like "short
	   int".

       -msoft-reg-count=count
	   Specify the number of pseudo-soft registers which are
	   used for the code generation.  The maximum number is
	   32.	Using more pseudo-soft register may or may not
	   result in better code depending on the program.  The
	   default is 4 for 68HC11 and 2 for 68HC12.

       VAX Options

       These -m options are defined for the VAX:

       -munix
	   Do not output certain jump instructions ("aobleq" and
	   so on) that the Unix assembler for the VAX cannot han-
	   dle across long ranges.

       -mgnu
	   Do output those jump instructions, on the assumption
	   that you will assemble with the GNU assembler.

       -mg Output code for g-format floating point numbers
	   instead of d-format.

       SPARC Options

       These -m switches are supported on the SPARC:

       -mno-app-regs
       -mapp-regs
	   Specify -mapp-regs to generate output using the global
	   registers 2 through 4, which the SPARC SVR4 ABI
	   reserves for applications.  This is the default.

	   To be fully SVR4 ABI compliant at the cost of some
	   performance loss, specify -mno-app-regs.  You should
	   compile libraries and system software with this
	   option.

       -mfpu
       -mhard-float
	   Generate output containing floating point instruc-
	   tions.  This is the default.

       -mno-fpu
       -msoft-float
	   Generate output containing library calls for floating
	   point.  Warning: the requisite libraries are not
	   available for all SPARC targets.  Normally the facili-
	   ties of the machine's usual C compiler are used, but
	   this cannot be done directly in cross-compilation.
	   You must make your own arrangements to provide suit-
	   able library functions for cross-compilation.  The
	   embedded targets sparc-*-aout and sparclite-*-* do
	   provide software floating point support.

	   -msoft-float changes the calling convention in the
	   output file; therefore, it is only useful if you com-
	   pile all of a program with this option.  In particu-
	   lar, you need to compile libgcc.a, the library that
	   comes with GCC, with -msoft-float in order for this to
	   work.

       -mhard-quad-float
	   Generate output containing quad-word (long double)
	   floating point instructions.

       -msoft-quad-float
	   Generate output containing library calls for quad-word
	   (long double) floating point instructions.  The func-
	   tions called are those specified in the SPARC ABI.
	   This is the default.

	   As of this writing, there are no sparc implementations
	   that have hardware support for the quad-word floating
	   point instructions.	They all invoke a trap handler
	   for one of these instructions, and then the trap han-
	   dler emulates the effect of the instruction.	 Because
	   of the trap handler overhead, this is much slower than
	   calling the ABI library routines.  Thus the -msoft-
	   quad-float option is the default.

       -mno-flat
       -mflat
	   With -mflat, the compiler does not generate
	   save/restore instructions and will use a ``flat'' or
	   single register window calling convention.  This model
	   uses %i7 as the frame pointer and is compatible with
	   the normal register window model.  Code from either
	   may be intermixed.  The local registers and the input
	   registers (0--5) are still treated as ``call saved''
	   registers and will be saved on the stack as necessary.

	   With -mno-flat (the default), the compiler emits
	   save/restore instructions (except for leaf functions)
	   and is the normal mode of operation.

       -mno-unaligned-doubles
       -munaligned-doubles
	   Assume that doubles have 8 byte alignment.  This is
	   the default.

	   With -munaligned-doubles, GCC assumes that doubles
	   have 8 byte alignment only if they are contained in
	   another type, or if they have an absolute address.
	   Otherwise, it assumes they have 4 byte alignment.
	   Specifying this option avoids some rare compatibility
	   problems with code generated by other compilers.  It
	   is not the default because it results in a performance
	   loss, especially for floating point code.

       -mno-faster-structs
       -mfaster-structs
	   With -mfaster-structs, the compiler assumes that
	   structures should have 8 byte alignment.  This enables
	   the use of pairs of "ldd" and "std" instructions for
	   copies in structure assignment, in place of twice as
	   many "ld" and "st" pairs.  However, the use of this
	   changed alignment directly violates the SPARC ABI.
	   Thus, it's intended only for use on targets where the
	   developer acknowledges that their resulting code will
	   not be directly in line with the rules of the ABI.

       -mimpure-text
	   -mimpure-text, used in addition to -shared, tells the
	   compiler to not pass -z text to the linker when link-
	   ing a shared object.	 Using this option, you can link
	   position-dependent code into a shared object.

	   -mimpure-text suppresses the ``relocations remain
	   against allocatable but non-writable sections'' linker
	   error message.  However, the necessary relocations
	   will trigger copy-on-write, and the shared object is
	   not actually shared across processes.  Instead of
	   using -mimpure-text, you should compile all source
	   code with -fpic or -fPIC.

	   This option is only available on SunOS and Solaris.

       -mv8


       -msparclite
	   These two options select variations on the SPARC
	   architecture.

	   By default (unless specifically configured for the
	   Fujitsu SPARClite), GCC generates code for the v7
	   variant of the SPARC architecture.

	   -mv8 will give you SPARC v8 code.  The only difference
	   from v7 code is that the compiler emits the integer
	   multiply and integer divide instructions which exist
	   in SPARC v8 but not in SPARC v7.

	   -msparclite will give you SPARClite code.  This adds
	   the integer multiply, integer divide step and scan
	   ("ffs") instructions which exist in SPARClite but not
	   in SPARC v7.

	   These options are deprecated and will be deleted in a
	   future GCC release.	They have been replaced with
	   -mcpu=xxx.

       -mcypress
       -msupersparc
	   These two options select the processor for which the
	   code is optimized.

	   With -mcypress (the default), the compiler optimizes
	   code for the Cypress CY7C602 chip, as used in the
	   SPARCStation/SPARCServer 3xx series.	 This is also
	   appropriate for the older SPARCStation 1, 2, IPX etc.

	   With -msupersparc the compiler optimizes code for the
	   SuperSPARC cpu, as used in the SPARCStation 10, 1000
	   and 2000 series.  This flag also enables use of the
	   full SPARC v8 instruction set.

	   These options are deprecated and will be deleted in a
	   future GCC release.	They have been replaced with
	   -mcpu=xxx.

       -mcpu=cpu_type
	   Set the instruction set, register set, and instruction
	   scheduling parameters for machine type cpu_type.  Sup-
	   ported values for cpu_type are v7, cypress, v8, super-
	   sparc, sparclite, hypersparc, sparclite86x, f930,
	   f934, sparclet, tsc701, v9, ultrasparc, and ultra-
	   sparc3.

	   Default instruction scheduling parameters are used for
	   values that select an architecture and not an imple-
	   mentation.  These are v7, v8, sparclite, sparclet, v9.

	   Here is a list of each supported architecture and
	   their supported implementations.

		       v7:	       cypress
		       v8:	       supersparc, hypersparc
		       sparclite:      f930, f934, sparclite86x
		       sparclet:       tsc701
		       v9:	       ultrasparc, ultrasparc3


       -mtune=cpu_type
	   Set the instruction scheduling parameters for machine
	   type cpu_type, but do not set the instruction set or
	   register set that the option -mcpu=cpu_type would.

	   The same values for -mcpu=cpu_type can be used for
	   -mtune=cpu_type, but the only useful values are those
	   that select a particular cpu implementation.	 Those
	   are cypress, supersparc, hypersparc, f930, f934, spar-
	   clite86x, tsc701, ultrasparc, and ultrasparc3.

       These -m switches are supported in addition to the above
       on the SPARCLET processor.

       -mlittle-endian
	   Generate code for a processor running in little-endian
	   mode.

       -mlive-g0
	   Treat register "%g0" as a normal register.  GCC will
	   continue to clobber it as necessary but will not
	   assume it always reads as 0.

       -mbroken-saverestore
	   Generate code that does not use non-trivial forms of
	   the "save" and "restore" instructions.  Early versions
	   of the SPARCLET processor do not correctly handle
	   "save" and "restore" instructions used with arguments.
	   They correctly handle them used without arguments.  A
	   "save" instruction used without arguments increments
	   the current window pointer but does not allocate a new
	   stack frame.	 It is assumed that the window overflow
	   trap handler will properly handle this case as will
	   interrupt handlers.

       These -m switches are supported in addition to the above
       on SPARC V9 processors in 64-bit environments.

       -mlittle-endian
	   Generate code for a processor running in little-endian
	   mode. It is only available for a few configurations
	   and most notably not on Solaris.

       -m32
       -m64
	   Generate code for a 32-bit or 64-bit environment.  The
	   32-bit environment sets int, long and pointer to 32
	   bits.  The 64-bit environment sets int to 32 bits and
	   long and pointer to 64 bits.

       -mcmodel=medlow
	   Generate code for the Medium/Low code model: the pro-
	   gram must be linked in the low 32 bits of the address
	   space.  Pointers are 64 bits.  Programs can be stati-
	   cally or dynamically linked.

       -mcmodel=medmid
	   Generate code for the Medium/Middle code model: the
	   program must be linked in the low 44 bits of the
	   address space, the text segment must be less than 2G
	   bytes, and data segment must be within 2G of the text
	   segment.  Pointers are 64 bits.

       -mcmodel=medany
	   Generate code for the Medium/Anywhere code model: the
	   program may be linked anywhere in the address space,
	   the text segment must be less than 2G bytes, and data
	   segment must be within 2G of the text segment.  Point-
	   ers are 64 bits.

       -mcmodel=embmedany
	   Generate code for the Medium/Anywhere code model for
	   embedded systems: assume a 32-bit text and a 32-bit
	   data segment, both starting anywhere (determined at
	   link time).	Register %g4 points to the base of the
	   data segment.  Pointers are still 64 bits.  Programs
	   are statically linked, PIC is not supported.

       -mstack-bias
       -mno-stack-bias
	   With -mstack-bias, GCC assumes that the stack pointer,
	   and frame pointer if present, are offset by -2047
	   which must be added back when making stack frame ref-
	   erences.  Otherwise, assume no such offset is present.

       ARM Options

       These -m options are defined for Advanced RISC Machines
       (ARM) architectures:

       -mapcs-frame
	   Generate a stack frame that is compliant with the ARM
	   Procedure Call Standard for all functions, even if
	   this is not strictly necessary for correct execution
	   of the code.	 Specifying -fomit-frame-pointer with
	   this option will cause the stack frames not to be gen-
	   erated for leaf functions.  The default is -mno-apcs-
	   frame.

       -mapcs
	   This is a synonym for -mapcs-frame.

       -mapcs-26
	   Generate code for a processor running with a 26-bit
	   program counter, and conforming to the function call-
	   ing standards for the APCS 26-bit option.  This option
	   replaces the -m2 and -m3 options of previous releases
	   of the compiler.

       -mapcs-32
	   Generate code for a processor running with a 32-bit
	   program counter, and conforming to the function call-
	   ing standards for the APCS 32-bit option.  This option
	   replaces the -m6 option of previous releases of the
	   compiler.

       -mthumb-interwork
	   Generate code which supports calling between the ARM
	   and Thumb instruction sets.	Without this option the
	   two instruction sets cannot be reliably used inside
	   one program.	 The default is -mno-thumb-interwork,
	   since slightly larger code is generated when -mthumb-
	   interwork is specified.

       -mno-sched-prolog
	   Prevent the reordering of instructions in the function
	   prolog, or the merging of those instruction with the
	   instructions in the function's body.	 This means that
	   all functions will start with a recognizable set of
	   instructions (or in fact one of a choice from a small
	   set of different function prologues), and this infor-
	   mation can be used to locate the start if functions
	   inside an executable piece of code.	The default is
	   -msched-prolog.


       -mhard-float
	   Generate output containing floating point instruc-
	   tions.  This is the default.

       -msoft-float
	   Generate output containing library calls for floating
	   point.  Warning: the requisite libraries are not
	   available for all ARM targets.  Normally the facili-
	   ties of the machine's usual C compiler are used, but
	   this cannot be done directly in cross-compilation.
	   You must make your own arrangements to provide suit-
	   able library functions for cross-compilation.

	   -msoft-float changes the calling convention in the
	   output file; therefore, it is only useful if you com-
	   pile all of a program with this option.  In particu-
	   lar, you need to compile libgcc.a, the library that
	   comes with GCC, with -msoft-float in order for this to
	   work.

       -mlittle-endian
	   Generate code for a processor running in little-endian
	   mode.  This is the default for all standard configura-
	   tions.

       -mbig-endian
	   Generate code for a processor running in big-endian
	   mode; the default is to compile code for a little-
	   endian processor.

       -mwords-little-endian
	   This option only applies when generating code for big-
	   endian processors.  Generate code for a little-endian
	   word order but a big-endian byte order.  That is, a
	   byte order of the form 32107654.  Note: this option
	   should only be used if you require compatibility with
	   code for big-endian ARM processors generated by ver-
	   sions of the compiler prior to 2.8.

       -malignment-traps
	   Generate code that will not trap if the MMU has align-
	   ment traps enabled.	On ARM architectures prior to
	   ARMv4, there were no instructions to access half-word
	   objects stored in memory.  However, when reading from
	   memory a feature of the ARM architecture allows a word
	   load to be used, even if the address is unaligned, and
	   the processor core will rotate the data as it is being
	   loaded.  This option tells the compiler that such mis-
	   aligned accesses will cause a MMU trap and that it
	   should instead synthesize the access as a series of
	   byte accesses.  The compiler can still use word
	   accesses to load half-word data if it knows that the
	   address is aligned to a word boundary.

	   This option is ignored when compiling for ARM archi-
	   tecture 4 or later, since these processors have
	   instructions to directly access half-word objects in
	   memory.

       -mno-alignment-traps
	   Generate code that assumes that the MMU will not trap
	   unaligned accesses.	This produces better code when
	   the target instruction set does not have half-word
	   memory operations (i.e. implementations prior to
	   ARMv4).

	   Note that you cannot use this option to access
	   unaligned word objects, since the processor will only
	   fetch one 32-bit aligned object from memory.

	   The default setting for most targets is -mno-align-
	   ment-traps, since this produces better code when there
	   are no half-word memory instructions available.

       -mshort-load-bytes
       -mno-short-load-words
	   These are deprecated aliases for -malignment-traps.

       -mno-short-load-bytes
       -mshort-load-words
	   This are deprecated aliases for -mno-alignment-traps.

       -mcpu=name
	   This specifies the name of the target ARM processor.
	   GCC uses this name to determine what kind of instruc-
	   tions it can emit when generating assembly code.  Per-
	   missible names are: arm2, arm250, arm3, arm6, arm60,
	   arm600, arm610, arm620, arm7, arm7m, arm7d, arm7dm,
	   arm7di, arm7dmi, arm70, arm700, arm700i, arm710,
	   arm710c, arm7100, arm7500, arm7500fe, arm7tdmi, arm8,
	   strongarm, strongarm110, strongarm1100, arm8, arm810,
	   arm9, arm9e, arm920, arm920t, arm940t, arm9tdmi,
	   arm10tdmi, arm1020t, xscale.

       -mtune=name
	   This option is very similar to the -mcpu= option,
	   except that instead of specifying the actual target
	   processor type, and hence restricting which instruc-
	   tions can be used, it specifies that GCC should tune
	   the performance of the code as if the target were of
	   the type specified in this option, but still choosing
	   the instructions that it will generate based on the
	   cpu specified by a -mcpu= option.  For some ARM imple-
	   mentations better performance can be obtained by using
	   this option.

       -march=name
	   This specifies the name of the target ARM architec-
	   ture.  GCC uses this name to determine what kind of
	   instructions it can emit when generating assembly
	   code.  This option can be used in conjunction with or
	   instead of the -mcpu= option.  Permissible names are:
	   armv2, armv2a, armv3, armv3m, armv4, armv4t, armv5,
	   armv5t, armv5te.

       -mfpe=number
       -mfp=number
	   This specifies the version of the floating point emu-
	   lation available on the target.  Permissible values
	   are 2 and 3.	 -mfp= is a synonym for -mfpe=, for com-
	   patibility with older versions of GCC.

       -mstructure-size-boundary=n
	   The size of all structures and unions will be rounded
	   up to a multiple of the number of bits set by this
	   option.  Permissible values are 8 and 32.  The default
	   value varies for different toolchains.  For the COFF
	   targeted toolchain the default value is 8.  Specifying
	   the larger number can produce faster, more efficient
	   code, but can also increase the size of the program.
	   The two values are potentially incompatible.	 Code
	   compiled with one value cannot necessarily expect to
	   work with code or libraries compiled with the other
	   value, if they exchange information using structures
	   or unions.

       -mabort-on-noreturn
	   Generate a call to the function "abort" at the end of
	   a "noreturn" function.  It will be executed if the
	   function tries to return.

       -mlong-calls
       -mno-long-calls
	   Tells the compiler to perform function calls by first
	   loading the address of the function into a register
	   and then performing a subroutine call on this regis-
	   ter.	 This switch is needed if the target function
	   will lie outside of the 64 megabyte addressing range
	   of the offset based version of subroutine call
	   instruction.

	   Even if this switch is enabled, not all function calls
	   will be turned into long calls.  The heuristic is that
	   static functions, functions which have the short-call
	   attribute, functions that are inside the scope of a
	   #pragma no_long_calls directive and functions whose
	   definitions have already been compiled within the cur-
	   rent compilation unit, will not be turned into long
	   calls.  The exception to this rule is that weak func-
	   tion definitions, functions with the long-call
	   attribute or the section attribute, and functions that
	   are within the scope of a #pragma long_calls direc-
	   tive, will always be turned into long calls.

	   This feature is not enabled by default.  Specifying
	   -mno-long-calls will restore the default behavior, as
	   will placing the function calls within the scope of a
	   #pragma long_calls_off directive.  Note these switches
	   have no effect on how the compiler generates code to
	   handle function calls via function pointers.

       -mnop-fun-dllimport
	   Disable support for the "dllimport" attribute.

       -msingle-pic-base
	   Treat the register used for PIC addressing as read-
	   only, rather than loading it in the prologue for each
	   function.  The run-time system is responsible for ini-
	   tializing this register with an appropriate value
	   before execution begins.

       -mpic-register=reg
	   Specify the register to be used for PIC addressing.
	   The default is R10 unless stack-checking is enabled,
	   when R9 is used.

       -mpoke-function-name
	   Write the name of each function into the text section,
	   directly preceding the function prologue.  The gener-
	   ated code is similar to this:







			t0
			    .ascii "arm_poke_function_name", 0
			    .align
			t1
			    .word 0xff000000 + (t1 - t0)
			arm_poke_function_name
			    mov	    ip, sp
			    stmfd   sp!, {fp, ip, lr, pc}
			    sub	    fp, ip, #4

	   When performing a stack backtrace, code can inspect
	   the value of "pc" stored at "fp + 0".  If the trace
	   function then looks at location "pc - 12" and the top
	   8 bits are set, then we know that there is a function
	   name embedded immediately preceding this location and
	   has length "((pc[-3]) & 0xff000000)".

       -mthumb
	   Generate code for the 16-bit Thumb instruction set.
	   The default is to use the 32-bit ARM instruction set.

       -mtpcs-frame
	   Generate a stack frame that is compliant with the
	   Thumb Procedure Call Standard for all non-leaf func-
	   tions.  (A leaf function is one that does not call any
	   other functions.)  The default is -mno-tpcs-frame.

       -mtpcs-leaf-frame
	   Generate a stack frame that is compliant with the
	   Thumb Procedure Call Standard for all leaf functions.
	   (A leaf function is one that does not call any other
	   functions.)	The default is -mno-apcs-leaf-frame.

       -mcallee-super-interworking
	   Gives all externally visible functions in the file
	   being compiled an ARM instruction set header which
	   switches to Thumb mode before executing the rest of
	   the function.  This allows these functions to be
	   called from non-interworking code.

       -mcaller-super-interworking
	   Allows calls via function pointers (including virtual
	   functions) to execute correctly regardless of whether
	   the target code has been compiled for interworking or
	   not.	 There is a small overhead in the cost of execut-
	   ing a function pointer if this option is enabled.

       MN10200 Options

       These -m options are defined for Matsushita MN10200 archi-
       tectures:

       -mrelax
	   Indicate to the linker that it should perform a relax-
	   ation optimization pass to shorten branches, calls and
	   absolute memory addresses.  This option only has an
	   effect when used on the command line for the final
	   link step.

	   This option makes symbolic debugging impossible.

       MN10300 Options

       These -m options are defined for Matsushita MN10300 archi-
       tectures:


       -mmult-bug
	   Generate code to avoid bugs in the multiply instruc-
	   tions for the MN10300 processors.  This is the
	   default.

       -mno-mult-bug
	   Do not generate code to avoid bugs in the multiply
	   instructions for the MN10300 processors.

       -mam33
	   Generate code which uses features specific to the AM33
	   processor.

       -mno-am33
	   Do not generate code which uses features specific to
	   the AM33 processor.	This is the default.

       -mno-crt0
	   Do not link in the C run-time initialization object
	   file.

       -mrelax
	   Indicate to the linker that it should perform a relax-
	   ation optimization pass to shorten branches, calls and
	   absolute memory addresses.  This option only has an
	   effect when used on the command line for the final
	   link step.

	   This option makes symbolic debugging impossible.

       M32R/D Options

       These -m options are defined for Mitsubishi M32R/D archi-
       tectures:

       -m32rx
	   Generate code for the M32R/X.

       -m32r
	   Generate code for the M32R.	This is the default.

       -mcode-model=small
	   Assume all objects live in the lower 16MB of memory
	   (so that their addresses can be loaded with the "ld24"
	   instruction), and assume all subroutines are reachable
	   with the "bl" instruction.  This is the default.

	   The addressability of a particular object can be set
	   with the "model" attribute.

       -mcode-model=medium
	   Assume objects may be anywhere in the 32-bit address
	   space (the compiler will generate "seth/add3" instruc-
	   tions to load their addresses), and assume all subrou-
	   tines are reachable with the "bl" instruction.

       -mcode-model=large
	   Assume objects may be anywhere in the 32-bit address
	   space (the compiler will generate "seth/add3" instruc-
	   tions to load their addresses), and assume subroutines
	   may not be reachable with the "bl" instruction (the
	   compiler will generate the much slower "seth/add3/jl"
	   instruction sequence).



       -msdata=none
	   Disable use of the small data area.	Variables will be
	   put into one of .data, bss, or .rodata (unless the
	   "section" attribute has been specified).  This is the
	   default.

	   The small data area consists of sections .sdata and
	   .sbss.  Objects may be explicitly put in the small
	   data area with the "section" attribute using one of
	   these sections.

       -msdata=sdata
	   Put small global and static data in the small data
	   area, but do not generate special code to reference
	   them.

       -msdata=use
	   Put small global and static data in the small data
	   area, and generate special instructions to reference
	   them.

       -G num
	   Put global and static objects less than or equal to
	   num bytes into the small data or bss sections instead
	   of the normal data or bss sections.	The default value
	   of num is 8.	 The -msdata option must be set to one of
	   sdata or use for this option to have any effect.

	   All modules should be compiled with the same -G num
	   value.  Compiling with different values of num may or
	   may not work; if it doesn't the linker will give an
	   error message---incorrect code will not be generated.

       M88K Options

       These -m options are defined for Motorola 88k architec-
       tures:

       -m88000
	   Generate code that works well on both the m88100 and
	   the m88110.

       -m88100
	   Generate code that works best for the m88100, but that
	   also runs on the m88110.

       -m88110
	   Generate code that works best for the m88110, and may
	   not run on the m88100.

       -mbig-pic
	   Obsolete option to be removed from the next revision.
	   Use -fPIC.

       -midentify-revision
	   Include an "ident" directive in the assembler output
	   recording the source file name, compiler name and ver-
	   sion, timestamp, and compilation flags used.

       -mno-underscores
	   In assembler output, emit symbol names without adding
	   an underscore character at the beginning of each name.
	   The default is to use an underscore as prefix on each
	   name.


       -mocs-debug-info
       -mno-ocs-debug-info
	   Include (or omit) additional debugging information
	   (about registers used in each stack frame) as speci-
	   fied in the 88open Object Compatibility Standard,
	   ``OCS''.  This extra information allows debugging of
	   code that has had the frame pointer eliminated.  The
	   default for SVr4 and Delta 88 SVr3.2 is to include
	   this information; other 88k configurations omit this
	   information by default.

       -mocs-frame-position
	   When emitting COFF debugging information for automatic
	   variables and parameters stored on the stack, use the
	   offset from the canonical frame address, which is the
	   stack pointer (register 31) on entry to the function.
	   The SVr4 and Delta88 SVr3.2, and BCS configurations
	   use -mocs-frame-position; other 88k configurations
	   have the default -mno-ocs-frame-position.

       -mno-ocs-frame-position
	   When emitting COFF debugging information for automatic
	   variables and parameters stored on the stack, use the
	   offset from the frame pointer register (register 30).
	   When this option is in effect, the frame pointer is
	   not eliminated when debugging information is selected
	   by the -g switch.

       -moptimize-arg-area
	   Save space by reorganizing the stack frame.	This
	   option generates code that does not agree with the
	   88open specifications, but uses less memory.

       -mno-optimize-arg-area
	   Do not reorganize the stack frame to save space.  This
	   is the default.  The generated conforms to the speci-
	   fication, but uses more memory.

       -mshort-data-num
	   Generate smaller data references by making them rela-
	   tive to "r0", which allows loading a value using a
	   single instruction (rather than the usual two).  You
	   control which data references are affected by specify-
	   ing num with this option.  For example, if you specify
	   -mshort-data-512, then the data references affected
	   are those involving displacements of less than 512
	   bytes.  -mshort-data-num is not effective for num
	   greater than 64k.

       -mserialize-volatile
       -mno-serialize-volatile
	   Do, or don't, generate code to guarantee sequential
	   consistency of volatile memory references.  By
	   default, consistency is guaranteed.

	   The order of memory references made by the MC88110
	   processor does not always match the order of the
	   instructions requesting those references.  In particu-
	   lar, a load instruction may execute before a preceding
	   store instruction.  Such reordering violates sequen-
	   tial consistency of volatile memory references, when
	   there are multiple processors.   When consistency must
	   be guaranteed, GCC generates special instructions, as
	   needed, to force execution in the proper order.

	   The MC88100 processor does not reorder memory refer-
	   ences and so always provides sequential consistency.
	   However, by default, GCC generates the special
	   instructions to guarantee consistency even when you
	   use -m88100, so that the code may be run on an MC88110
	   processor.  If you intend to run your code only on the
	   MC88100 processor, you may use -mno-serialize-
	   volatile.

	   The extra code generated to guarantee consistency may
	   affect the performance of your application.	If you
	   know that you can safely forgo this guarantee, you may
	   use -mno-serialize-volatile.

       -msvr4
       -msvr3
	   Turn on (-msvr4) or off (-msvr3) compiler extensions
	   related to System V release 4 (SVr4).  This controls
	   the following:

	   1.  Which variant of the assembler syntax to emit.

	   2.  -msvr4 makes the C preprocessor recognize #pragma
	       weak that is used on System V release 4.

	   3.  -msvr4 makes GCC issue additional declaration
	       directives used in SVr4.

	   -msvr4 is the default for the m88k-motorola-sysv4 con-
	   figuration.	-msvr3 is the default for all other m88k
	   configurations.

       -mversion-03.00
	   This option is obsolete, and is ignored.

       -mno-check-zero-division
       -mcheck-zero-division
	   Do, or don't, generate code to guarantee that integer
	   division by zero will be detected.  By default, detec-
	   tion is guaranteed.

	   Some models of the MC88100 processor fail to trap upon
	   integer division by zero under certain conditions.  By
	   default, when compiling code that might be run on such
	   a processor, GCC generates code that explicitly checks
	   for zero-valued divisors and traps with exception num-
	   ber 503 when one is detected.  Use of -mno-check-zero-
	   division suppresses such checking for code generated
	   to run on an MC88100 processor.

	   GCC assumes that the MC88110 processor correctly
	   detects all instances of integer division by zero.
	   When -m88110 is specified, no explicit checks for
	   zero-valued divisors are generated, and both -mcheck-
	   zero-division and -mno-check-zero-division are
	   ignored.

       -muse-div-instruction
	   Use the div instruction for signed integer division on
	   the MC88100 processor.  By default, the div instruc-
	   tion is not used.

	   On the MC88100 processor the signed integer division
	   instruction div) traps to the operating system on a
	   negative operand.  The operating system transparently
	   completes the operation, but at a large cost in
	   execution time.  By default, when compiling code that
	   might be run on an MC88100 processor, GCC emulates
	   signed integer division using the unsigned integer
	   division instruction divu), thereby avoiding the large
	   penalty of a trap to the operating system.  Such emu-
	   lation has its own, smaller, execution cost in both
	   time and space.  To the extent that your code's impor-
	   tant signed integer division operations are performed
	   on two nonnegative operands, it may be desirable to
	   use the div instruction directly.

	   On the MC88110 processor the div instruction (also
	   known as the divs instruction) processes negative
	   operands without trapping to the operating system.
	   When -m88110 is specified, -muse-div-instruction is
	   ignored, and the div instruction is used for signed
	   integer division.

	   Note that the result of dividing "INT_MIN" by -1 is
	   undefined.  In particular, the behavior of such a
	   division with and without -muse-div-instruction may
	   differ.

       -mtrap-large-shift
       -mhandle-large-shift
	   Include code to detect bit-shifts of more than 31
	   bits; respectively, trap such shifts or emit code to
	   handle them properly.  By default GCC makes no special
	   provision for large bit shifts.

       -mwarn-passed-structs
	   Warn when a function passes a struct as an argument or
	   result.  Structure-passing conventions have changed
	   during the evolution of the C language, and are often
	   the source of portability problems.	By default, GCC
	   issues no such warning.

       IBM RS/6000 and PowerPC Options

       These -m options are defined for the IBM RS/6000 and Pow-
       erPC:

       -mpower
       -mno-power
       -mpower2
       -mno-power2
       -mpowerpc
       -mno-powerpc
       -mpowerpc-gpopt
       -mno-powerpc-gpopt
       -mpowerpc-gfxopt
       -mno-powerpc-gfxopt
       -mpowerpc64
       -mno-powerpc64
	   GCC supports two related instruction set architectures
	   for the RS/6000 and PowerPC.	 The POWER instruction
	   set are those instructions supported by the rios chip
	   set used in the original RS/6000 systems and the Pow-
	   erPC instruction set is the architecture of the
	   Motorola MPC5xx, MPC6xx, MPC8xx microprocessors, and
	   the IBM 4xx microprocessors.

	   Neither architecture is a subset of the other.  How-
	   ever there is a large common subset of instructions
	   supported by both.  An MQ register is included in pro-
	   cessors supporting the POWER architecture.

	   You use these options to specify which instructions
	   are available on the processor you are using.  The
	   default value of these options is determined when con-
	   figuring GCC.  Specifying the -mcpu=cpu_type overrides
	   the specification of these options.	We recommend you
	   use the -mcpu=cpu_type option rather than the options
	   listed above.

	   The -mpower option allows GCC to generate instructions
	   that are found only in the POWER architecture and to
	   use the MQ register.	 Specifying -mpower2 implies
	   -power and also allows GCC to generate instructions
	   that are present in the POWER2 architecture but not
	   the original POWER architecture.

	   The -mpowerpc option allows GCC to generate instruc-
	   tions that are found only in the 32-bit subset of the
	   PowerPC architecture.  Specifying -mpowerpc-gpopt
	   implies -mpowerpc and also allows GCC to use the
	   optional PowerPC architecture instructions in the Gen-
	   eral Purpose group, including floating-point square
	   root.  Specifying -mpowerpc-gfxopt implies -mpowerpc
	   and also allows GCC to use the optional PowerPC archi-
	   tecture instructions in the Graphics group, including
	   floating-point select.

	   The -mpowerpc64 option allows GCC to generate the
	   additional 64-bit instructions that are found in the
	   full PowerPC64 architecture and to treat GPRs as
	   64-bit, doubleword quantities.  GCC defaults to -mno-
	   powerpc64.

	   If you specify both -mno-power and -mno-powerpc, GCC
	   will use only the instructions in the common subset of
	   both architectures plus some special AIX common-mode
	   calls, and will not use the MQ register.  Specifying
	   both -mpower and -mpowerpc permits GCC to use any
	   instruction from either architecture and to allow use
	   of the MQ register; specify this for the Motorola
	   MPC601.

       -mnew-mnemonics
       -mold-mnemonics
	   Select which mnemonics to use in the generated assem-
	   bler code.  With -mnew-mnemonics, GCC uses the assem-
	   bler mnemonics defined for the PowerPC architecture.
	   With -mold-mnemonics it uses the assembler mnemonics
	   defined for the POWER architecture.	Instructions
	   defined in only one architecture have only one
	   mnemonic; GCC uses that mnemonic irrespective of which
	   of these options is specified.

	   GCC defaults to the mnemonics appropriate for the
	   architecture in use.	 Specifying -mcpu=cpu_type some-
	   times overrides the value of these option.  Unless you
	   are building a cross-compiler, you should normally not
	   specify either -mnew-mnemonics or -mold-mnemonics, but
	   should instead accept the default.