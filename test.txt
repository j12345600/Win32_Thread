GCC(1)			       GNU			   GCC(1)



NAME
       gcc - GNU project C and C++ compiler

SYNOPSIS
       gcc [-c|-S|-E] [-std=standard]
	   [-g] [-pg] [-Olevel]
	   [-Wwarn...] [-pedantic]
	   [-Idir...] [-Ldir...]
	   [-Dmacro[=defn]...] [-Umacro]
	   [-foption...] [-mmachine-option...]
	   [-o outfile] infile...

       Only the most useful options are listed here; see below
       for the remainder.  g++ accepts mostly the same options as
       gcc.

DESCRIPTION
       When you invoke GCC, it normally does preprocessing, com-
       pilation, assembly and linking.	The ``overall options''
       allow you to stop this process at an intermediate stage.
       For example, the -c option says not to run the linker.
       Then the output consists of object files output by the
       assembler.

       Other options are passed on to one stage of processing.
       Some options control the preprocessor and others the com-
       piler itself.  Yet other options control the assembler and
       linker; most of these are not documented here, since you
       rarely need to use any of them.

       Most of the command line options that you can use with GCC
       are useful for C programs; when an option is only useful
       with another language (usually C++), the explanation says
       so explicitly.  If the description for a particular option
       does not mention a source language, you can use that
       option with all supported languages.

       The gcc program accepts options and file names as
       operands.  Many options have multi-letter names; therefore
       multiple single-letter options may not be grouped: -dr is
       very different from -d -r.

       You can mix options and other arguments.	 For the most
       part, the order you use doesn't matter.	Order does matter
       when you use several options of the same kind; for exam-
       ple, if you specify -L more than once, the directories are
       searched in the order specified.

       Many options have long names starting with -f or with
       -W---for example, -fforce-mem, -fstrength-reduce, -Wformat
       and so on.  Most of these have both positive and negative
       forms; the negative form of -ffoo would be -fno-foo.  This
       manual documents only one of these two forms, whichever
       one is not the default.

OPTIONS
       Option Summary

       Here is a summary of all the options, grouped by type.
       Explanations are in the following sections.



       Overall Options
	   -c  -S  -E  -o file	-pipe  -pass-exit-codes -x lan-
	   guage  -v  -###  --help  --target-help  --version

       C Language Options
	   -ansi  -std=standard	 -aux-info filename -fno-asm
	   -fno-builtin	 -fno-builtin-function -fhosted	 -ffree-
	   standing  -fms-extensions -trigraphs	 -no-integrated-
	   cpp	-traditional  -traditional-cpp -fallow-single-
	   precision  -fcond-mismatch -fsigned-bitfields
	   -fsigned-char -funsigned-bitfields  -funsigned-char
	   -fwritable-strings

       C++ Language Options
	   -fabi-version=n  -fno-access-control	 -fcheck-new
	   -fconserve-space  -fno-const-strings	 -fdollars-in-
	   identifiers -fno-elide-constructors -fno-enforce-eh-
	   specs  -fexternal-templates -falt-external-templates
	   -ffor-scope	-fno-for-scope	-fno-gnu-keywords -fno-
	   implicit-templates -fno-implicit-inline-templates
	   -fno-implement-inlines  -fms-extensions -fno-nonansi-
	   builtins  -fno-operator-names -fno-optional-diags
	   -fpermissive -frepo	-fno-rtti  -fstats  -ftemplate-
	   depth-n -fuse-cxa-atexit  -fvtable-gc  -fno-weak
	   -nostdinc++ -fno-default-inline  -Wabi  -Wctor-dtor-
	   privacy -Wnon-virtual-dtor  -Wreorder -Weffc++  -Wno-
	   deprecated -Wno-non-template-friend	-Wold-style-cast
	   -Woverloaded-virtual	 -Wno-pmf-conversions -Wsign-
	   promo  -Wsynth

       Objective-C Language Options
	   -fconstant-string-class=class-name -fgnu-runtime
	   -fnext-runtime  -gen-decls -Wno-protocol  -Wselector
	   -Wundeclared-selector

       Language Independent Options
	   -fmessage-length=n -fdiagnostics-show-loca-
	   tion=[once|every-line]

       Warning Options
	   -fsyntax-only  -pedantic  -pedantic-errors -w  -W
	   -Wall  -Waggregate-return -Wcast-align  -Wcast-qual
	   -Wchar-subscripts  -Wcomment -Wconversion  -Wno-depre-
	   cated-declarations -Wdisabled-optimization  -Wno-div-
	   by-zero  -Werror -Wfloat-equal  -Wformat  -Wformat=2
	   -Wformat-nonliteral	-Wformat-security -Wimplicit
	   -Wimplicit-int -Wimplicit-function-declaration -Wer-
	   ror-implicit-function-declaration -Wimport  -Winline
	   -Wno-endif-labels -Wlarger-than-len	-Wlong-long
	   -Wmain  -Wmissing-braces -Wmissing-format-attribute
	   -Wmissing-noreturn -Wno-multichar  -Wno-format-extra-
	   args	 -Wno-format-y2k -Wno-import  -Wnonnull	 -Wpacked
	   -Wpadded -Wparentheses  -Wpointer-arith  -Wredundant-
	   decls -Wreturn-type	-Wsequence-point  -Wshadow
	   -Wsign-compare  -Wstrict-aliasing -Wswitch  -Wswitch-
	   default  -Wswitch-enum -Wsystem-headers  -Wtrigraphs
	   -Wundef  -Wuninitialized -Wunknown-pragmas  -Wunreach-
	   able-code -Wunused  -Wunused-function  -Wunused-label
	   -Wunused-parameter -Wunused-value  -Wunused-variable
	   -Wwrite-strings

       C-only Warning Options
	   -Wbad-function-cast	-Wmissing-declarations -Wmissing-
	   prototypes  -Wnested-externs -Wstrict-prototypes
	   -Wtraditional

       Debugging Options
	   -dletters  -dumpspecs  -dumpmachine	-dumpversion
	   -fdump-unnumbered  -fdump-translation-unit[-n] -fdump-
	   class-hierarchy[-n] -fdump-tree-original[-n] -fdump-
	   tree-optimized[-n] -fdump-tree-inlined[-n] -felimi-
	   nate-dwarf2-dups  -fmem-report -fprofile-arcs  -fran-
	   dom-seed=n -fsched-verbose=n -ftest-coverage	 -ftime-
	   report -g  -glevel  -gcoff  -gdwarf	-gdwarf-1
	   -gdwarf-1+  -gdwarf-2 -ggdb	-gstabs	 -gstabs+  -gvms
	   -gxcoff  -gxcoff+ -p	 -pg  -print-file-name=library
	   -print-libgcc-file-name -print-multi-directory
	   -print-multi-lib -print-prog-name=program  -print-
	   search-dirs	-Q -save-temps	-time

       Optimization Options
	   -falign-functions=n	-falign-jumps=n -falign-labels=n
	   -falign-loops=n -fbranch-probabilities  -fcaller-saves
	   -fcprop-registers -fcse-follow-jumps	 -fcse-skip-
	   blocks  -fdata-sections -fdelayed-branch  -fdelete-
	   null-pointer-checks -fexpensive-optimizations  -ffast-
	   math	 -ffloat-store -fforce-addr  -fforce-mem  -ffunc-
	   tion-sections -fgcse	 -fgcse-lm  -fgcse-sm  -floop-
	   optimize  -fcrossjumping -fif-conversion  -fif-conver-
	   sion2 -finline-functions  -finline-limit=n  -fkeep-
	   inline-functions -fkeep-static-consts  -fmerge-con-
	   stants  -fmerge-all-constants -fmove-all-movables
	   -fnew-ra  -fno-branch-count-reg -fno-default-inline
	   -fno-defer-pop -fno-function-cse  -fno-guess-branch-
	   probability -fno-inline  -fno-math-errno  -fno-peep-
	   hole	 -fno-peephole2 -funsafe-math-optimizations
	   -ffinite-math-only -fno-trapping-math  -fno-zero-ini-
	   tialized-in-bss -fomit-frame-pointer	 -foptimize-reg-
	   ister-move -foptimize-sibling-calls	-fprefetch-loop-
	   arrays -freduce-all-givs  -fregmove	-frename-regis-
	   ters -freorder-blocks  -freorder-functions -frerun-
	   cse-after-loop  -frerun-loop-opt -fschedule-insns
	   -fschedule-insns2 -fno-sched-interblock  -fno-sched-
	   spec	 -fsched-spec-load -fsched-spec-load-dangerous
	   -fsignaling-nans -fsingle-precision-constant	 -fssa
	   -fssa-ccp  -fssa-dce -fstrength-reduce  -fstrict-
	   aliasing  -ftracer  -fthread-jumps -funroll-all-loops
	   -funroll-loops --param name=value -O	 -O0  -O1  -O2
	   -O3	-Os

       Preprocessor Options
	   -$  -Aquestion=answer -A-question[=answer] -C  -dD
	   -dI	-dM  -dN -Dmacro[=defn]	 -E  -H -idirafter dir
	   -include file  -imacros file -iprefix file  -iwithpre-
	   fix dir -iwithprefixbefore dir  -isystem dir -M  -MM
	   -MF	-MG  -MP  -MQ  -MT  -nostdinc  -P  -remap -tri-
	   graphs  -undef  -Umacro  -Wp,option

       Assembler Option
	   -Wa,option

       Linker Options
	   object-file-name  -llibrary -nostartfiles  -nodefault-
	   libs	 -nostdlib -s  -static	-static-libgcc	-shared
	   -shared-libgcc  -symbolic -Wl,option	 -Xlinker option
	   -u symbol

       Directory Options
	   -Bprefix  -Idir  -I-	 -Ldir	-specs=file



       Target Options
	   -V version  -b machine

       Machine Dependent Options
	   M680x0 Options -m68000  -m68020  -m68020-40
	   -m68020-60  -m68030	-m68040 -m68060	 -mcpu32  -m5200
	   -m68881  -mbitfield	-mc68000  -mc68020 -mfpa  -mno-
	   bitfield  -mrtd  -mshort  -msoft-float  -mpcrel
	   -malign-int	-mstrict-align

	   M68hc1x Options -m6811  -m6812  -m68hc11  -m68hc12
	   -m68hcs12 -mauto-incdec  -minmax  -mlong-calls
	   -mshort -msoft-reg-count=count

	   VAX Options -mg  -mgnu  -munix

	   SPARC Options -mcpu=cpu-type -mtune=cpu-type
	   -mcmodel=code-model -m32  -m64 -mapp-regs  -mbroken-
	   saverestore	-mcypress -mfaster-structs  -mflat -mfpu
	   -mhard-float	 -mhard-quad-float -mimpure-text  -mlit-
	   tle-endian  -mlive-g0  -mno-app-regs -mno-faster-
	   structs  -mno-flat  -mno-fpu -mno-impure-text  -mno-
	   stack-bias  -mno-unaligned-doubles -msoft-float
	   -msoft-quad-float  -msparclite  -mstack-bias -msuper-
	   sparc  -munaligned-doubles  -mv8

	   ARM Options -mapcs-frame  -mno-apcs-frame -mapcs-26
	   -mapcs-32 -mapcs-stack-check	 -mno-apcs-stack-check
	   -mapcs-float	 -mno-apcs-float -mapcs-reentrant  -mno-
	   apcs-reentrant -msched-prolog  -mno-sched-prolog
	   -mlittle-endian  -mbig-endian  -mwords-little-endian
	   -malignment-traps  -mno-alignment-traps -msoft-float
	   -mhard-float	 -mfpe -mthumb-interwork  -mno-thumb-
	   interwork -mcpu=name	 -march=name  -mfpe=name -mstruc-
	   ture-size-boundary=n -mabort-on-noreturn -mlong-calls
	   -mno-long-calls -msingle-pic-base  -mno-single-pic-
	   base -mpic-register=reg -mnop-fun-dllimport -mpoke-
	   function-name -mthumb  -marm -mtpcs-frame  -mtpcs-
	   leaf-frame -mcaller-super-interworking  -mcallee-
	   super-interworking

	   MN10200 Options -mrelax

	   MN10300 Options -mmult-bug  -mno-mult-bug -mam33
	   -mno-am33 -mno-crt0	-mrelax

	   M32R/D Options -m32rx  -m32r	 -mcode-model=model-type
	   -msdata=sdata-type  -G num

	   M88K Options -m88000	 -m88100  -m88110  -mbig-pic
	   -mcheck-zero-division  -mhandle-large-shift -miden-
	   tify-revision  -mno-check-zero-division -mno-ocs-
	   debug-info  -mno-ocs-frame-position -mno-optimize-arg-
	   area	 -mno-serialize-volatile -mno-underscores  -mocs-
	   debug-info -mocs-frame-position  -moptimize-arg-area
	   -mserialize-volatile	 -mshort-data-num  -msvr3 -msvr4
	   -mtrap-large-shift  -muse-div-instruction -mver-
	   sion-03.00  -mwarn-passed-structs

	   RS/6000 and PowerPC Options -mcpu=cpu-type -mtune=cpu-
	   type -mpower	 -mno-power  -mpower2  -mno-power2 -mpow-
	   erpc	 -mpowerpc64  -mno-powerpc -maltivec  -mno-
	   altivec -mpowerpc-gpopt  -mno-powerpc-gpopt -mpowerpc-
	   gfxopt  -mno-powerpc-gfxopt -mnew-mnemonics	-mold-
	   mnemonics -mfull-toc	  -mminimal-toc	 -mno-fp-in-toc
	   -mno-sum-in-toc -m64	 -m32  -mxl-call  -mno-xl-call
	   -mpe -msoft-float  -mhard-float  -mmultiple	-mno-mul-
	   tiple -mstring  -mno-string	-mupdate  -mno-update
	   -mfused-madd	 -mno-fused-madd  -mbit-align  -mno-bit-
	   align -mstrict-align	 -mno-strict-align  -mrelocatable
	   -mno-relocatable  -mrelocatable-lib	-mno-relocatable-
	   lib -mtoc  -mno-toc	-mlittle  -mlittle-endian  -mbig
	   -mbig-endian -mcall-aix  -mcall-sysv	 -mcall-netbsd
	   -maix-struct-return	-msvr4-struct-return
	   -mabi=altivec  -mabi=no-altivec -mabi=spe  -mabi=no-
	   spe -misel=yes  -misel=no -mprototype  -mno-prototype
	   -msim  -mmvme  -mads	 -myellowknife	-memb  -msdata
	   -msdata=opt	-mvxworks  -mwindiss  -G num  -pthread

	   Darwin Options

	   -all_load -allowable_client -arch -arch_errors_fatal
	   -arch_only -bind_at_load -bundle -bundle_loader
	   -client_name -compatibility_version -current_version
	   -dependency-file -dylib_file -dylinker_install_name
	   -dynamic -dynamiclib -exported_symbols_list -filelist
	   -flat_namespace -force_cpusubtype_ALL
	   -force_flat_namespace -headerpad_max_install_names
	   -image_base -init -install_name -keep_private_externs
	   -multi_module -multiply_defined -multi-
	   ply_defined_unused -noall_load -nomultidefs -noprebind
	   -noseglinkedit -pagezero_size -prebind -pre-
	   bind_all_twolevel_modules -private_bundle
	   -read_only_relocs -sectalign -sectobjectsymbols -why-
	   load -seg1addr -sectcreate -sectobjectsymbols -sec-
	   torder -seg_addr_table -seg_addr_table_filename
	   -seglinkedit -segprot -segs_read_only_addr
	   -segs_read_write_addr -single_module -static
	   -sub_library -sub_umbrella -twolevel_namespace
	   -umbrella -undefined -unexported_symbols_list
	   -weak_reference_mismatches -whatsloaded

	   RT Options -mcall-lib-mul  -mfp-arg-in-fpregs  -mfp-
	   arg-in-gregs -mfull-fp-blocks  -mhc-struct-return
	   -min-line-mul -mminimum-fp-blocks  -mnohc-struct-
	   return

	   MIPS Options -mabicalls  -march=cpu-type
	   -mtune=cpu=type -mcpu=cpu-type  -membedded-data
	   -muninit-const-in-rodata -membedded-pic  -mfp32
	   -mfp64  -mfused-madd	 -mno-fused-madd -mgas	-mgp32
	   -mgp64 -mgpopt  -mhalf-pic  -mhard-float  -mint64
	   -mips1 -mips2  -mips3  -mips4  -mlong64  -mlong32
	   -mlong-calls	 -mmemcpy -mmips-as  -mmips-tfile  -mno-
	   abicalls -mno-embedded-data	-mno-uninit-const-in-
	   rodata -mno-embedded-pic  -mno-gpopt	 -mno-long-calls
	   -mno-memcpy	-mno-mips-tfile	 -mno-rnames  -mno-stats
	   -mrnames  -msoft-float -m4650  -msingle-float  -mmad
	   -mstats  -EL	 -EB  -G num  -nocpp -mabi=32  -mabi=n32
	   -mabi=64  -mabi=eabi -mfix7000  -mno-crt0  -mflush-
	   func=func  -mno-flush-func -mbranch-likely  -mno-
	   branch-likely

	   i386 and x86-64 Options -mcpu=cpu-type  -march=cpu-
	   type -mfpmath=unit  -masm=dialect  -mno-fancy-math-387
	   -mno-fp-ret-in-387  -msoft-float  -msvr3-shlib -mno-
	   wide-multiply  -mrtd	 -malign-double -mpreferred-
	   stack-boundary=num -mmmx  -msse  -msse2 -msse3 -m3dnow
	   -mthreads  -mno-align-stringops  -minline-all-
	   stringops -mpush-args  -maccumulate-outgoing-args
	   -m128bit-long-double -m96bit-long-double
	   -mregparm=num  -momit-leaf-frame-pointer -mno-red-zone
	   -mcmodel=code-model -m32  -m64

	   HPPA Options -march=architecture-type -mbig-switch
	   -mdisable-fpregs  -mdisable-indexing -mfast-indirect-
	   calls  -mgas	 -mgnu-ld  -mhp-ld -mjump-in-delay
	   -mlinker-opt	 -mlong-calls -mlong-load-store	 -mno-
	   big-switch  -mno-disable-fpregs -mno-disable-indexing
	   -mno-fast-indirect-calls  -mno-gas -mno-jump-in-delay
	   -mno-long-load-store -mno-portable-runtime  -mno-soft-
	   float -mno-space-regs  -msoft-float	-mpa-risc-1-0
	   -mpa-risc-1-1  -mpa-risc-2-0	 -mportable-runtime
	   -mschedule=cpu-type	-mspace-regs  -msio  -mwsio
	   -nolibdld  -static  -threads

	   Intel 960 Options -mcpu-type	 -masm-compat  -mclean-
	   linkage -mcode-align	 -mcomplex-addr	 -mleaf-proce-
	   dures -mic-compat  -mic2.0-compat  -mic3.0-compat
	   -mintel-asm	-mno-clean-linkage  -mno-code-align -mno-
	   complex-addr	 -mno-leaf-procedures -mno-old-align
	   -mno-strict-align  -mno-tail-call -mnumerics	 -mold-
	   align  -msoft-float	-mstrict-align -mtail-call

	   DEC Alpha Options -mno-fp-regs  -msoft-float	 -malpha-
	   as  -mgas -mieee  -mieee-with-inexact  -mieee-confor-
	   mant -mfp-trap-mode=mode  -mfp-rounding-mode=mode
	   -mtrap-precision=mode  -mbuild-constants -mcpu=cpu-
	   type	 -mtune=cpu-type -mbwx	-mmax  -mfix  -mcix
	   -mfloat-vax	-mfloat-ieee -mexplicit-relocs	-msmall-
	   data	 -mlarge-data -mmemory-latency=time

	   DEC Alpha/VMS Options -mvms-return-codes

	   H8/300 Options -mrelax  -mh	-ms  -mn  -mint32
	   -malign-300

	   SH Options -m1  -m2	-m3  -m3e -m4-nofpu  -m4-single-
	   only	 -m4-single  -m4 -m5-64media  -m5-64media-nofpu
	   -m5-32media	-m5-32media-nofpu -m5-compact  -m5-com-
	   pact-nofpu -mb  -ml	-mdalign  -mrelax -mbigtable
	   -mfmovd  -mhitachi  -mnomacsave -mieee  -misize
	   -mpadstruct	-mspace -mprefergot  -musermode

	   System V Options -Qy	 -Qn  -YP,paths	 -Ym,dir

	   ARC Options -EB  -EL -mmangle-cpu  -mcpu=cpu
	   -mtext=text-section -mdata=data-section  -mro-
	   data=readonly-data-section

	   TMS320C3x/C4x Options -mcpu=cpu  -mbig  -msmall
	   -mregparm  -mmemparm -mfast-fix  -mmpyi  -mbk  -mti
	   -mdp-isr-reload -mrpts=count	 -mrptb	 -mdb  -mloop-
	   unsigned -mparallel-insns  -mparallel-mpy  -mpreserve-
	   float

	   V850 Options -mlong-calls  -mno-long-calls  -mep
	   -mno-ep -mprolog-function  -mno-prolog-function
	   -mspace -mtda=n  -msda=n  -mzda=n -mapp-regs	 -mno-
	   app-regs -mdisable-callt  -mno-disable-callt -mv850e
	   -mv850  -mbig-switch

	   NS32K Options -m32032  -m32332  -m32532  -m32081
	   -m32381 -mmult-add  -mnomult-add  -msoft-float  -mrtd
	   -mnortd -mregparam  -mnoregparam  -msb  -mnosb -mbit-
	   field  -mnobitfield	-mhimem	 -mnohimem

	   AVR Options -mmcu=mcu  -msize  -minit-stack=n  -mno-
	   interrupts -mcall-prologues	-mno-tablejump	-mtiny-
	   stack

	   MCore Options -mhardlit  -mno-hardlit  -mdiv	 -mno-div
	   -mrelax-immediates -mno-relax-immediates  -mwide-bit-
	   fields  -mno-wide-bitfields -m4byte-functions
	   -mno-4byte-functions	 -mcallgraph-data -mno-callgraph-
	   data	 -mslow-bytes  -mno-slow-bytes	-mno-lsim -mlit-
	   tle-endian  -mbig-endian  -m210  -m340  -mstack-incre-
	   ment

	   MMIX Options -mlibfuncs  -mno-libfuncs  -mepsilon
	   -mno-epsilon	 -mabi=gnu -mabi=mmixware  -mzero-extend
	   -mknuthdiv  -mtoplevel-symbols -melf	 -mbranch-predict
	   -mno-branch-predict	-mbase-addresses -mno-base-
	   addresses  -msingle-exit  -mno-single-exit

	   IA-64 Options -mbig-endian  -mlittle-endian	-mgnu-as
	   -mgnu-ld  -mno-pic -mvolatile-asm-stop  -mb-step
	   -mregister-names  -mno-sdata -mconstant-gp  -mauto-pic
	   -minline-float-divide-min-latency -minline-float-
	   divide-max-throughput -minline-int-divide-min-latency
	   -minline-int-divide-max-throughput  -mno-dwarf2-asm
	   -mfixed-range=register-range

	   D30V Options -mextmem  -mextmemory  -monchip	 -mno-
	   asm-optimize -masm-optimize	-mbranch-cost=n	 -mcond-
	   exec=n

	   S/390 and zSeries Options -mhard-float  -msoft-float
	   -mbackchain	-mno-backchain -msmall-exec  -mno-small-
	   exec	 -mmvcle  -mno-mvcle -m64  -m31	 -mdebug  -mno-
	   debug

	   CRIS Options -mcpu=cpu  -march=cpu  -mtune=cpu -mmax-
	   stack-frame=n  -melinux-stacksize=n -metrax4
	   -metrax100  -mpdebug	 -mcc-init  -mno-side-effects
	   -mstack-align  -mdata-align	-mconst-align -m32-bit
	   -m16-bit  -m8-bit  -mno-prologue-epilogue  -mno-gotplt
	   -melf  -maout  -melinux  -mlinux  -sim  -sim2 -mmul-
	   bug-workaround  -mno-mul-bug-workaround

	   PDP-11 Options -mfpu	 -msoft-float  -mac0  -mno-ac0
	   -m40	 -m45  -m10 -mbcopy  -mbcopy-builtin  -mint32
	   -mno-int16 -mint16  -mno-int32  -mfloat32  -mno-
	   float64 -mfloat64  -mno-float32  -mabshi  -mno-abshi
	   -mbranch-expensive  -mbranch-cheap -msplit  -mno-split
	   -munix-asm  -mdec-asm

	   Xstormy16 Options -msim

	   Xtensa Options -mbig-endian	-mlittle-endian -mdensity
	   -mno-density -mmac16	 -mno-mac16 -mmul16  -mno-mul16
	   -mmul32  -mno-mul32 -mnsa  -mno-nsa -mminmax	 -mno-
	   minmax -msext  -mno-sext -mbooleans	-mno-booleans
	   -mhard-float	 -msoft-float -mfused-madd  -mno-fused-
	   madd -mserialize-volatile  -mno-serialize-volatile
	   -mtext-section-literals  -mno-text-section-literals
	   -mtarget-align  -mno-target-align -mlongcalls  -mno-
	   longcalls

	   FRV Options -mgpr-32	 -mgpr-64  -mfpr-32  -mfpr-64
	   -mhard-float	 -msoft-float  -malloc-cc  -mfixed-cc
	   -mdword  -mno-dword	-mdouble  -mno-double -mmedia
	   -mno-media  -mmuladd	 -mno-muladd  -mlibrary-pic
	   -macc-4  -macc-8  -mpack  -mno-pack	-mno-eflags
	   -mcond-move	-mno-cond-move -mscc  -mno-scc -mcond-
	   exec	 -mno-cond-exec	 -mvliw-branch	-mno-vliw-branch
	   -mmulti-cond-exec  -mno-multi-cond-exec  -mnested-
	   cond-exec -mno-nested-cond-exec  -mtomcat-stats
	   -mcpu=cpu

       Code Generation Options
	   -fcall-saved-reg  -fcall-used-reg -ffixed-reg  -fex-
	   ceptions -fnon-call-exceptions  -funwind-tables
	   -fasynchronous-unwind-tables -finhibit-size-directive
	   -finstrument-functions -fno-common  -fno-ident  -fno-
	   gnu-linker -fpcc-struct-return  -fpic  -fPIC -freg-
	   struct-return  -fshared-data	 -fshort-enums -fshort-
	   double  -fshort-wchar  -fvolatile -fvolatile-global
	   -fvolatile-static -fverbose-asm  -fpack-struct
	   -fstack-check -fstack-limit-register=reg  -fstack-
	   limit-symbol=sym -fargument-alias  -fargument-noalias
	   -fargument-noalias-global  -fleading-underscore -ftls-
	   model=model -ftrapv	-fbounds-check

       Options Controlling the Kind of Output

       Compilation can involve up to four stages: preprocessing,
       compilation proper, assembly and linking, always in that
       order.  The first three stages apply to an individual
       source file, and end by producing an object file; linking
       combines all the object files (those newly compiled, and
       those specified as input) into an executable file.

       For any given input file, the file name suffix determines
       what kind of compilation is done:

       file.c
	   C source code which must be preprocessed.

       file.i
	   C source code which should not be preprocessed.

       file.ii
	   C++ source code which should not be preprocessed.

       file.m
	   Objective-C source code.  Note that you must link with
	   the library libobjc.a to make an Objective-C program
	   work.

       file.mi
	   Objective-C source code which should not be prepro-
	   cessed.

       file.h
	   C header file (not to be compiled or linked).

       file.cc
       file.cp
       file.cxx
       file.cpp
       file.c++
       file.C
	   C++ source code which must be preprocessed.	Note that
	   in .cxx, the last two letters must both be literally
	   x.  Likewise, .C refers to a literal capital C.

       file.f

       file.for
       file.FOR
	   Fortran source code which should not be preprocessed.

       file.F
       file.fpp
       file.FPP
	   Fortran source code which must be preprocessed (with
	   the traditional preprocessor).

       file.r
	   Fortran source code which must be preprocessed with a
	   RATFOR preprocessor (not included with GCC).

       file.ads
	   Ada source code file which contains a library unit
	   declaration (a declaration of a package, subprogram,
	   or generic, or a generic instantiation), or a library
	   unit renaming declaration (a package, generic, or sub-
	   program renaming declaration).  Such files are also
	   called specs.

       file.adb
	   Ada source code file containing a library unit body (a
	   subprogram or package body).	 Such files are also
	   called bodies.

       file.s
	   Assembler code.

       file.S
	   Assembler code which must be preprocessed.

       other
	   An object file to be fed straight into linking.  Any
	   file name with no recognized suffix is treated this
	   way.

       You can specify the input language explicitly with the -x
       option:

       -x language
	   Specify explicitly the language for the following
	   input files (rather than letting the compiler choose a
	   default based on the file name suffix).  This option
	   applies to all following input files until the next -x
	   option.  Possible values for language are:

		   c  c-header	cpp-output
		   c++	c++-cpp-output
		   objective-c	objc-cpp-output
		   assembler  assembler-with-cpp
		   ada
		   f77	f77-cpp-input  ratfor
		   java
		   treelang


       -x none
	   Turn off any specification of a language, so that sub-
	   sequent files are handled according to their file name
	   suffixes (as they are if -x has not been used at all).

       -pass-exit-codes
	   Normally the gcc program will exit with the code of 1
	   if any phase of the compiler returns a non-success
	   return code.	 If you specify -pass-exit-codes, the gcc
	   program will instead return with numerically highest
	   error produced by any phase that returned an error
	   indication.

       If you only want some of the stages of compilation, you
       can use -x (or filename suffixes) to tell gcc where to
       start, and one of the options -c, -S, or -E to say where
       gcc is to stop.	Note that some combinations (for example,
       -x cpp-output -E) instruct gcc to do nothing at all.

       -c  Compile or assemble the source files, but do not link.
	   The linking stage simply is not done.  The ultimate
	   output is in the form of an object file for each
	   source file.

	   By default, the object file name for a source file is
	   made by replacing the suffix .c, .i, .s, etc., with
	   .o.

	   Unrecognized input files, not requiring compilation or
	   assembly, are ignored.

       -S  Stop after the stage of compilation proper; do not
	   assemble.  The output is in the form of an assembler
	   code file for each non-assembler input file specified.

	   By default, the assembler file name for a source file
	   is made by replacing the suffix .c, .i, etc., with .s.

	   Input files that don't require compilation are
	   ignored.

       -E  Stop after the preprocessing stage; do not run the
	   compiler proper.  The output is in the form of prepro-
	   cessed source code, which is sent to the standard out-
	   put.

	   Input files which don't require preprocessing are
	   ignored.

       -o file
	   Place output in file file.  This applies regardless to
	   whatever sort of output is being produced, whether it
	   be an executable file, an object file, an assembler
	   file or preprocessed C code.

	   Since only one output file can be specified, it does
	   not make sense to use -o when compiling more than one
	   input file, unless you are producing an executable
	   file as output.

	   If -o is not specified, the default is to put an exe-
	   cutable file in a.out, the object file for source.suf-
	   fix in source.o, its assembler file in source.s, and
	   all preprocessed C source on standard output.

       -v  Print (on standard error output) the commands executed
	   to run the stages of compilation.  Also print the ver-
	   sion number of the compiler driver program and of the
	   preprocessor and the compiler proper.

       -###
	   Like -v except the commands are not executed and all
	   command arguments are quoted.  This is useful for
	   shell scripts to capture the driver-generated command
	   lines.

       -pipe
	   Use pipes rather than temporary files for communica-
	   tion between the various stages of compilation.  This
	   fails to work on some systems where the assembler is
	   unable to read from a pipe; but the GNU assembler has
	   no trouble.

       --help
	   Print (on the standard output) a description of the
	   command line options understood by gcc.  If the -v
	   option is also specified then --help will also be
	   passed on to the various processes invoked by gcc, so
	   that they can display the command line options they
	   accept.  If the -W option is also specified then com-
	   mand line options which have no documentation associ-
	   ated with them will also be displayed.

       --target-help
	   Print (on the standard output) a description of target
	   specific command line options for each tool.

       --version
	   Display the version number and copyrights of the
	   invoked GCC.

       Compiling C++ Programs

       C++ source files conventionally use one of the suffixes
       .C, .cc, .cpp, .c++, .cp, or .cxx; preprocessed C++ files
       use the suffix .ii.  GCC recognizes files with these names
       and compiles them as C++ programs even if you call the
       compiler the same way as for compiling C programs (usually
       with the name gcc).

       However, C++ programs often require class libraries as
       well as a compiler that understands the C++ language---and
       under some circumstances, you might want to compile pro-
       grams from standard input, or otherwise without a suffix
       that flags them as C++ programs.	 g++ is a program that
       calls GCC with the default language set to C++, and auto-
       matically specifies linking against the C++ library.  On
       many systems, g++ is also installed with the name c++.

       When you compile C++ programs, you may specify many of the
       same command-line options that you use for compiling pro-
       grams in any language; or command-line options meaningful
       for C and related languages; or options that are meaning-
       ful only for C++ programs.

       Options Controlling C Dialect

       The following options control the dialect of C (or lan-
       guages derived from C, such as C++ and Objective-C) that
       the compiler accepts:

       -ansi
	   In C mode, support all ISO C90 programs.  In C++ mode,
	   remove GNU extensions that conflict with ISO C++.

	   This turns off certain features of GCC that are incom-
	   patible with ISO C90 (when compiling C code), or of
	   standard C++ (when compiling C++ code), such as the
	   "asm" and "typeof" keywords, and predefined macros
	   such as "unix" and "vax" that identify the type of
	   system you are using.  It also enables the undesirable
	   and rarely used ISO trigraph feature.  For the C com-
	   piler, it disables recognition of C++ style // com-
	   ments as well as the "inline" keyword.

	   The alternate keywords "__asm__", "__extension__",
	   "__inline__" and "__typeof__" continue to work despite
	   -ansi.  You would not want to use them in an ISO C
	   program, of course, but it is useful to put them in
	   header files that might be included in compilations
	   done with -ansi.  Alternate predefined macros such as
	   "__unix__" and "__vax__" are also available, with or
	   without -ansi.

	   The -ansi option does not cause non-ISO programs to be
	   rejected gratuitously.  For that, -pedantic is
	   required in addition to -ansi.

	   The macro "__STRICT_ANSI__" is predefined when the
	   -ansi option is used.  Some header files may notice
	   this macro and refrain from declaring certain func-
	   tions or defining certain macros that the ISO standard
	   doesn't call for; this is to avoid interfering with
	   any programs that might use these names for other
	   things.

	   Functions which would normally be built in but do not
	   have semantics defined by ISO C (such as "alloca" and
	   "ffs") are not built-in functions with -ansi is used.

       -std=
	   Determine the language standard.  This option is cur-
	   rently only supported when compiling C or C++.  A
	   value for this option must be provided; possible val-
	   ues are

	   c89
	   iso9899:1990
	       ISO C90 (same as -ansi).

	   iso9899:199409
	       ISO C90 as modified in amendment 1.

	   c99
	   c9x
	   iso9899:1999
	   iso9899:199x
	       ISO C99.	 Note that this standard is not yet fully
	       supported; see <http://gcc.gnu.org/gcc-3.3/c99sta-
	       tus.html> for more information.	The names c9x and
	       iso9899:199x are deprecated.

	   gnu89
	       Default, ISO C90 plus GNU extensions (including
	       some C99 features).

	   gnu99
	   gnu9x
	       ISO C99 plus GNU extensions.  When ISO C99 is
	       fully implemented in GCC, this will become the
	       default.	 The name gnu9x is deprecated.

	   c++98
	       The 1998 ISO C++ standard plus amendments.



	   gnu++98
	       The same as -std=c++98 plus GNU extensions.  This
	       is the default for C++ code.

	   Even when this option is not specified, you can still
	   use some of the features of newer standards in so far
	   as they do not conflict with previous C standards.
	   For example, you may use "__restrict__" even when
	   -std=c99 is not specified.

	   The -std options specifying some version of ISO C have
	   the same effects as -ansi, except that features that
	   were not in ISO C90 but are in the specified version
	   (for example, // comments and the "inline" keyword in
	   ISO C99) are not disabled.

       -aux-info filename
	   Output to the given filename prototyped declarations
	   for all functions declared and/or defined in a trans-
	   lation unit, including those in header files.  This
	   option is silently ignored in any language other than
	   C.

	   Besides declarations, the file indicates, in comments,
	   the origin of each declaration (source file and line),
	   whether the declaration was implicit, prototyped or
	   unprototyped (I, N for new or O for old, respectively,
	   in the first character after the line number and the
	   colon), and whether it came from a declaration or a
	   definition (C or F, respectively, in the following
	   character).	In the case of function definitions, a
	   K&R-style list of arguments followed by their declara-
	   tions is also provided, inside comments, after the
	   declaration.

       -fno-asm
	   Do not recognize "asm", "inline" or "typeof" as a key-
	   word, so that code can use these words as identifiers.
	   You can use the keywords "__asm__", "__inline__" and
	   "__typeof__" instead.  -ansi implies -fno-asm.

	   In C++, this switch only affects the "typeof" keyword,
	   since "asm" and "inline" are standard keywords.  You
	   may want to use the -fno-gnu-keywords flag instead,
	   which has the same effect.  In C99 mode (-std=c99 or
	   -std=gnu99), this switch only affects the "asm" and
	   "typeof" keywords, since "inline" is a standard key-
	   word in ISO C99.

       -fno-builtin
       -fno-builtin-function
	   Don't recognize built-in functions that do not begin
	   with __builtin_ as prefix.

	   GCC normally generates special code to handle certain
	   built-in functions more efficiently; for instance,
	   calls to "alloca" may become single instructions that
	   adjust the stack directly, and calls to "memcpy" may
	   become inline copy loops.  The resulting code is often
	   both smaller and faster, but since the function calls
	   no longer appear as such, you cannot set a breakpoint
	   on those calls, nor can you change the behavior of the
	   functions by linking with a different library.

	   With the -fno-builtin-function option only the built-
	   in function function is disabled.  function must not
	   begin with __builtin_.  If a function is named this is
	   not built-in in this version of GCC, this option is
	   ignored.  There is no corresponding -fbuiltin-function
	   option; if you wish to enable built-in functions
	   selectively when using -fno-builtin or -ffreestanding,
	   you may define macros such as:

		   #define abs(n)	   __builtin_abs ((n))
		   #define strcpy(d, s)	   __builtin_strcpy ((d), (s))


       -fhosted
	   Assert that compilation takes place in a hosted envi-
	   ronment.  This implies -fbuiltin.  A hosted environ-
	   ment is one in which the entire standard library is
	   available, and in which "main" has a return type of
	   "int".  Examples are nearly everything except a ker-
	   nel.	 This is equivalent to -fno-freestanding.

       -ffreestanding
	   Assert that compilation takes place in a freestanding
	   environment.	 This implies -fno-builtin.  A freestand-
	   ing environment is one in which the standard library
	   may not exist, and program startup may not necessarily
	   be at "main".  The most obvious example is an OS ker-
	   nel.	 This is equivalent to -fno-hosted.

       -fms-extensions
	   Accept some non-standard constructs used in Microsoft
	   header files.

       -trigraphs
	   Support ISO C trigraphs.  The -ansi option (and -std
	   options for strict ISO C conformance) implies -tri-
	   graphs.

       -no-integrated-cpp
	   Performs a compilation in two passes: preprocessing
	   and compiling.  This option allows a user supplied
	   "cc1", "cc1plus", or "cc1obj" via the -B option. The
	   user supplied compilation step can then add in an
	   additional preprocessing step after normal preprocess-
	   ing but before compiling. The default is to use the
	   integrated cpp (internal cpp)

	   The semantics of this option will change if "cc1",
	   "cc1plus", and "cc1obj" are merged.

       -traditional
       -traditional-cpp
	   Formerly, these options caused GCC to attempt to emu-
	   late a pre-standard C compiler.  They are now only
	   supported with the -E switch.  The preprocessor con-
	   tinues to support a pre-standard mode.  See the GNU
	   CPP manual for details.

       -fcond-mismatch
	   Allow conditional expressions with mismatched types in
	   the second and third arguments.  The value of such an
	   expression is void.	This option is not supported for
	   C++.

       -funsigned-char
	   Let the type "char" be unsigned, like "unsigned char".

	   Each kind of machine has a default for what "char"
	   should be.  It is either like "unsigned char" by
	   default or like "signed char" by default.

	   Ideally, a portable program should always use "signed
	   char" or "unsigned char" when it depends on the
	   signedness of an object.  But many programs have been
	   written to use plain "char" and expect it to be
	   signed, or expect it to be unsigned, depending on the
	   machines they were written for.  This option, and its
	   inverse, let you make such a program work with the
	   opposite default.

	   The type "char" is always a distinct type from each of
	   "signed char" or "unsigned char", even though its
	   behavior is always just like one of those two.

       -fsigned-char
	   Let the type "char" be signed, like "signed char".

	   Note that this is equivalent to -fno-unsigned-char,
	   which is the negative form of -funsigned-char.  Like-
	   wise, the option -fno-signed-char is equivalent to
	   -funsigned-char.

       -fsigned-bitfields
       -funsigned-bitfields
       -fno-signed-bitfields
       -fno-unsigned-bitfields
	   These options control whether a bit-field is signed or
	   unsigned, when the declaration does not use either
	   "signed" or "unsigned".  By default, such a bit-field
	   is signed, because this is consistent: the basic inte-
	   ger types such as "int" are signed types.

       -fwritable-strings
	   Store string constants in the writable data segment
	   and don't uniquize them.  This is for compatibility
	   with old programs which assume they can write into
	   string constants.

	   Writing into string constants is a very bad idea;
	   ``constants'' should be constant.

       Options Controlling C++ Dialect

       This section describes the command-line options that are
       only meaningful for C++ programs; but you can also use
       most of the GNU compiler options regardless of what lan-
       guage your program is in.  For example, you might compile
       a file "firstClass.C" like this:

	       g++ -g -frepo -O -c firstClass.C

       In this example, only -frepo is an option meant only for
       C++ programs; you can use the other options with any lan-
       guage supported by GCC.

       Here is a list of options that are only for compiling C++
       programs:

       -fabi-version=n
	   Use version n of the C++ ABI.  Version 1 is the ver-
	   sion of the C++ ABI that first appeared in G++ 3.2.
	   Version 0 will always be the version that conforms
	   most closely to the C++ ABI specification.  Therefore,
	   the ABI obtained using version 0 will change as ABI
	   bugs are fixed.

	   The default is version 1.

       -fno-access-control
	   Turn off all access checking.  This switch is mainly
	   useful for working around bugs in the access control
	   code.

       -fcheck-new
	   Check that the pointer returned by "operator new" is
	   non-null before attempting to modify the storage allo-
	   cated.  This check is normally unnecessary because the
	   C++ standard specifies that "operator new" will only
	   return "0" if it is declared throw(), in which case
	   the compiler will always check the return value even
	   without this option.	 In all other cases, when "opera-
	   tor new" has a non-empty exception specification, mem-
	   ory exhaustion is signalled by throwing
	   "std::bad_alloc".  See also new (nothrow).

       -fconserve-space
	   Put uninitialized or runtime-initialized global vari-
	   ables into the common segment, as C does.  This saves
	   space in the executable at the cost of not diagnosing
	   duplicate definitions.  If you compile with this flag
	   and your program mysteriously crashes after "main()"
	   has completed, you may have an object that is being
	   destroyed twice because two definitions were merged.

	   This option is no longer useful on most targets, now
	   that support has been added for putting variables into
	   BSS without making them common.

       -fno-const-strings
	   Give string constants type "char *" instead of type
	   "const char *".  By default, G++ uses type "const char
	   *" as required by the standard.  Even if you use -fno-
	   const-strings, you cannot actually modify the value of
	   a string constant, unless you also use -fwritable-
	   strings.

	   This option might be removed in a future release of
	   G++.	 For maximum portability, you should structure
	   your code so that it works with string constants that
	   have type "const char *".

       -fdollars-in-identifiers
	   Accept $ in identifiers.  You can also explicitly pro-
	   hibit use of $ with the option -fno-dollars-in-identi-
	   fiers.  (GNU C allows $ by default on most target sys-
	   tems, but there are a few exceptions.)  Traditional C
	   allowed the character $ to form part of identifiers.
	   However, ISO C and C++ forbid $ in identifiers.

       -fno-elide-constructors
	   The C++ standard allows an implementation to omit cre-
	   ating a temporary which is only used to initialize
	   another object of the same type.  Specifying this
	   option disables that optimization, and forces G++ to
	   call the copy constructor in all cases.

       -fno-enforce-eh-specs
	   Don't check for violation of exception specifications
	   at runtime.	This option violates the C++ standard,
	   but may be useful for reducing code size in production
	   builds, much like defining NDEBUG.  The compiler will
	   still optimize based on the exception specifications.

       -fexternal-templates
	   Cause #pragma interface and implementation to apply to
	   template instantiation; template instances are emitted
	   or not according to the location of the template defi-
	   nition.

	   This option is deprecated.

       -falt-external-templates
	   Similar to -fexternal-templates, but template
	   instances are emitted or not according to the place
	   where they are first instantiated.

	   This option is deprecated.

       -ffor-scope
       -fno-for-scope
	   If -ffor-scope is specified, the scope of variables
	   declared in a for-init-statement is limited to the for
	   loop itself, as specified by the C++ standard.  If
	   -fno-for-scope is specified, the scope of variables
	   declared in a for-init-statement extends to the end of
	   the enclosing scope, as was the case in old versions
	   of G++, and other (traditional) implementations of
	   C++.

	   The default if neither flag is given to follow the
	   standard, but to allow and give a warning for old-
	   style code that would otherwise be invalid, or have
	   different behavior.

       -fno-gnu-keywords
	   Do not recognize "typeof" as a keyword, so that code
	   can use this word as an identifier.	You can use the
	   keyword "__typeof__" instead.  -ansi implies -fno-gnu-
	   keywords.

       -fno-implicit-templates
	   Never emit code for non-inline templates which are
	   instantiated implicitly (i.e. by use); only emit code
	   for explicit instantiations.

       -fno-implicit-inline-templates
	   Don't emit code for implicit instantiations of inline
	   templates, either.  The default is to handle inlines
	   differently so that compiles with and without opti-
	   mization will need the same set of explicit instantia-
	   tions.

       -fno-implement-inlines
	   To save space, do not emit out-of-line copies of
	   inline functions controlled by #pragma implementation.
	   This will cause linker errors if these functions are
	   not inlined everywhere they are called.

       -fms-extensions
	   Disable pedantic warnings about constructs used in
	   MFC, such as implicit int and getting a pointer to
	   member function via non-standard syntax.

       -fno-nonansi-builtins
	   Disable built-in declarations of functions that are
	   not mandated by ANSI/ISO C.	These include "ffs",
	   "alloca", "_exit", "index", "bzero", "conjf", and
	   other related functions.

       -fno-operator-names
	   Do not treat the operator name keywords "and",
	   "bitand", "bitor", "compl", "not", "or" and "xor" as
	   synonyms as keywords.

       -fno-optional-diags
	   Disable diagnostics that the standard says a compiler
	   does not need to issue.  Currently, the only such
	   diagnostic issued by G++ is the one for a name having
	   multiple meanings within a class.

       -fpermissive
	   Downgrade some diagnostics about nonconformant code
	   from errors to warnings.  Thus, using -fpermissive
	   will allow some nonconforming code to compile.

       -frepo
	   Enable automatic template instantiation at link time.
	   This option also implies -fno-implicit-templates.

       -fno-rtti
	   Disable generation of information about every class
	   with virtual functions for use by the C++ runtime type
	   identification features (dynamic_cast and typeid).  If
	   you don't use those parts of the language, you can
	   save some space by using this flag.	Note that excep-
	   tion handling uses the same information, but it will
	   generate it as needed.

       -fstats
	   Emit statistics about front-end processing at the end
	   of the compilation.	This information is generally
	   only useful to the G++ development team.

       -ftemplate-depth-n
	   Set the maximum instantiation depth for template
	   classes to n.  A limit on the template instantiation
	   depth is needed to detect endless recursions during
	   template class instantiation.  ANSI/ISO C++ conforming
	   programs must not rely on a maximum depth greater than
	   17.

       -fuse-cxa-atexit
	   Register destructors for objects with static storage
	   duration with the "__cxa_atexit" function rather than
	   the "atexit" function.  This option is required for
	   fully standards-compliant handling of static destruc-
	   tors, but will only work if your C library supports
	   "__cxa_atexit".

       -fvtable-gc
	   Emit special relocations for vtables and virtual func-
	   tion references so that the linker can identify unused
	   virtual functions and zero out vtable slots that refer
	   to them.  This is most useful with -ffunction-sections
	   and -Wl,--gc-sections, in order to also discard the
	   functions themselves.

	   This optimization requires GNU as and GNU ld.  Not all
	   systems support this option.	 -Wl,--gc-sections is
	   ignored without -static.


       -fno-weak
	   Do not use weak symbol support, even if it is provided
	   by the linker.  By default, G++ will use weak symbols
	   if they are available.  This option exists only for
	   testing, and should not be used by end-users; it will
	   result in inferior code and has no benefits.	 This
	   option may be removed in a future release of G++.

       -nostdinc++
	   Do not search for header files in the standard direc-
	   tories specific to C++, but do still search the other
	   standard directories.  (This option is used when
	   building the C++ library.)

       In addition, these optimization, warning, and code genera-
       tion options have meanings only for C++ programs:

       -fno-default-inline
	   Do not assume inline for functions defined inside a
	   class scope.
	     Note that these functions will have linkage like
	   inline functions; they just won't be inlined by
	   default.

       -Wabi (C++ only)
	   Warn when G++ generates code that is probably not com-
	   patible with the vendor-neutral C++ ABI.  Although an
	   effort has been made to warn about all such cases,
	   there are probably some cases that are not warned
	   about, even though G++ is generating incompatible
	   code.  There may also be cases where warnings are
	   emitted even though the code that is generated will be
	   compatible.

	   You should rewrite your code to avoid these warnings
	   if you are concerned about the fact that code gener-
	   ated by G++ may not be binary compatible with code
	   generated by other compilers.

	   The known incompatibilities at this point include:

	   o   Incorrect handling of tail-padding for bit-fields.
	       G++ may attempt to pack data into the same byte as
	       a base class.  For example:

		       struct A { virtual void f(); int f1 : 1; };
		       struct B : public A { int f2 : 1; };

	       In this case, G++ will place "B::f2" into the same
	       byte as"A::f1"; other compilers will not.  You can
	       avoid this problem by explicitly padding "A" so
	       that its size is a multiple of the byte size on
	       your platform; that will cause G++ and other com-
	       pilers to layout "B" identically.

	   o   Incorrect handling of tail-padding for virtual
	       bases.  G++ does not use tail padding when laying
	       out virtual bases.  For example:

		       struct A { virtual void f(); char c1; };
		       struct B { B(); char c2; };
		       struct C : public A, public virtual B {};

	       In this case, G++ will not place "B" into the
	       tail-padding for "A"; other compilers will.  You
	       can avoid this problem by explicitly padding "A"
	       so that its size is a multiple of its alignment
	       (ignoring virtual base classes); that will cause
	       G++ and other compilers to layout "C" identically.

	   o   Incorrect handling of bit-fields with declared
	       widths greater than that of their underlying
	       types, when the bit-fields appear in a union.  For
	       example:

		       union U { int i : 4096; };

	       Assuming that an "int" does not have 4096 bits,
	       G++ will make the union too small by the number of
	       bits in an "int".

	   o   Empty classes can be placed at incorrect offsets.
	       For example:

		       struct A {};

		       struct B {
			 A a;
			 virtual void f ();
		       };

		       struct C : public B, public A {};

	       G++ will place the "A" base class of "C" at a
	       nonzero offset; it should be placed at offset
	       zero.  G++ mistakenly believes that the "A" data
	       member of "B" is already at offset zero.

	   o   Names of template functions whose types involve
	       "typename" or template template parameters can be
	       mangled incorrectly.

		       template <typename Q>
		       void f(typename Q::X) {}

		       template <template <typename> class Q>
		       void f(typename Q<int>::X) {}

	       Instantiations of these templates may be mangled
	       incorrectly.

       -Wctor-dtor-privacy (C++ only)
	   Warn when a class seems unusable because all the con-
	   structors or destructors in that class are private,
	   and it has neither friends nor public static member
	   functions.  This warning is enabled by default.

       -Wnon-virtual-dtor (C++ only)
	   Warn when a class appears to be polymorphic, thereby
	   requiring a virtual destructor, yet it declares a non-
	   virtual one.	 This warning is enabled by -Wall.

       -Wreorder (C++ only)
	   Warn when the order of member initializers given in
	   the code does not match the order in which they must
	   be executed.	 For instance:





		   struct A {
		     int i;
		     int j;
		     A(): j (0), i (1) { }
		   };

	   The compiler will rearrange the member initializers
	   for i and j to match the declaration order of the mem-
	   bers, emitting a warning to that effect.  This warning
	   is enabled by -Wall.

       The following -W... options are not affected by -Wall.

       -Weffc++ (C++ only)
	   Warn about violations of the following style guide-
	   lines from Scott Meyers' Effective C++ book:

	   o   Item 11:	 Define a copy constructor and an assign-
	       ment operator for classes with dynamically allo-
	       cated memory.

	   o   Item 12:	 Prefer initialization to assignment in
	       constructors.

	   o   Item 14:	 Make destructors virtual in base
	       classes.

	   o   Item 15:	 Have "operator=" return a reference to
	       "*this".

	   o   Item 23:	 Don't try to return a reference when you
	       must return an object.

	   Also warn about violations of the following style
	   guidelines from Scott Meyers' More Effective C++ book:

	   o   Item 6:	Distinguish between prefix and postfix
	       forms of increment and decrement operators.

	   o   Item 7:	Never overload "&&", "||", or ",".

	   When selecting this option, be aware that the standard
	   library headers do not obey all of these guidelines;
	   use grep -v to filter out those warnings.

       -Wno-deprecated (C++ only)
	   Do not warn about usage of deprecated features.

       -Wno-non-template-friend (C++ only)
	   Disable warnings when non-templatized friend functions
	   are declared within a template.  Since the advent of
	   explicit template specification support in G++, if the
	   name of the friend is an unqualified-id (i.e., friend
	   foo(int)), the C++ language specification demands that
	   the friend declare or define an ordinary, nontemplate
	   function.  (Section 14.5.3).	 Before G++ implemented
	   explicit specification, unqualified-ids could be
	   interpreted as a particular specialization of a tem-
	   platized function.  Because this non-conforming behav-
	   ior is no longer the default behavior for G++, -Wnon-
	   template-friend allows the compiler to check existing
	   code for potential trouble spots and is on by default.
	   This new compiler behavior can be turned off with
	   -Wno-non-template-friend which keeps the conformant
	   compiler code but disables the helpful warning.


       -Wold-style-cast (C++ only)
	   Warn if an old-style (C-style) cast to a non-void type
	   is used within a C++ program.  The new-style casts
	   (static_cast, reinterpret_cast, and const_cast) are
	   less vulnerable to unintended effects and much easier
	   to search for.

       -Woverloaded-virtual (C++ only)
	   Warn when a function declaration hides virtual func-
	   tions from a base class.  For example, in:

		   struct A {
		     virtual void f();
		   };

		   struct B: public A {
		     void f(int);
		   };

	   the "A" class version of "f" is hidden in "B", and
	   code like:

		   B* b;
		   b->f();

	   will fail to compile.

       -Wno-pmf-conversions (C++ only)
	   Disable the diagnostic for converting a bound pointer
	   to member function to a plain pointer.

       -Wsign-promo (C++ only)
	   Warn when overload resolution chooses a promotion from
	   unsigned or enumeral type to a signed type, over a
	   conversion to an unsigned type of the same size.  Pre-
	   vious versions of G++ would try to preserve unsigned-
	   ness, but the standard mandates the current behavior.

       -Wsynth (C++ only)
	   Warn when G++'s synthesis behavior does not match that
	   of cfront.  For instance:

		   struct A {
		     operator int ();
		     A& operator = (int);
		   };

		   main ()
		   {
		     A a,b;
		     a = b;
		   }

	   In this example, G++ will synthesize a default A&
	   operator = (const A&);, while cfront will use the
	   user-defined operator =.

       Options Controlling Objective-C Dialect

       This section describes the command-line options that are
       only meaningful for Objective-C programs, but you can also
       use most of the GNU compiler options regardless of what
       language your program is in.  For example, you might com-
       pile a file "some_class.m" like this:

	       gcc -g -fgnu-runtime -O -c some_class.m

       In this example, -fgnu-runtime is an option meant only for
       Objective-C programs; you can use the other options with
       any language supported by GCC.

       Here is a list of options that are only for compiling
       Objective-C programs:

       -fconstant-string-class=class-name
	   Use class-name as the name of the class to instantiate
	   for each literal string specified with the syntax
	   "@"..."".  The default class name is "NXCon-
	   stantString".

       -fgnu-runtime
	   Generate object code compatible with the standard GNU
	   Objective-C runtime.	 This is the default for most
	   types of systems.

       -fnext-runtime
	   Generate output compatible with the NeXT runtime.
	   This is the default for NeXT-based systems, including
	   Darwin and Mac OS X.	 The macro "__NEXT_RUNTIME__" is
	   predefined if (and only if) this option is used.

       -gen-decls
	   Dump interface declarations for all classes seen in
	   the source file to a file named sourcename.decl.

       -Wno-protocol
	   If a class is declared to implement a protocol, a
	   warning is issued for every method in the protocol
	   that is not implemented by the class.  The default
	   behavior is to issue a warning for every method not
	   explicitly implemented in the class, even if a method
	   implementation is inherited from the superclass.  If
	   you use the "-Wno-protocol" option, then methods
	   inherited from the superclass are considered to be
	   implemented, and no warning is issued for them.

       -Wselector
	   Warn if multiple methods of different types for the
	   same selector are found during compilation.	The check
	   is performed on the list of methods in the final stage
	   of compilation.  Additionally, a check is performed
	   for each selector appearing in a "@selector(...)"
	   expression, and a corresponding method for that selec-
	   tor has been found during compilation.  Because these
	   checks scan the method table only at the end of compi-
	   lation, these warnings are not produced if the final
	   stage of compilation is not reached, for example
	   because an error is found during compilation, or
	   because the "-fsyntax-only" option is being used.

       -Wundeclared-selector
	   Warn if a "@selector(...)" expression referring to an
	   undeclared selector is found.  A selector is consid-
	   ered undeclared if no method with that name has been
	   declared before the "@selector(...)" expression,
	   either explicitly in an "@interface" or "@protocol"
	   declaration, or implicitly in an "@implementation"
	   section.  This option always performs its checks as
	   soon as a "@selector(...)" expression is found, while
	   "-Wselector" only performs its checks in the final
	   stage of compilation.  This also enforces the coding
	   style convention that methods and selectors must be
	   declared before being used.

       Options to Control Diagnostic Messages Formatting

       Traditionally, diagnostic messages have been formatted
       irrespective of the output device's aspect (e.g. its
       width, ...).  The options described below can be used to
       control the diagnostic messages formatting algorithm, e.g.
       how many characters per line, how often source location
       information should be reported.	Right now, only the C++
       front end can honor these options.  However it is
       expected, in the near future, that the remaining front
       ends would be able to digest them correctly.

       -fmessage-length=n
	   Try to format error messages so that they fit on lines
	   of about n characters.  The default is 72 characters
	   for g++ and 0 for the rest of the front ends supported
	   by GCC.  If n is zero, then no line-wrapping will be
	   done; each error message will appear on a single line.

       -fdiagnostics-show-location=once
	   Only meaningful in line-wrapping mode.  Instructs the
	   diagnostic messages reporter to emit once source loca-
	   tion information; that is, in case the message is too
	   long to fit on a single physical line and has to be
	   wrapped, the source location won't be emitted (as pre-
	   fix) again, over and over, in subsequent continuation
	   lines.  This is the default behavior.

       -fdiagnostics-show-location=every-line
	   Only meaningful in line-wrapping mode.  Instructs the
	   diagnostic messages reporter to emit the same source
	   location information (as prefix) for physical lines
	   that result from the process of breaking a message
	   which is too long to fit on a single line.

       Options to Request or Suppress Warnings

       Warnings are diagnostic messages that report constructions
       which are not inherently erroneous but which are risky or
       suggest there may have been an error.

       You can request many specific warnings with options begin-
       ning -W, for example -Wimplicit to request warnings on
       implicit declarations.  Each of these specific warning
       options also has a negative form beginning -Wno- to turn
       off warnings; for example, -Wno-implicit.  This manual
       lists only one of the two forms, whichever is not the
       default.

       The following options control the amount and kinds of
       warnings produced by GCC; for further, language-specific
       options also refer to @ref{C++ Dialect Options} and
       @ref{Objective-C Dialect Options}.

       -fsyntax-only
	   Check the code for syntax errors, but don't do any-
	   thing beyond that.

       -pedantic
	   Issue all the warnings demanded by strict ISO C and
	   ISO C++; reject all programs that use forbidden exten-
	   sions, and some other programs that do not follow ISO
	   C and ISO C++.  For ISO C, follows the version of the
	   ISO C standard specified by any -std option used.

	   Valid ISO C and ISO C++ programs should compile prop-
	   erly with or without this option (though a rare few
	   will require -ansi or a -std option specifying the
	   required version of ISO C).	However, without this
	   option, certain GNU extensions and traditional C and
	   C++ features are supported as well.	With this option,
	   they are rejected.

	   -pedantic does not cause warning messages for use of
	   the alternate keywords whose names begin and end with
	   __.	Pedantic warnings are also disabled in the
	   expression that follows "__extension__".  However,
	   only system header files should use these escape
	   routes; application programs should avoid them.

	   Some users try to use -pedantic to check programs for
	   strict ISO C conformance.  They soon find that it does
	   not do quite what they want: it finds some non-ISO
	   practices, but not all---only those for which ISO C
	   requires a diagnostic, and some others for which diag-
	   nostics have been added.

	   A feature to report any failure to conform to ISO C
	   might be useful in some instances, but would require
	   considerable additional work and would be quite dif-
	   ferent from -pedantic.  We don't have plans to support
	   such a feature in the near future.

	   Where the standard specified with -std represents a
	   GNU extended dialect of C, such as gnu89 or gnu99,
	   there is a corresponding base standard, the version of
	   ISO C on which the GNU extended dialect is based.
	   Warnings from -pedantic are given where they are
	   required by the base standard.  (It would not make
	   sense for such warnings to be given only for features
	   not in the specified GNU C dialect, since by defini-
	   tion the GNU dialects of C include all features the
	   compiler supports with the given option, and there
	   would be nothing to warn about.)

       -pedantic-errors
	   Like -pedantic, except that errors are produced rather
	   than warnings.

       -w  Inhibit all warning messages.

       -Wno-import
	   Inhibit warning messages about the use of #import.

       -Wchar-subscripts
	   Warn if an array subscript has type "char".	This is a
	   common cause of error, as programmers often forget
	   that this type is signed on some machines.

       -Wcomment
	   Warn whenever a comment-start sequence /* appears in a
	   /* comment, or whenever a Backslash-Newline appears in
	   a // comment.

       -Wformat
	   Check calls to "printf" and "scanf", etc., to make
	   sure that the arguments supplied have types appropri-
	   ate to the format string specified, and that the con-
	   versions specified in the format string make sense.
	   This includes standard functions, and others specified
	   by format attributes, in the "printf", "scanf", "strf-
	   time" and "strfmon" (an X/Open extension, not in the C
	   standard) families.

	   The formats are checked against the format features
	   supported by GNU libc version 2.2.  These include all
	   ISO C90 and C99 features, as well as features from the
	   Single Unix Specification and some BSD and GNU exten-
	   sions.  Other library implementations may not support
	   all these features; GCC does not support warning about
	   features that go beyond a particular library's limita-
	   tions.  However, if -pedantic is used with -Wformat,
	   warnings will be given about format features not in
	   the selected standard version (but not for "strfmon"
	   formats, since those are not in any version of the C
	   standard).

	   Since -Wformat also checks for null format arguments
	   for several functions, -Wformat also implies -Wnon-
	   null.

	   -Wformat is included in -Wall.  For more control over
	   some aspects of format checking, the options -Wno-for-
	   mat-y2k, -Wno-format-extra-args, -Wno-format-zero-
	   length, -Wformat-nonliteral, -Wformat-security, and
	   -Wformat=2 are available, but are not included in
	   -Wall.

       -Wno-format-y2k
	   If -Wformat is specified, do not warn about "strftime"
	   formats which may yield only a two-digit year.

       -Wno-format-extra-args
	   If -Wformat is specified, do not warn about excess
	   arguments to a "printf" or "scanf" format function.
	   The C standard specifies that such arguments are
	   ignored.

	   Where the unused arguments lie between used arguments
	   that are specified with $ operand number specifica-
	   tions, normally warnings are still given, since the
	   implementation could not know what type to pass to
	   "va_arg" to skip the unused arguments.  However, in
	   the case of "scanf" formats, this option will suppress
	   the warning if the unused arguments are all pointers,
	   since the Single Unix Specification says that such
	   unused arguments are allowed.

       -Wno-format-zero-length
	   If -Wformat is specified, do not warn about zero-
	   length formats.  The C standard specifies that zero-
	   length formats are allowed.

       -Wformat-nonliteral
	   If -Wformat is specified, also warn if the format
	   string is not a string literal and so cannot be
	   checked, unless the format function takes its format
	   arguments as a "va_list".

       -Wformat-security
	   If -Wformat is specified, also warn about uses of for-
	   mat functions that represent possible security prob-
	   lems.  At present, this warns about calls to "printf"
	   and "scanf" functions where the format string is not a
	   string literal and there are no format arguments, as
	   in "printf (foo);".	This may be a security hole if
	   the format string came from untrusted input and con-
	   tains %n.  (This is currently a subset of what -Wfor-
	   mat-nonliteral warns about, but in future warnings may
	   be added to -Wformat-security that are not included in
	   -Wformat-nonliteral.)

       -Wformat=2
	   Enable -Wformat plus format checks not included in
	   -Wformat.  Currently equivalent to -Wformat -Wformat-
	   nonliteral -Wformat-security.

       -Wnonnull
	   Warn about passing a null pointer for arguments marked
	   as requiring a non-null value by the "nonnull" func-
	   tion attribute.

	   -Wnonnull is included in -Wall and -Wformat.	 It can
	   be disabled with the -Wno-nonnull option.

       -Wimplicit-int
	   Warn when a declaration does not specify a type.

       -Wimplicit-function-declaration
       -Werror-implicit-function-declaration
	   Give a warning (or error) whenever a function is used
	   before being declared.

       -Wimplicit
	   Same as -Wimplicit-int and -Wimplicit-function-decla-
	   ration.

       -Wmain
	   Warn if the type of main is suspicious.  main should
	   be a function with external linkage, returning int,
	   taking either zero arguments, two, or three arguments
	   of appropriate types.

       -Wmissing-braces
	   Warn if an aggregate or union initializer is not fully
	   bracketed.  In the following example, the initializer
	   for a is not fully bracketed, but that for b is fully
	   bracketed.

		   int a[2][2] = { 0, 1, 2, 3 };
		   int b[2][2] = { { 0, 1 }, { 2, 3 } };


       -Wparentheses
	   Warn if parentheses are omitted in certain contexts,
	   such as when there is an assignment in a context where
	   a truth value is expected, or when operators are
	   nested whose precedence people often get confused
	   about.

	   Also warn about constructions where there may be con-
	   fusion to which "if" statement an "else" branch
	   belongs.  Here is an example of such a case:

		   {
		     if (a)
		       if (b)
			 foo ();
		     else
		       bar ();
		   }

	   In C, every "else" branch belongs to the innermost
	   possible "if" statement, which in this example is "if
	   (b)".  This is often not what the programmer expected,
	   as illustrated in the above example by indentation the
	   programmer chose.  When there is the potential for
	   this confusion, GCC will issue a warning when this
	   flag is specified.  To eliminate the warning, add
	   explicit braces around the innermost "if" statement so
	   there is no way the "else" could belong to the enclos-
	   ing "if".  The resulting code would look like this:

		   {
		     if (a)
		       {
			 if (b)
			   foo ();
			 else
			   bar ();
		       }
		   }


       -Wsequence-point
	   Warn about code that may have undefined semantics
	   because of violations of sequence point rules in the C
	   standard.

	   The C standard defines the order in which expressions
	   in a C program are evaluated in terms of sequence
	   points, which represent a partial ordering between the
	   execution of parts of the program: those executed
	   before the sequence point, and those executed after
	   it.	These occur after the evaluation of a full
	   expression (one which is not part of a larger expres-
	   sion), after the evaluation of the first operand of a
	   "&&", "||", "? :" or "," (comma) operator, before a
	   function is called (but after the evaluation of its
	   arguments and the expression denoting the called func-
	   tion), and in certain other places.	Other than as
	   expressed by the sequence point rules, the order of
	   evaluation of subexpressions of an expression is not
	   specified.  All these rules describe only a partial
	   order rather than a total order, since, for example,
	   if two functions are called within one expression with
	   no sequence point between them, the order in which the
	   functions are called is not specified.  However, the
	   standards committee have ruled that function calls do
	   not overlap.

	   It is not specified when between sequence points modi-
	   fications to the values of objects take effect.  Pro-
	   grams whose behavior depends on this have undefined
	   behavior; the C standard specifies that ``Between the
	   previous and next sequence point an object shall have
	   its stored value modified at most once by the evalua-
	   tion of an expression.  Furthermore, the prior value
	   shall be read only to determine the value to be
	   stored.''.  If a program breaks these rules, the
	   results on any particular implementation are entirely
	   unpredictable.

	   Examples of code with undefined behavior are "a =
	   a++;", "a[n] = b[n++]" and "a[i++] = i;".  Some more
	   complicated cases are not diagnosed by this option,
	   and it may give an occasional false positive result,
	   but in general it has been found fairly effective at
	   detecting this sort of problem in programs.

	   The present implementation of this option only works
	   for C programs.  A future implementation may also work
	   for C++ programs.

	   The C standard is worded confusingly, therefore there
	   is some debate over the precise meaning of the
	   sequence point rules in subtle cases.  Links to dis-
	   cussions of the problem, including proposed formal
	   definitions, may be found on our readings page, at
	   <http://gcc.gnu.org/readings.html>.

       -Wreturn-type
	   Warn whenever a function is defined with a return-type
	   that defaults to "int".  Also warn about any "return"
	   statement with no return-value in a function whose
	   return-type is not "void".

	   For C++, a function without return type always pro-
	   duces a diagnostic message, even when -Wno-return-type
	   is specified.  The only exceptions are main and func-
	   tions defined in system headers.

       -Wswitch
	   Warn whenever a "switch" statement has an index of
	   enumeral type and lacks a "case" for one or more of
	   the named codes of that enumeration.	 (The presence of
	   a "default" label prevents this warning.)  "case"
	   labels outside the enumeration range also provoke
	   warnings when this option is used.

       -Wswitch-default
	   Warn whenever a "switch" statement does not have a
	   "default" case.

       -Wswitch-enum
	   Warn whenever a "switch" statement has an index of
	   enumeral type and lacks a "case" for one or more of
	   the named codes of that enumeration.	 "case" labels
	   outside the enumeration range also provoke warnings
	   when this option is used.

       -Wtrigraphs
	   Warn if any trigraphs are encountered that might
	   change the meaning of the program (trigraphs within
	   comments are not warned about).

       -Wunused-function
	   Warn whenever a static function is declared but not
	   defined or a non\-inline static function is unused.

       -Wunused-label
	   Warn whenever a label is declared but not used.

	   To suppress this warning use the unused attribute.

       -Wunused-parameter
	   Warn whenever a function parameter is unused aside
	   from its declaration.

	   To suppress this warning use the unused attribute.

       -Wunused-variable
	   Warn whenever a local variable or non-constant static
	   variable is unused aside from its declaration

	   To suppress this warning use the unused attribute.

       -Wunused-value
	   Warn whenever a statement computes a result that is
	   explicitly not used.

	   To suppress this warning cast the expression to void.

       -Wunused
	   All the above -Wunused options combined.

	   In order to get a warning about an unused function
	   parameter, you must either specify -W -Wunused or sep-
	   arately specify -Wunused-parameter.

       -Wuninitialized
	   Warn if an automatic variable is used without first
	   being initialized or if a variable may be clobbered by
	   a "setjmp" call.

	   These warnings are possible only in optimizing compi-
	   lation, because they require data flow information
	   that is computed only when optimizing.  If you don't
	   specify -O, you simply won't get these warnings.

	   These warnings occur only for variables that are can-
	   didates for register allocation.  Therefore, they do
	   not occur for a variable that is declared "volatile",
	   or whose address is taken, or whose size is other than
	   1, 2, 4 or 8 bytes.	Also, they do not occur for
	   structures, unions or arrays, even when they are in
	   registers.

	   Note that there may be no warning about a variable
	   that is used only to compute a value that itself is
	   never used, because such computations may be deleted
	   by data flow analysis before the warnings are printed.

	   These warnings are made optional because GCC is not
	   smart enough to see all the reasons why the code might
	   be correct despite appearing to have an error.  Here
	   is one example of how this can happen:

		   {
		     int x;
		     switch (y)
		       {
		       case 1: x = 1;
			 break;
		       case 2: x = 4;
			 break;
		       case 3: x = 5;
		       }
		     foo (x);
		   }

	   If the value of "y" is always 1, 2 or 3, then "x" is
	   always initialized, but GCC doesn't know this.  Here
	   is another common case:





		   {
		     int save_y;
		     if (change_y) save_y = y, y = new_y;
		     ...
		     if (change_y) y = save_y;
		   }

	   This has no bug because "save_y" is used only if it is
	   set.

	   This option also warns when a non-volatile automatic
	   variable might be changed by a call to "longjmp".
	   These warnings as well are possible only in optimizing
	   compilation.

	   The compiler sees only the calls to "setjmp".  It can-
	   not know where "longjmp" will be called; in fact, a
	   signal handler could call it at any point in the code.
	   As a result, you may get a warning even when there is
	   in fact no problem because "longjmp" cannot in fact be
	   called at the place which would cause a problem.

	   Some spurious warnings can be avoided if you declare
	   all the functions you use that never return as "nore-
	   turn".

       -Wunknown-pragmas
	   Warn when a #pragma directive is encountered which is
	   not understood by GCC.  If this command line option is
	   used, warnings will even be issued for unknown pragmas
	   in system header files.  This is not the case if the
	   warnings were only enabled by the -Wall command line
	   option.

       -Wstrict-aliasing
	   This option is only active when -fstrict-aliasing is
	   active.  It warns about code which might break the
	   strict aliasing rules that the compiler is using for
	   optimization. The warning does not catch all cases,
	   but does attempt to catch the more common pitfalls. It
	   is included in -Wall.

       -Wall
	   All of the above -W options combined.  This enables
	   all the warnings about constructions that some users
	   consider questionable, and that are easy to avoid (or
	   modify to prevent the warning), even in conjunction
	   with macros.	 This also enables some language-specific
	   warnings described in @ref{C++ Dialect Options} and
	   @ref{Objective-C Dialect Options}.

       The following -W... options are not implied by -Wall.
       Some of them warn about constructions that users generally
       do not consider questionable, but which occasionally you
       might wish to check for; others warn about constructions
       that are necessary or hard to avoid in some cases, and
       there is no simple way to modify the code to suppress the
       warning.

       -W  Print extra warning messages for these events:

	   o   A function can return either with or without a
	       value.  (Falling off the end of the function body
	       is considered returning without a value.)  For
	       example, this function would evoke such a warning:

		       foo (a)
		       {
			 if (a > 0)
			   return a;
		       }


	   o   An expression-statement or the left-hand side of a
	       comma expression contains no side effects.  To
	       suppress the warning, cast the unused expression
	       to void.	 For example, an expression such as
	       x[i,j] will cause a warning, but x[(void)i,j] will
	       not.

	   o   An unsigned value is compared against zero with <
	       or >=.

	   o   A comparison like x<=y<=z appears; this is equiva-
	       lent to (x<=y ? 1 : 0) <= z, which is a different
	       interpretation from that of ordinary mathematical
	       notation.

	   o   Storage-class specifiers like "static" are not the
	       first things in a declaration.  According to the C
	       Standard, this usage is obsolescent.

	   o   The return type of a function has a type qualifier
	       such as "const".	 Such a type qualifier has no
	       effect, since the value returned by a function is
	       not an lvalue.  (But don't warn about the GNU
	       extension of "volatile void" return types.  That
	       extension will be warned about if -pedantic is
	       specified.)

	   o   If -Wall or -Wunused is also specified, warn about
	       unused arguments.

	   o   A comparison between signed and unsigned values
	       could produce an incorrect result when the signed
	       value is converted to unsigned.	(But don't warn
	       if -Wno-sign-compare is also specified.)

	   o   An aggregate has a partly bracketed initializer.
	       For example, the following code would evoke such a
	       warning, because braces are missing around the
	       initializer for "x.h":

		       struct s { int f, g; };
		       struct t { struct s h; int i; };
		       struct t x = { 1, 2, 3 };


	   o   An aggregate has an initializer which does not
	       initialize all members.	For example, the follow-
	       ing code would cause such a warning, because "x.h"
	       would be implicitly initialized to zero:

		       struct s { int f, g, h; };
		       struct s x = { 3, 4 };


       -Wno-div-by-zero
	   Do not warn about compile-time integer division by
	   zero.  Floating point division by zero is not warned
	   about, as it can be a legitimate way of obtaining
	   infinities and NaNs.

       -Wsystem-headers
	   Print warning messages for constructs found in system
	   header files.  Warnings from system headers are nor-
	   mally suppressed, on the assumption that they usually
	   do not indicate real problems and would only make the
	   compiler output harder to read.  Using this command
	   line option tells GCC to emit warnings from system
	   headers as if they occurred in user code.  However,
	   note that using -Wall in conjunction with this option
	   will not warn about unknown pragmas in system head-
	   ers---for that, -Wunknown-pragmas must also be used.

       -Wfloat-equal
	   Warn if floating point values are used in equality
	   comparisons.

	   The idea behind this is that sometimes it is conve-
	   nient (for the programmer) to consider floating-point
	   values as approximations to infinitely precise real
	   numbers.  If you are doing this, then you need to com-
	   pute (by analyzing the code, or in some other way) the
	   maximum or likely maximum error that the computation
	   introduces, and allow for it when performing compar-
	   isons (and when producing output, but that's a differ-
	   ent problem).  In particular, instead of testing for
	   equality, you would check to see whether the two val-
	   ues have ranges that overlap; and this is done with
	   the relational operators, so equality comparisons are
	   probably mistaken.

       -Wtraditional (C only)
	   Warn about certain constructs that behave differently
	   in traditional and ISO C.  Also warn about ISO C con-
	   structs that have no traditional C equivalent, and/or
	   problematic constructs which should be avoided.

	   o   Macro parameters that appear within string liter-
	       als in the macro body.  In traditional C macro
	       replacement takes place within string literals,
	       but does not in ISO C.

	   o   In traditional C, some preprocessor directives did
	       not exist.  Traditional preprocessors would only
	       consider a line to be a directive if the #
	       appeared in column 1 on the line.  Therefore
	       -Wtraditional warns about directives that tradi-
	       tional C understands but would ignore because the
	       # does not appear as the first character on the
	       line.  It also suggests you hide directives like
	       #pragma not understood by traditional C by indent-
	       ing them.  Some traditional implementations would
	       not recognize #elif, so it suggests avoiding it
	       altogether.

	   o   A function-like macro that appears without argu-
	       ments.

	   o   The unary plus operator.

	   o   The U integer constant suffix, or the F or L
	       floating point constant suffixes.  (Traditional C
	       does support the L suffix on integer constants.)
	       Note, these suffixes appear in macros defined in
	       the system headers of most modern systems, e.g.
	       the _MIN/_MAX macros in "<limits.h>".  Use of
	       these macros in user code might normally lead to
	       spurious warnings, however gcc's integrated pre-
	       processor has enough context to avoid warning in
	       these cases.

	   o   A function declared external in one block and then
	       used after the end of the block.

	   o   A "switch" statement has an operand of type
	       "long".

	   o   A non-"static" function declaration follows a
	       "static" one.  This construct is not accepted by
	       some traditional C compilers.

	   o   The ISO type of an integer constant has a differ-
	       ent width or signedness from its traditional type.
	       This warning is only issued if the base of the
	       constant is ten.	 I.e. hexadecimal or octal val-
	       ues, which typically represent bit patterns, are
	       not warned about.

	   o   Usage of ISO string concatenation is detected.

	   o   Initialization of automatic aggregates.

	   o   Identifier conflicts with labels.  Traditional C
	       lacks a separate namespace for labels.

	   o   Initialization of unions.  If the initializer is
	       zero, the warning is omitted.  This is done under
	       the assumption that the zero initializer in user
	       code appears conditioned on e.g. "__STDC__" to
	       avoid missing initializer warnings and relies on
	       default initialization to zero in the traditional
	       C case.

	   o   Conversions by prototypes between fixed/floating
	       point values and vice versa.  The absence of these
	       prototypes when compiling with traditional C would
	       cause serious problems.	This is a subset of the
	       possible conversion warnings, for the full set use
	       -Wconversion.

	   o   Use of ISO C style function definitions.	 This
	       warning intentionally is not issued for prototype
	       declarations or variadic functions because these
	       ISO C features will appear in your code when using
	       libiberty's traditional C compatibility macros,
	       "PARAMS" and "VPARAMS".	This warning is also
	       bypassed for nested functions because that feature
	       is already a gcc extension and thus not relevant
	       to traditional C compatibility.

       -Wundef
	   Warn if an undefined identifier is evaluated in an #if
	   directive.

       -Wendif-labels
	   Warn whenever an #else or an #endif are followed by
	   text.

       -Wshadow
	   Warn whenever a local variable shadows another local
	   variable, parameter or global variable or whenever a
	   built-in function is shadowed.

       -Wlarger-than-len
	   Warn whenever an object of larger than len bytes is
	   defined.

       -Wpointer-arith
	   Warn about anything that depends on the ``size of'' a
	   function type or of "void".	GNU C assigns these types
	   a size of 1, for convenience in calculations with
	   "void *" pointers and pointers to functions.

       -Wbad-function-cast (C only)
	   Warn whenever a function call is cast to a non-match-
	   ing type.  For example, warn if "int malloc()" is cast
	   to "anything *".

       -Wcast-qual
	   Warn whenever a pointer is cast so as to remove a type
	   qualifier from the target type.  For example, warn if
	   a "const char *" is cast to an ordinary "char *".

       -Wcast-align
	   Warn whenever a pointer is cast such that the required
	   alignment of the target is increased.  For example,
	   warn if a "char *" is cast to an "int *" on machines
	   where integers can only be accessed at two- or four-
	   byte boundaries.

       -Wwrite-strings
	   When compiling C, give string constants the type
	   "const char[length]" so that copying the address of
	   one into a non-"const" "char *" pointer will get a
	   warning; when compiling C++, warn about the deprecated
	   conversion from string constants to "char *".  These
	   warnings will help you find at compile time code that
	   can try to write into a string constant, but only if
	   you have been very careful about using "const" in dec-
	   larations and prototypes.  Otherwise, it will just be
	   a nuisance; this is why we did not make -Wall request
	   these warnings.

       -Wconversion
	   Warn if a prototype causes a type conversion that is
	   different from what would happen to the same argument
	   in the absence of a prototype.  This includes conver-
	   sions of fixed point to floating and vice versa, and
	   conversions changing the width or signedness of a
	   fixed point argument except when the same as the
	   default promotion.

	   Also, warn if a negative integer constant expression
	   is implicitly converted to an unsigned type.	 For
	   example, warn about the assignment "x = -1" if "x" is
	   unsigned.  But do not warn about explicit casts like
	   "(unsigned) -1".

       -Wsign-compare
	   Warn when a comparison between signed and unsigned
	   values could produce an incorrect result when the
	   signed value is converted to unsigned.  This warning
	   is enabled by -W, and by -Wall in C++ only.

       -Waggregate-return
	   Warn if any functions that return structures or unions
	   are defined or called.  (In languages where you can
	   return an array, this also elicits a warning.)

       -Wstrict-prototypes (C only)
	   Warn if a function is declared or defined without
	   specifying the argument types.  (An old-style function
	   definition is permitted without a warning if preceded
	   by a declaration which specifies the argument types.)

       -Wmissing-prototypes (C only)
	   Warn if a global function is defined without a previ-
	   ous prototype declaration.  This warning is issued
	   even if the definition itself provides a prototype.
	   The aim is to detect global functions that fail to be
	   declared in header files.

       -Wmissing-declarations (C only)
	   Warn if a global function is defined without a previ-
	   ous declaration.  Do so even if the definition itself
	   provides a prototype.  Use this option to detect
	   global functions that are not declared in header
	   files.

       -Wmissing-noreturn
	   Warn about functions which might be candidates for
	   attribute "noreturn".  Note these are only possible
	   candidates, not absolute ones.  Care should be taken
	   to manually verify functions actually do not ever
	   return before adding the "noreturn" attribute, other-
	   wise subtle code generation bugs could be introduced.
	   You will not get a warning for "main" in hosted C
	   environments.

       -Wmissing-format-attribute
	   If -Wformat is enabled, also warn about functions
	   which might be candidates for "format" attributes.
	   Note these are only possible candidates, not absolute
	   ones.  GCC will guess that "format" attributes might
	   be appropriate for any function that calls a function
	   like "vprintf" or "vscanf", but this might not always
	   be the case, and some functions for which "format"
	   attributes are appropriate may not be detected.  This
	   option has no effect unless -Wformat is enabled (pos-
	   sibly by -Wall).

       -Wno-multichar
	   Do not warn if a multicharacter constant ('FOOF') is
	   used.  Usually they indicate a typo in the user's
	   code, as they have implementation-defined values, and
	   should not be used in portable code.

       -Wno-deprecated-declarations
	   Do not warn about uses of functions, variables, and
	   types marked as deprecated by using the "deprecated"
	   attribute.  (@pxref{Function Attributes}, @pxref{Vari-
	   able Attributes}, @pxref{Type Attributes}.)

       -Wpacked
	   Warn if a structure is given the packed attribute, but
	   the packed attribute has no effect on the layout or
	   size of the structure.  Such structures may be mis-
	   aligned for little benefit.	For instance, in this
	   code, the variable "f.x" in "struct bar" will be mis-
	   aligned even though "struct bar" does not itself have
	   the packed attribute:



		   struct foo {
		     int x;
		     char a, b, c, d;
		   } __attribute__((packed));
		   struct bar {
		     char z;
		     struct foo f;
		   };


       -Wpadded
	   Warn if padding is included in a structure, either to
	   align an element of the structure or to align the
	   whole structure.  Sometimes when this happens it is
	   possible to rearrange the fields of the structure to
	   reduce the padding and so make the structure smaller.

       -Wredundant-decls
	   Warn if anything is declared more than once in the
	   same scope, even in cases where multiple declaration
	   is valid and changes nothing.

       -Wnested-externs (C only)
	   Warn if an "extern" declaration is encountered within
	   a function.

       -Wunreachable-code
	   Warn if the compiler detects that code will never be
	   executed.

	   This option is intended to warn when the compiler
	   detects that at least a whole line of source code will
	   never be executed, because some condition is never
	   satisfied or because it is after a procedure that
	   never returns.

	   It is possible for this option to produce a warning
	   even though there are circumstances under which part
	   of the affected line can be executed, so care should
	   be taken when removing apparently-unreachable code.

	   For instance, when a function is inlined, a warning
	   may mean that the line is unreachable in only one
	   inlined copy of the function.

	   This option is not made part of -Wall because in a
	   debugging version of a program there is often substan-
	   tial code which checks correct functioning of the pro-
	   gram and is, hopefully, unreachable because the pro-
	   gram does work.  Another common use of unreachable
	   code is to provide behavior which is selectable at
	   compile-time.

       -Winline
	   Warn if a function can not be inlined and it was
	   declared as inline.	Even with this option, the com-
	   piler will not warn about failures to inline functions
	   declared in system headers.

	   The compiler uses a variety of heuristics to determine
	   whether or not to inline a function.	 For example, the
	   compiler takes into account the size of the function
	   being inlined and the the amount of inlining that has
	   already been done in the current function.  Therefore,
	   seemingly insignificant changes in the source program
	   can cause the warnings produced by -Winline to appear
	   or disappear.

       -Wlong-long
	   Warn if long long type is used.  This is default.  To
	   inhibit the warning messages, use -Wno-long-long.
	   Flags -Wlong-long and -Wno-long-long are taken into
	   account only when -pedantic flag is used.

       -Wdisabled-optimization
	   Warn if a requested optimization pass is disabled.
	   This warning does not generally indicate that there is
	   anything wrong with your code; it merely indicates
	   that GCC's optimizers were unable to handle the code
	   effectively.	 Often, the problem is that your code is
	   too big or too complex; GCC will refuse to optimize
	   programs when the optimization itself is likely to
	   take inordinate amounts of time.

       -Werror
	   Make all warnings into errors.

       Options for Debugging Your Program or GCC

       GCC has various special options that are used for debug-
       ging either your program or GCC:

       -g  Produce debugging information in the operating sys-
	   tem's native format (stabs, COFF, XCOFF, or DWARF).
	   GDB can work with this debugging information.

	   On most systems that use stabs format, -g enables use
	   of extra debugging information that only GDB can use;
	   this extra information makes debugging work better in
	   GDB but will probably make other debuggers crash or
	   refuse to read the program.	If you want to control
	   for certain whether to generate the extra information,
	   use -gstabs+, -gstabs, -gxcoff+, -gxcoff, -gdwarf-1+,
	   -gdwarf-1, or -gvms (see below).

	   Unlike most other C compilers, GCC allows you to use
	   -g with -O.	The shortcuts taken by optimized code may
	   occasionally produce surprising results: some vari-
	   ables you declared may not exist at all; flow of con-
	   trol may briefly move where you did not expect it;
	   some statements may not be executed because they com-
	   pute constant results or their values were already at
	   hand; some statements may execute in different places
	   because they were moved out of loops.

	   Nevertheless it proves possible to debug optimized
	   output.  This makes it reasonable to use the optimizer
	   for programs that might have bugs.

	   The following options are useful when GCC is generated
	   with the capability for more than one debugging for-
	   mat.

       -ggdb
	   Produce debugging information for use by GDB.  This
	   means to use the most expressive format available
	   (DWARF 2, stabs, or the native format if neither of
	   those are supported), including GDB extensions if at
	   all possible.

       -gstabs
	   Produce debugging information in stabs format (if that
	   is supported), without GDB extensions.  This is the
	   format used by DBX on most BSD systems.  On MIPS,
	   Alpha and System V Release 4 systems this option pro-
	   duces stabs debugging output which is not understood
	   by DBX or SDB.  On System V Release 4 systems this
	   option requires the GNU assembler.

       -gstabs+
	   Produce debugging information in stabs format (if that
	   is supported), using GNU extensions understood only by
	   the GNU debugger (GDB).  The use of these extensions
	   is likely to make other debuggers crash or refuse to
	   read the program.

       -gcoff
	   Produce debugging information in COFF format (if that
	   is supported).  This is the format used by SDB on most
	   System V systems prior to System V Release 4.

       -gxcoff
	   Produce debugging information in XCOFF format (if that
	   is supported).  This is the format used by the DBX
	   debugger on IBM RS/6000 systems.

       -gxcoff+
	   Produce debugging information in XCOFF format (if that
	   is supported), using GNU extensions understood only by
	   the GNU debugger (GDB).  The use of these extensions
	   is likely to make other debuggers crash or refuse to
	   read the program, and may cause assemblers other than
	   the GNU assembler (GAS) to fail with an error.

       -gdwarf
	   Produce debugging information in DWARF version 1 for-
	   mat (if that is supported).	This is the format used
	   by SDB on most System V Release 4 systems.

	   This option is deprecated.

       -gdwarf+
	   Produce debugging information in DWARF version 1 for-
	   mat (if that is supported), using GNU extensions
	   understood only by the GNU debugger (GDB).  The use of
	   these extensions is likely to make other debuggers
	   crash or refuse to read the program.

	   This option is deprecated.

       -gdwarf-2
	   Produce debugging information in DWARF version 2 for-
	   mat (if that is supported).	This is the format used
	   by DBX on IRIX 6.

       -gvms
	   Produce debugging information in VMS debug format (if
	   that is supported).	This is the format used by DEBUG
	   on VMS systems.

       -glevel
       -ggdblevel
       -gstabslevel
       -gcofflevel
       -gxcofflevel
       -gvmslevel
	   Request debugging information and also use level to
	   specify how much information.  The default level is 2.

	   Level 1 produces minimal information, enough for mak-
	   ing backtraces in parts of the program that you don't
	   plan to debug.  This includes descriptions of func-
	   tions and external variables, but no information about
	   local variables and no line numbers.

	   Level 3 includes extra information, such as all the
	   macro definitions present in the program.  Some debug-
	   gers support macro expansion when you use -g3.

	   Note that in order to avoid confusion between DWARF1
	   debug level 2, and DWARF2, neither -gdwarf nor
	   -gdwarf-2 accept a concatenated debug level.	 Instead
	   use an additional -glevel option to change the debug
	   level for DWARF1 or DWARF2.

       -feliminate-dwarf2-dups
	   Compress DWARF2 debugging information by eliminating
	   duplicated information about each symbol.  This option
	   only makes sense when generating DWARF2 debugging
	   information with -gdwarf-2.

       -p  Generate extra code to write profile information suit-
	   able for the analysis program prof.	You must use this
	   option when compiling the source files you want data
	   about, and you must also use it when linking.

       -pg Generate extra code to write profile information suit-
	   able for the analysis program gprof.	 You must use
	   this option when compiling the source files you want
	   data about, and you must also use it when linking.

       -Q  Makes the compiler print out each function name as it
	   is compiled, and print some statistics about each pass
	   when it finishes.

       -ftime-report
	   Makes the compiler print some statistics about the
	   time consumed by each pass when it finishes.

       -fmem-report
	   Makes the compiler print some statistics about perma-
	   nent memory allocation when it finishes.

       -fprofile-arcs
	   Instrument arcs during compilation to generate cover-
	   age data or for profile-directed block ordering.  Dur-
	   ing execution the program records how many times each
	   branch is executed and how many times it is taken.
	   When the compiled program exits it saves this data to
	   a file called auxname.da for each source file.  aux-
	   name is generated from the name of the output file, if
	   explicitly specified and it is not the final exe-
	   cutable, otherwise it is the basename of the source
	   file. In both cases any suffix is removed (e.g.
	   foo.da for input file dir/foo.c, or dir/foo.da for
	   output file specified as -o dir/foo.o).

	   For profile-directed block ordering, compile the pro-
	   gram with -fprofile-arcs plus optimization and code
	   generation options, generate the arc profile informa-
	   tion by running the program on a selected workload,
	   and then compile the program again with the same opti-
	   mization and code generation options plus -fbranch-
	   probabilities.

	   The other use of -fprofile-arcs is for use with gcov,
	   when it is used with the -ftest-coverage option.

	   With -fprofile-arcs, for each function of your program
	   GCC creates a program flow graph, then finds a span-
	   ning tree for the graph.  Only arcs that are not on
	   the spanning tree have to be instrumented: the com-
	   piler adds code to count the number of times that
	   these arcs are executed.  When an arc is the only exit
	   or only entrance to a block, the instrumentation code
	   can be added to the block; otherwise, a new basic
	   block must be created to hold the instrumentation
	   code.

       -ftest-coverage
	   Create data files for the gcov code-coverage utility.
	   See -fprofile-arcs option above for a description of
	   auxname.

	   auxname.bb
	       A mapping from basic blocks to line numbers, which
	       gcov uses to associate basic block execution
	       counts with line numbers.

	   auxname.bbg
	       A list of all arcs in the program flow graph.
	       This allows gcov to reconstruct the program flow
	       graph, so that it can compute all basic block and
	       arc execution counts from the information in the
	       auxname.da file.

	   Use -ftest-coverage with -fprofile-arcs; the latter
	   option adds instrumentation to the program, which then
	   writes execution counts to another data file:

	   auxname.da
	       Runtime arc execution counts, used in conjunction
	       with the arc information in the file auxname.bbg.

	   Coverage data will map better to the source files if
	   -ftest-coverage is used without optimization.

       -dletters
	   Says to make debugging dumps during compilation at
	   times specified by letters.	This is used for debug-
	   ging the compiler.  The file names for most of the
	   dumps are made by appending a pass number and a word
	   to the dumpname. dumpname is generated from the name
	   of the output file, if explicitly specified and it is
	   not an executable, otherwise it is the basename of the
	   source file. In both cases any suffix is removed (e.g.
	   foo.00.rtl or foo.01.sibling).  Here are the possible
	   letters for use in letters, and their meanings:

	   A   Annotate the assembler output with miscellaneous
	       debugging information.

	   b   Dump after computing branch probabilities, to
	       file.14.bp.

	   B   Dump after block reordering, to file.32.bbro.

	   c   Dump after instruction combination, to the file
	       file.19.combine.


	   C   Dump after the first if conversion, to the file
	       file.15.ce1.

	   d   Dump after delayed branch scheduling, to
	       file.34.dbr.

	   D   Dump all macro definitions, at the end of prepro-
	       cessing, in addition to normal output.

	   e   Dump after SSA optimizations, to file.04.ssa and
	       file.07.ussa.

	   E   Dump after the second if conversion, to
	       file.29.ce3.

	   f   Dump after control and data flow analysis, to
	       file.14.cfg.  Also dump after life analysis, to
	       file.18.life.

	   F   Dump after purging "ADDRESSOF" codes, to
	       file.10.addressof.

	   g   Dump after global register allocation, to
	       file.24.greg.

	   G   Dump after GCSE, to file.11.gcse.

	   h   Dump after finalization of EH handling code, to
	       file.02.eh.

	   i   Dump after sibling call optimizations, to
	       file.01.sibling.

	   j   Dump after the first jump optimization, to
	       file.03.jump.

	   k   Dump after conversion from registers to stack, to
	       file.31.stack.

	   l   Dump after local register allocation, to
	       file.23.lreg.

	   L   Dump after loop optimization, to file.12.loop.

	   M   Dump after performing the machine dependent reor-
	       ganization pass, to file.33.mach.

	   n   Dump after register renumbering, to file.28.rnreg.

	   N   Dump after the register move pass, to file.21.reg-
	       move.

	   o   Dump after post-reload optimizations, to
	       file.25.postreload.

	   r   Dump after RTL generation, to file.00.rtl.

	   R   Dump after the second scheduling pass, to
	       file.30.sched2.

	   s   Dump after CSE (including the jump optimization
	       that sometimes follows CSE), to file.09.cse.

	   S   Dump after the first scheduling pass, to
	       file.22.sched.

	   t   Dump after the second CSE pass (including the jump
	       optimization that sometimes follows CSE), to
	       file.17.cse2.

	   T   Dump after running tracer, to file.16.tracer.

	   u   Dump after null pointer elimination pass to
	       file.08.null.

	   w   Dump after the second flow pass, to file.26.flow2.

	   W   Dump after SSA conditional constant propagation,
	       to file.05.ssaccp.

	   X   Dump after SSA dead code elimination, to
	       file.06.ssadce.

	   z   Dump after the peephole pass, to file.27.peep-
	       hole2.

	   a   Produce all the dumps listed above.

	   m   Print statistics on memory usage, at the end of
	       the run, to standard error.

	   p   Annotate the assembler output with a comment indi-
	       cating which pattern and alternative was used.
	       The length of each instruction is also printed.

	   P   Dump the RTL in the assembler output as a comment
	       before each instruction.	 Also turns on -dp anno-
	       tation.

	   v   For each of the other indicated dump files (except
	       for file.00.rtl), dump a representation of the
	       control flow graph suitable for viewing with VCG
	       to file.pass.vcg.

	   x   Just generate RTL for a function instead of com-
	       piling it.  Usually used with r.

	   y   Dump debugging information during parsing, to
	       standard error.

       -fdump-unnumbered
	   When doing debugging dumps (see -d option above), sup-
	   press instruction numbers and line number note output.
	   This makes it more feasible to use diff on debugging
	   dumps for compiler invocations with different options,
	   in particular with and without -g.

       -fdump-translation-unit (C and C++ only)
       -fdump-translation-unit-options (C and C++ only)
	   Dump a representation of the tree structure for the
	   entire translation unit to a file.  The file name is
	   made by appending .tu to the source file name.  If the
	   -options form is used, options controls the details of
	   the dump as described for the -fdump-tree options.

       -fdump-class-hierarchy (C++ only)
       -fdump-class-hierarchy-options (C++ only)
	   Dump a representation of each class's hierarchy and
	   virtual function table layout to a file.  The file
	   name is made by appending .class to the source file
	   name.  If the -options form is used, options controls
	   the details of the dump as described for the -fdump-
	   tree options.

       -fdump-tree-switch (C++ only)
       -fdump-tree-switch-options (C++ only)
	   Control the dumping at various stages of processing
	   the intermediate language tree to a file.  The file
	   name is generated by appending a switch specific suf-
	   fix to the source file name.	 If the -options form is
	   used, options is a list of - separated options that
	   control the details of the dump. Not all options are
	   applicable to all dumps, those which are not meaning-
	   ful will be ignored. The following options are avail-
	   able

	   address
	       Print the address of each node.	Usually this is
	       not meaningful as it changes according to the
	       environment and source file. Its primary use is
	       for tying up a dump file with a debug environment.

	   slim
	       Inhibit dumping of members of a scope or body of a
	       function merely because that scope has been
	       reached. Only dump such items when they are
	       directly reachable by some other path.

	   all Turn on all options.

	   The following tree dumps are possible:

	   original
	       Dump before any tree based optimization, to
	       file.original.

	   optimized
	       Dump after all tree based optimization, to
	       file.optimized.

	   inlined
	       Dump after function inlining, to file.inlined.

       -frandom-seed=string
	   This option provides a seed that GCC uses when it
	   would otherwise use random numbers.	At present, this
	   is used to generate certain symbol names that have to
	   be different in every compiled file.

	   The string should be different for every file you com-
	   pile.

       -fsched-verbose=n
	   On targets that use instruction scheduling, this
	   option controls the amount of debugging output the
	   scheduler prints.  This information is written to
	   standard error, unless -dS or -dR is specified, in
	   which case it is output to the usual dump listing
	   file, .sched or .sched2 respectively.  However for n
	   greater than nine, the output is always printed to
	   standard error.

	   For n greater than zero, -fsched-verbose outputs the
	   same information as -dRS.  For n greater than one, it
	   also output basic block probabilities, detailed ready
	   list information and unit/insn info.	 For n greater
	   than two, it includes RTL at abort point, control-flow
	   and regions info.  And for n over four, -fsched-ver-
	   bose also includes dependence info.

       -save-temps
	   Store the usual ``temporary'' intermediate files per-
	   manently; place them in the current directory and name
	   them based on the source file.  Thus, compiling foo.c
	   with -c -save-temps would produce files foo.i and
	   foo.s, as well as foo.o.  This creates a preprocessed
	   foo.i output file even though the compiler now nor-
	   mally uses an integrated preprocessor.

       -time
	   Report the CPU time taken by each subprocess in the
	   compilation sequence.  For C source files, this is the
	   compiler proper and assembler (plus the linker if
	   linking is done).  The output looks like this:

		   # cc1 0.12 0.01
		   # as 0.00 0.01

	   The first number on each line is the ``user time,''
	   that is time spent executing the program itself.  The
	   second number is ``system time,'' time spent executing
	   operating system routines on behalf of the program.
	   Both numbers are in seconds.

       -print-file-name=library
	   Print the full absolute name of the library file
	   library that would be used when linking---and don't do
	   anything else.  With this option, GCC does not compile
	   or link anything; it just prints the file name.

       -print-multi-directory
	   Print the directory name corresponding to the multilib
	   selected by any other switches present in the command
	   line.  This directory is supposed to exist in
	   GCC_EXEC_PREFIX.

       -print-multi-lib
	   Print the mapping from multilib directory names to
	   compiler switches that enable them.	The directory
	   name is separated from the switches by ;, and each
	   switch starts with an @} instead of the @samp{-, with-
	   out spaces between multiple switches.  This is sup-
	   posed to ease shell-processing.

       -print-prog-name=program
	   Like -print-file-name, but searches for a program such
	   as cpp.

       -print-libgcc-file-name
	   Same as -print-file-name=libgcc.a.

	   This is useful when you use -nostdlib or -nodefault-
	   libs but you do want to link with libgcc.a.	You can
	   do

		   gcc -nostdlib <files>... `gcc -print-libgcc-file-name`


       -print-search-dirs
	   Print the name of the configured installation direc-
	   tory and a list of program and library directories gcc
	   will search---and don't do anything else.

	   This is useful when gcc prints the error message
	   installation problem, cannot exec cpp0: No such file
	   or directory.  To resolve this you either need to put
	   cpp0 and the other compiler components where gcc
	   expects to find them, or you can set the environment
	   variable GCC_EXEC_PREFIX to the directory where you
	   installed them.  Don't forget the trailing '/'.

       -dumpmachine
	   Print the compiler's target machine (for example,
	   i686-pc-linux-gnu)---and don't do anything else.

       -dumpversion
	   Print the compiler version (for example, 3.0)---and
	   don't do anything else.

       -dumpspecs
	   Print the compiler's built-in specs---and don't do
	   anything else.  (This is used when GCC itself is being
	   built.)

       Options That Control Optimization

       These options control various sorts of optimizations.

       Without any optimization option, the compiler's goal is to
       reduce the cost of compilation and to make debugging pro-
       duce the expected results.  Statements are independent: if
       you stop the program with a breakpoint between statements,
       you can then assign a new value to any variable or change
       the program counter to any other statement in the function
       and get exactly the results you would expect from the
       source code.

       Turning on optimization flags makes the compiler attempt
       to improve the performance and/or code size at the expense
       of compilation time and possibly the ability to debug the
       program.

       Not all optimizations are controlled directly by a flag.
       Only optimizations that have a flag are listed.

       -O
       -O1 Optimize.  Optimizing compilation takes somewhat more
	   time, and a lot more memory for a large function.

	   With -O, the compiler tries to reduce code size and
	   execution time, without performing any optimizations
	   that take a great deal of compilation time.

	   -O turns on the following optimization flags: -fdefer-
	   pop -fmerge-constants -fthread-jumps -floop-optimize
	   -fcrossjumping -fif-conversion -fif-conversion2 -fde-
	   layed-branch -fguess-branch-probability -fcprop-regis-
	   ters

	   -O also turns on -fomit-frame-pointer on machines
	   where doing so does not interfere with debugging.

       -O2 Optimize even more.	GCC performs nearly all supported
	   optimizations that do not involve a space-speed trade-
	   off.	 The compiler does not perform loop unrolling or
	   function inlining when you specify -O2.  As compared
	   to -O, this option increases both compilation time and
	   the performance of the generated code.

	   -O2 turns on all optimization flags specified by -O.
	   It also turns on the following optimization flags:
	   -fforce-mem -foptimize-sibling-calls -fstrength-reduce
	   -fcse-follow-jumps  -fcse-skip-blocks -frerun-cse-
	   after-loop  -frerun-loop-opt -fgcse	 -fgcse-lm
	   -fgcse-sm -fdelete-null-pointer-checks -fexpensive-
	   optimizations -fregmove -fschedule-insns  -fschedule-
	   insns2 -fsched-interblock -fsched-spec -fcaller-saves
	   -fpeephole2 -freorder-blocks	 -freorder-functions
	   -fstrict-aliasing -falign-functions	-falign-jumps
	   -falign-loops  -falign-labels