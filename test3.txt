
       -mcpu=cpu_type
	   Set architecture type, register usage, choice of
	   mnemonics, and instruction scheduling parameters for
	   machine type cpu_type.  Supported values for cpu_type
	   are rios, rios1, rsc, rios2, rs64a, 601, 602, 603,
	   603e, 604, 604e, 620, 630, 740, 7400, 7450, 750,
	   power, power2, powerpc, 403, 505, 801, 821, 823, and
	   860 and common.

	   -mcpu=common selects a completely generic processor.
	   Code generated under this option will run on any POWER
	   or PowerPC processor.  GCC will use only the instruc-
	   tions in the common subset of both architectures, and
	   will not use the MQ register.  GCC assumes a generic
	   processor model for scheduling purposes.

	   -mcpu=power, -mcpu=power2, -mcpu=powerpc, and
	   -mcpu=powerpc64 specify generic POWER, POWER2, pure
	   32-bit PowerPC (i.e., not MPC601), and 64-bit PowerPC
	   architecture machine types, with an appropriate,
	   generic processor model assumed for scheduling pur-
	   poses.

	   The other options specify a specific processor.  Code
	   generated under those options will run best on that
	   processor, and may not run at all on others.

	   The -mcpu options automatically enable or disable
	   other -m options as follows:

	   common
	       -mno-power, -mno-powerpc

	   power
	   power2
	   rios1
	   rios2
	   rsc -mpower, -mno-powerpc, -mno-new-mnemonics

	   powerpc
	   rs64a
	   602
	   603
	   603e
	   604
	   620
	   630
	   740
	   7400
	   7450
	   750
	   505 -mno-power, -mpowerpc, -mnew-mnemonics

	   601 -mpower, -mpowerpc, -mnew-mnemonics

	   403
	   821
	   860 -mno-power, -mpowerpc, -mnew-mnemonics, -msoft-
	       float

       -mtune=cpu_type
	   Set the instruction scheduling parameters for machine
	   type cpu_type, but do not set the architecture type,
	   register usage, or choice of mnemonics, as
	   -mcpu=cpu_type would.  The same values for cpu_type
	   are used for -mtune as for -mcpu.  If both are speci-
	   fied, the code generated will use the architecture,
	   registers, and mnemonics set by -mcpu, but the
	   scheduling parameters set by -mtune.

       -maltivec

       -mno-altivec
	   These switches enable or disable the use of built-in
	   functions that allow access to the AltiVec instruction
	   set.	 You may also need to set -mabi=altivec to adjust
	   the current ABI with AltiVec ABI enhancements.

       -mabi=spe
	   Extend the current ABI with SPE ABI extensions.  This
	   does not change the default ABI, instead it adds the
	   SPE ABI extensions to the current ABI.

       -mabi=no-spe
	   Disable Booke SPE ABI extensions for the current ABI.

       -misel=yes/no
       -misel
	   This switch enables or disables the generation of ISEL
	   instructions.

       -mfull-toc
       -mno-fp-in-toc
       -mno-sum-in-toc
       -mminimal-toc
	   Modify generation of the TOC (Table Of Contents),
	   which is created for every executable file.	The
	   -mfull-toc option is selected by default.  In that
	   case, GCC will allocate at least one TOC entry for
	   each unique non-automatic variable reference in your
	   program.  GCC will also place floating-point constants
	   in the TOC.	However, only 16,384 entries are avail-
	   able in the TOC.

	   If you receive a linker error message that saying you
	   have overflowed the available TOC space, you can
	   reduce the amount of TOC space used with the -mno-fp-
	   in-toc and -mno-sum-in-toc options.	-mno-fp-in-toc
	   prevents GCC from putting floating-point constants in
	   the TOC and -mno-sum-in-toc forces GCC to generate
	   code to calculate the sum of an address and a constant
	   at run-time instead of putting that sum into the TOC.
	   You may specify one or both of these options.  Each
	   causes GCC to produce very slightly slower and larger
	   code at the expense of conserving TOC space.

	   If you still run out of space in the TOC even when you
	   specify both of these options, specify -mminimal-toc
	   instead.  This option causes GCC to make only one TOC
	   entry for every file.  When you specify this option,
	   GCC will produce code that is slower and larger but
	   which uses extremely little TOC space.  You may wish
	   to use this option only on files that contain less
	   frequently executed code.

       -maix64
       -maix32
	   Enable 64-bit AIX ABI and calling convention: 64-bit
	   pointers, 64-bit "long" type, and the infrastructure
	   needed to support them.  Specifying -maix64 implies
	   -mpowerpc64 and -mpowerpc, while -maix32 disables the
	   64-bit ABI and implies -mno-powerpc64.  GCC defaults
	   to -maix32.

       -mxl-call
       -mno-xl-call
	   On AIX, pass floating-point arguments to prototyped
	   functions beyond the register save area (RSA) on the
	   stack in addition to argument FPRs.	The AIX calling
	   convention was extended but not initially documented
	   to handle an obscure K&R C case of calling a function
	   that takes the address of its arguments with fewer
	   arguments than declared.  AIX XL compilers access
	   floating point arguments which do not fit in the RSA
	   from the stack when a subroutine is compiled without
	   optimization.  Because always storing floating-point
	   arguments on the stack is inefficient and rarely
	   needed, this option is not enabled by default and only
	   is necessary when calling subroutines compiled by AIX
	   XL compilers without optimization.

       -mpe
	   Support IBM RS/6000 SP Parallel Environment (PE).
	   Link an application written to use message passing
	   with special startup code to enable the application to
	   run.	 The system must have PE installed in the stan-
	   dard location (/usr/lpp/ppe.poe/), or the specs file
	   must be overridden with the -specs= option to specify
	   the appropriate directory location.	The Parallel
	   Environment does not support threads, so the -mpe
	   option and the -pthread option are incompatible.

       -msoft-float
       -mhard-float
	   Generate code that does not use (uses) the floating-
	   point register set.	Software floating point emulation
	   is provided if you use the -msoft-float option, and
	   pass the option to GCC when linking.

       -mmultiple
       -mno-multiple
	   Generate code that uses (does not use) the load multi-
	   ple word instructions and the store multiple word
	   instructions.  These instructions are generated by
	   default on POWER systems, and not generated on PowerPC
	   systems.  Do not use -mmultiple on little endian Pow-
	   erPC systems, since those instructions do not work
	   when the processor is in little endian mode.	 The
	   exceptions are PPC740 and PPC750 which permit the
	   instructions usage in little endian mode.

       -mstring
       -mno-string
	   Generate code that uses (does not use) the load string
	   instructions and the store string word instructions to
	   save multiple registers and do small block moves.
	   These instructions are generated by default on POWER
	   systems, and not generated on PowerPC systems.  Do not
	   use -mstring on little endian PowerPC systems, since
	   those instructions do not work when the processor is
	   in little endian mode.  The exceptions are PPC740 and
	   PPC750 which permit the instructions usage in little
	   endian mode.

       -mupdate
       -mno-update
	   Generate code that uses (does not use) the load or
	   store instructions that update the base register to
	   the address of the calculated memory location.  These
	   instructions are generated by default.  If you use
	   -mno-update, there is a small window between the time
	   that the stack pointer is updated and the address of
	   the previous frame is stored, which means code that
	   walks the stack frame across interrupts or signals may
	   get corrupted data.

       -mfused-madd
       -mno-fused-madd
	   Generate code that uses (does not use) the floating
	   point multiply and accumulate instructions.	These
	   instructions are generated by default if hardware
	   floating is used.

       -mno-bit-align
       -mbit-align
	   On System V.4 and embedded PowerPC systems do not (do)
	   force structures and unions that contain bit-fields to
	   be aligned to the base type of the bit-field.

	   For example, by default a structure containing nothing
	   but 8 "unsigned" bit-fields of length 1 would be
	   aligned to a 4 byte boundary and have a size of 4
	   bytes.  By using -mno-bit-align, the structure would
	   be aligned to a 1 byte boundary and be one byte in
	   size.

       -mno-strict-align
       -mstrict-align
	   On System V.4 and embedded PowerPC systems do not (do)
	   assume that unaligned memory references will be han-
	   dled by the system.

       -mrelocatable
       -mno-relocatable
	   On embedded PowerPC systems generate code that allows
	   (does not allow) the program to be relocated to a dif-
	   ferent address at runtime.  If you use -mrelocatable
	   on any module, all objects linked together must be
	   compiled with -mrelocatable or -mrelocatable-lib.

       -mrelocatable-lib
       -mno-relocatable-lib
	   On embedded PowerPC systems generate code that allows
	   (does not allow) the program to be relocated to a dif-
	   ferent address at runtime.  Modules compiled with
	   -mrelocatable-lib can be linked with either modules
	   compiled without -mrelocatable and -mrelocatable-lib
	   or with modules compiled with the -mrelocatable
	   options.

       -mno-toc
       -mtoc
	   On System V.4 and embedded PowerPC systems do not (do)
	   assume that register 2 contains a pointer to a global
	   area pointing to the addresses used in the program.

       -mlittle
       -mlittle-endian
	   On System V.4 and embedded PowerPC systems compile
	   code for the processor in little endian mode.  The
	   -mlittle-endian option is the same as -mlittle.

       -mbig
       -mbig-endian
	   On System V.4 and embedded PowerPC systems compile
	   code for the processor in big endian mode.  The -mbig-
	   endian option is the same as -mbig.

       -mcall-sysv
	   On System V.4 and embedded PowerPC systems compile
	   code using calling conventions that adheres to the
	   March 1995 draft of the System V Application Binary
	   Interface, PowerPC processor supplement.  This is the
	   default unless you configured GCC using pow-
	   erpc-*-eabiaix.

       -mcall-sysv-eabi
	   Specify both -mcall-sysv and -meabi options.

       -mcall-sysv-noeabi
	   Specify both -mcall-sysv and -mno-eabi options.

       -mcall-aix
	   On System V.4 and embedded PowerPC systems compile
	   code using calling conventions that are similar to
	   those used on AIX.  This is the default if you config-
	   ured GCC using powerpc-*-eabiaix.

       -mcall-solaris
	   On System V.4 and embedded PowerPC systems compile
	   code for the Solaris operating system.

       -mcall-linux
	   On System V.4 and embedded PowerPC systems compile
	   code for the Linux-based GNU system.

       -mcall-gnu
	   On System V.4 and embedded PowerPC systems compile
	   code for the Hurd-based GNU system.

       -mcall-netbsd
	   On System V.4 and embedded PowerPC systems compile
	   code for the NetBSD operating system.

       -maix-struct-return
	   Return all structures in memory (as specified by the
	   AIX ABI).

       -msvr4-struct-return
	   Return structures smaller than 8 bytes in registers
	   (as specified by the SVR4 ABI).

       -mabi=altivec
	   Extend the current ABI with AltiVec ABI extensions.
	   This does not change the default ABI, instead it adds
	   the AltiVec ABI extensions to the current ABI.

       -mabi=no-altivec
	   Disable AltiVec ABI extensions for the current ABI.

       -mprototype
       -mno-prototype
	   On System V.4 and embedded PowerPC systems assume that
	   all calls to variable argument functions are properly
	   prototyped.	Otherwise, the compiler must insert an
	   instruction before every non prototyped call to set or
	   clear bit 6 of the condition code register (CR) to
	   indicate whether floating point values were passed in
	   the floating point registers in case the function
	   takes a variable arguments.	With -mprototype, only
	   calls to prototyped variable argument functions will
	   set or clear the bit.

       -msim
	   On embedded PowerPC systems, assume that the startup
	   module is called sim-crt0.o and that the standard C
	   libraries are libsim.a and libc.a.  This is the
	   default for powerpc-*-eabisim.  configurations.

       -mmvme
	   On embedded PowerPC systems, assume that the startup
	   module is called crt0.o and the standard C libraries
	   are libmvme.a and libc.a.

       -mads
	   On embedded PowerPC systems, assume that the startup
	   module is called crt0.o and the standard C libraries
	   are libads.a and libc.a.

       -myellowknife
	   On embedded PowerPC systems, assume that the startup
	   module is called crt0.o and the standard C libraries
	   are libyk.a and libc.a.

       -mvxworks
	   On System V.4 and embedded PowerPC systems, specify
	   that you are compiling for a VxWorks system.

       -mwindiss
	   Specify that you are compiling for the WindISS simula-
	   tion environment.

       -memb
	   On embedded PowerPC systems, set the PPC_EMB bit in
	   the ELF flags header to indicate that eabi extended
	   relocations are used.

       -meabi
       -mno-eabi
	   On System V.4 and embedded PowerPC systems do (do not)
	   adhere to the Embedded Applications Binary Interface
	   (eabi) which is a set of modifications to the System
	   V.4 specifications.	Selecting -meabi means that the
	   stack is aligned to an 8 byte boundary, a function
	   "__eabi" is called to from "main" to set up the eabi
	   environment, and the -msdata option can use both "r2"
	   and "r13" to point to two separate small data areas.
	   Selecting -mno-eabi means that the stack is aligned to
	   a 16 byte boundary, do not call an initialization
	   function from "main", and the -msdata option will only
	   use "r13" to point to a single small data area.  The
	   -meabi option is on by default if you configured GCC
	   using one of the powerpc*-*-eabi* options.

       -msdata=eabi
	   On System V.4 and embedded PowerPC systems, put small
	   initialized "const" global and static data in the
	   .sdata2 section, which is pointed to by register "r2".
	   Put small initialized non-"const" global and static
	   data in the .sdata section, which is pointed to by
	   register "r13".  Put small uninitialized global and
	   static data in the .sbss section, which is adjacent to
	   the .sdata section.	The -msdata=eabi option is incom-
	   patible with the -mrelocatable option.  The
	   -msdata=eabi option also sets the -memb option.

       -msdata=sysv
	   On System V.4 and embedded PowerPC systems, put small
	   global and static data in the .sdata section, which is
	   pointed to by register "r13".  Put small uninitialized
	   global and static data in the .sbss section, which is
	   adjacent to the .sdata section.  The -msdata=sysv
	   option is incompatible with the -mrelocatable option.

       -msdata=default
       -msdata
	   On System V.4 and embedded PowerPC systems, if -meabi
	   is used, compile code the same as -msdata=eabi, other-
	   wise compile code the same as -msdata=sysv.

       -msdata-data
	   On System V.4 and embedded PowerPC systems, put small
	   global and static data in the .sdata section.  Put
	   small uninitialized global and static data in the
	   .sbss section.  Do not use register "r13" to address
	   small data however.	This is the default behavior
	   unless other -msdata options are used.

       -msdata=none
       -mno-sdata
	   On embedded PowerPC systems, put all initialized
	   global and static data in the .data section, and all
	   uninitialized data in the .bss section.

       -G num
	   On embedded PowerPC systems, put global and static
	   items less than or equal to num bytes into the small
	   data or bss sections instead of the normal data or bss
	   section.  By default, num is 8.  The -G num switch is
	   also passed to the linker.  All modules should be com-
	   piled with the same -G num value.

       -mregnames
       -mno-regnames
	   On System V.4 and embedded PowerPC systems do (do not)
	   emit register names in the assembly language output
	   using symbolic forms.

       -mlongcall
       -mno-longcall
	   Default to making all function calls via pointers, so
	   that functions which reside further than 64 megabytes
	   (67,108,864 bytes) from the current location can be
	   called.  This setting can be overridden by the "short-
	   call" function attribute, or by "#pragma longcall(0)".

	   Some linkers are capable of detecting out-of-range
	   calls and generating glue code on the fly.  On these
	   systems, long calls are unnecessary and generate
	   slower code.	 As of this writing, the AIX linker can
	   do this, as can the GNU linker for PowerPC/64.  It is
	   planned to add this feature to the GNU linker for
	   32-bit PowerPC systems as well.

	   In the future, we may cause GCC to ignore all longcall
	   specifications when the linker is known to generate
	   glue.

       -pthread
	   Adds support for multithreading with the pthreads
	   library.  This option sets flags for both the prepro-
	   cessor and linker.

       Darwin Options

       These options are defined for all architectures running
       the Darwin operating system.  They are useful for compati-
       bility with other Mac OS compilers.

       -all_load
	   Loads all members of static archive libraries.  See
	   man ld(1) for more information.

       -arch_errors_fatal
	   Cause the errors having to do with files that have the
	   wrong architecture to be fatal.

       -bind_at_load
	   Causes the output file to be marked such that the
	   dynamic linker will bind all undefined references when
	   the file is loaded or launched.

       -bundle
	   Produce a Mach-o bundle format file.	 See man ld(1)
	   for more information.

       -bundle_loader executable
	   This specifies the executable that will be loading the
	   build output file being linked. See man ld(1) for more
	   information.

       -allowable_client  client_name
       -arch_only
       -client_name
       -compatibility_version
       -current_version
       -dependency-file
       -dylib_file
       -dylinker_install_name
       -dynamic
       -dynamiclib
       -exported_symbols_list
       -filelist
       -flat_namespace
       -force_cpusubtype_ALL
       -force_flat_namespace
       -headerpad_max_install_names
       -image_base
       -init
       -install_name
       -keep_private_externs
       -multi_module
       -multiply_defined
       -multiply_defined_unused
       -noall_load
       -nomultidefs
       -noprebind
       -noseglinkedit
       -pagezero_size
       -prebind
       -prebind_all_twolevel_modules
       -private_bundle
       -read_only_relocs
       -sectalign
       -sectobjectsymbols
       -whyload
       -seg1addr
       -sectcreate
       -sectobjectsymbols
       -sectorder
       -seg_addr_table
       -seg_addr_table_filename


       -seglinkedit
       -segprot
       -segs_read_only_addr
       -segs_read_write_addr
       -single_module
       -static
       -sub_library
       -sub_umbrella
       -twolevel_namespace
       -umbrella
       -undefined
       -unexported_symbols_list
       -weak_reference_mismatches
       -whatsloaded
	   This options are available for Darwin linker. Darwin
	   linker man page describes them in detail.

       IBM RT Options

       These -m options are defined for the IBM RT PC:

       -min-line-mul
	   Use an in-line code sequence for integer multiplies.
	   This is the default.

       -mcall-lib-mul
	   Call "lmul$$" for integer multiples.

       -mfull-fp-blocks
	   Generate full-size floating point data blocks, includ-
	   ing the minimum amount of scratch space recommended by
	   IBM.	 This is the default.

       -mminimum-fp-blocks
	   Do not include extra scratch space in floating point
	   data blocks.	 This results in smaller code, but slower
	   execution, since scratch space must be allocated
	   dynamically.

       -mfp-arg-in-fpregs
	   Use a calling sequence incompatible with the IBM call-
	   ing convention in which floating point arguments are
	   passed in floating point registers.	Note that
	   "stdarg.h" will not work with floating point operands
	   if this option is specified.

       -mfp-arg-in-gregs
	   Use the normal calling convention for floating point
	   arguments.  This is the default.

       -mhc-struct-return
	   Return structures of more than one word in memory,
	   rather than in a register.  This provides compatibil-
	   ity with the MetaWare HighC (hc) compiler.  Use the
	   option -fpcc-struct-return for compatibility with the
	   Portable C Compiler (pcc).

       -mnohc-struct-return
	   Return some structures of more than one word in regis-
	   ters, when convenient.  This is the default.	 For com-
	   patibility with the IBM-supplied compilers, use the
	   option -fpcc-struct-return or the option -mhc-struct-
	   return.

       MIPS Options

       These -m options are defined for the MIPS family of com-
       puters:

       -march=arch
	   Generate code that will run on arch, which can be the
	   name of a generic MIPS ISA, or the name of a particu-
	   lar processor.  The ISA names are: mips1, mips2,
	   mips3, mips4, mips32 and mips64.  The processor names
	   are: r2000, r3000, r3900, r4000, vr4100, vr4300,
	   r4400, r4600, r4650, vr5000, r6000, r8000, 4kc, 4kp,
	   5kc, 20kc, orion, and sb1.  The special value from-abi
	   selects the most compatible architecture for the
	   selected ABI (that is, mips1 for 32-bit ABIs and mips3
	   for 64-bit ABIs).

	   In processor names, a final 000 can be abbreviated as
	   k (for example, -march=r2k).	 Prefixes are optional,
	   and vr may be written r.

	   GCC defines two macros based on the value of this
	   option.  The first is _MIPS_ARCH, which gives the name
	   of target architecture, as a string.	 The second has
	   the form _MIPS_ARCH_foo, where foo is the capitalized
	   value of _MIPS_ARCH.	 For example, -march=r2000 will
	   set _MIPS_ARCH to "r2000" and define the macro
	   _MIPS_ARCH_R2000.

	   Note that the _MIPS_ARCH macro uses the processor
	   names given above.  In other words, it will have the
	   full prefix and will not abbreviate 000 as k.  In the
	   case of from-abi, the macro names the resolved archi-
	   tecture (either "mips1" or "mips3").	 It names the
	   default architecture when no -march option is given.

       -mtune=arch
	   Optimize for arch.  Among other things, this option
	   controls the way instructions are scheduled, and the
	   perceived cost of arithmetic operations.  The list of
	   arch values is the same as for -march.

	   When this option is not used, GCC will optimize for
	   the processor specified by -march.  By using -march
	   and -mtune together, it is possible to generate code
	   that will run on a family of processors, but optimize
	   the code for one particular member of that family.

	   -mtune defines the macros _MIPS_TUNE and
	   _MIPS_TUNE_foo, which work in the same way as the
	   -march ones described above.

       -mips1
	   Equivalent to -march=mips1.

       -mips2
	   Equivalent to -march=mips2.

       -mips3
	   Equivalent to -march=mips3.

       -mips4
	   Equivalent to -march=mips4.

       -mips32
	   Equivalent to -march=mips32.



       -mips64
	   Equivalent to -march=mips64.

       -mfused-madd
       -mno-fused-madd
	   Generate code that uses (does not use) the floating
	   point multiply and accumulate instructions, when they
	   are available.  These instructions are generated by
	   default if they are available, but this may be unde-
	   sirable if the extra precision causes problems or on
	   certain chips in the mode where denormals are rounded
	   to zero where denormals generated by multiply and
	   accumulate instructions cause exceptions anyway.

       -mfp32
	   Assume that floating point registers are 32 bits wide.

       -mfp64
	   Assume that floating point registers are 64 bits wide.

       -mgp32
	   Assume that general purpose registers are 32 bits
	   wide.

       -mgp64
	   Assume that general purpose registers are 64 bits
	   wide.

       -mint64
	   Force int and long types to be 64 bits wide.	 See
	   -mlong32 for an explanation of the default, and the
	   width of pointers.

       -mlong64
	   Force long types to be 64 bits wide.	 See -mlong32 for
	   an explanation of the default, and the width of point-
	   ers.

       -mlong32
	   Force long, int, and pointer types to be 32 bits wide.

	   The default size of ints, longs and pointers depends
	   on the ABI.	All the supported ABIs use 32-bit ints.
	   The n64 ABI uses 64-bit longs, as does the 64-bit
	   Cygnus EABI; the others use 32-bit longs.  Pointers
	   are the same size as longs, or the same size as inte-
	   ger registers, whichever is smaller.

       -mabi=32
       -mabi=o64
       -mabi=n32
       -mabi=64
       -mabi=eabi
       -mabi=meabi
	   Generate code for the given ABI.

	   Note that there are two embedded ABIs: -mabi=eabi
	   selects the one defined by Cygnus while -meabi=meabi
	   selects the one defined by MIPS.  Both these ABIs have
	   32-bit and 64-bit variants.	Normally, GCC will gener-
	   ate 64-bit code when you select a 64-bit architecture,
	   but you can use -mgp32 to get 32-bit code instead.

       -mmips-as
	   Generate code for the MIPS assembler, and invoke mips-
	   tfile to add normal debug information.  This is the
	   default for all platforms except for the OSF/1 refer-
	   ence platform, using the OSF/rose object format.  If
	   the either of the -gstabs or -gstabs+ switches are
	   used, the mips-tfile program will encapsulate the
	   stabs within MIPS ECOFF.

       -mgas
	   Generate code for the GNU assembler.	 This is the
	   default on the OSF/1 reference platform, using the
	   OSF/rose object format.  Also, this is the default if
	   the configure option --with-gnu-as is used.

       -msplit-addresses
       -mno-split-addresses
	   Generate code to load the high and low parts of
	   address constants separately.  This allows GCC to
	   optimize away redundant loads of the high order bits
	   of addresses.  This optimization requires GNU as and
	   GNU ld.  This optimization is enabled by default for
	   some embedded targets where GNU as and GNU ld are
	   standard.

       -mrnames
       -mno-rnames
	   The -mrnames switch says to output code using the MIPS
	   software names for the registers, instead of the hard-
	   ware names (ie, a0 instead of $4).  The only known
	   assembler that supports this option is the Algorith-
	   mics assembler.

       -mgpopt
       -mno-gpopt
	   The -mgpopt switch says to write all of the data dec-
	   larations before the instructions in the text section,
	   this allows the MIPS assembler to generate one word
	   memory references instead of using two words for short
	   global or static data items.	 This is on by default if
	   optimization is selected.

       -mstats
       -mno-stats
	   For each non-inline function processed, the -mstats
	   switch causes the compiler to emit one line to the
	   standard error file to print statistics about the pro-
	   gram (number of registers saved, stack size, etc.).

       -mmemcpy
       -mno-memcpy
	   The -mmemcpy switch makes all block moves call the
	   appropriate string function (memcpy or bcopy) instead
	   of possibly generating inline code.

       -mmips-tfile
       -mno-mips-tfile
	   The -mno-mips-tfile switch causes the compiler not
	   postprocess the object file with the mips-tfile pro-
	   gram, after the MIPS assembler has generated it to add
	   debug support.  If mips-tfile is not run, then no
	   local variables will be available to the debugger.  In
	   addition, stage2 and stage3 objects will have the tem-
	   porary file names passed to the assembler embedded in
	   the object file, which means the objects will not com-
	   pare the same.  The -mno-mips-tfile switch should only
	   be used when there are bugs in the mips-tfile program
	   that prevents compilation.

       -msoft-float
	   Generate output containing library calls for floating
	   point.  Warning: the requisite libraries are not part
	   of GCC.  Normally the facilities of the machine's
	   usual C compiler are used, but this can't be done
	   directly in cross-compilation.  You must make your own
	   arrangements to provide suitable library functions for
	   cross-compilation.

       -mhard-float
	   Generate output containing floating point instruc-
	   tions.  This is the default if you use the unmodified
	   sources.

       -mabicalls
       -mno-abicalls
	   Emit (or do not emit) the pseudo operations .abicalls,
	   .cpload, and .cprestore that some System V.4 ports use
	   for position independent code.

       -mlong-calls
       -mno-long-calls
	   Do all calls with the JALR instruction, which requires
	   loading up a function's address into a register before
	   the call.  You need to use this switch, if you call
	   outside of the current 512 megabyte segment to func-
	   tions that are not through pointers.

       -mhalf-pic
       -mno-half-pic
	   Put pointers to extern references into the data sec-
	   tion and load them up, rather than put the references
	   in the text section.

       -membedded-pic
       -mno-embedded-pic
	   Generate PIC code suitable for some embedded systems.
	   All calls are made using PC relative address, and all
	   data is addressed using the $gp register.  No more
	   than 65536 bytes of global data may be used.	 This
	   requires GNU as and GNU ld which do most of the work.
	   This currently only works on targets which use ECOFF;
	   it does not work with ELF.

       -membedded-data
       -mno-embedded-data
	   Allocate variables to the read-only data section first
	   if possible, then next in the small data section if
	   possible, otherwise in data.	 This gives slightly
	   slower code than the default, but reduces the amount
	   of RAM required when executing, and thus may be pre-
	   ferred for some embedded systems.

       -muninit-const-in-rodata
       -mno-uninit-const-in-rodata
	   When used together with -membedded-data, it will
	   always store uninitialized const variables in the
	   read-only data section.

       -msingle-float
       -mdouble-float
	   The -msingle-float switch tells gcc to assume that the
	   floating point coprocessor only supports single preci-
	   sion operations, as on the r4650 chip.  The -mdouble-
	   float switch permits gcc to use double precision
	   operations.	This is the default.

       -mmad
       -mno-mad
	   Permit use of the mad, madu and mul instructions, as
	   on the r4650 chip.

       -m4650
	   Turns on -msingle-float, -mmad, and, at least for now,
	   -mcpu=r4650.

       -mips16
       -mno-mips16
	   Enable 16-bit instructions.

       -mentry
	   Use the entry and exit pseudo ops.  This option can
	   only be used with -mips16.

       -EL Compile code for the processor in little endian mode.
	   The requisite libraries are assumed to exist.

       -EB Compile code for the processor in big endian mode.
	   The requisite libraries are assumed to exist.

       -G num
	   Put global and static items less than or equal to num
	   bytes into the small data or bss sections instead of
	   the normal data or bss section.  This allows the
	   assembler to emit one word memory reference instruc-
	   tions based on the global pointer (gp or $28), instead
	   of the normal two words used.  By default, num is 8
	   when the MIPS assembler is used, and 0 when the GNU
	   assembler is used.  The -G num switch is also passed
	   to the assembler and linker.	 All modules should be
	   compiled with the same -G num value.

       -nocpp
	   Tell the MIPS assembler to not run its preprocessor
	   over user assembler files (with a .s suffix) when
	   assembling them.

       -mfix7000
	   Pass an option to gas which will cause nops to be
	   inserted if the read of the destination register of an
	   mfhi or mflo instruction occurs in the following two
	   instructions.

       -no-crt0
	   Do not include the default crt0.

       -mflush-func=func
       -mno-flush-func
	   Specifies the function to call to flush the I and D
	   caches, or to not call any such function.  If called,
	   the function must take the same arguments as the com-
	   mon "_flush_func()", that is, the address of the mem-
	   ory range for which the cache is being flushed, the
	   size of the memory range, and the number 3 (to flush
	   both caches).  The default depends on the target gcc
	   was configured for, but commonly is either _flush_func
	   or __cpu_flush.

       -mbranch-likely


       -mno-branch-likely
	   Enable or disable use of Branch Likely instructions,
	   regardless of the default for the selected architec-
	   ture.  By default, Branch Likely instructions may be
	   generated if they are supported by the selected archi-
	   tecture.  An exception is for the MIPS32 and MIPS64
	   architectures and processors which implement those
	   architectures; for those, Branch Likely instructions
	   will not be generated by default because the MIPS32
	   and MIPS64 architectures specifically deprecate their
	   use.

       Intel 386 and AMD x86-64 Options

       These -m options are defined for the i386 and x86-64 fam-
       ily of computers:

       -mcpu=cpu-type
	   Tune to cpu-type everything applicable about the gen-
	   erated code, except for the ABI and the set of avail-
	   able instructions.  The choices for cpu-type are i386,
	   i486, i586, i686, pentium, pentium-mmx, pentiumpro,
	   pentium2, pentium3, pentium4, prescott, nocona, k6,
	   k6-2, k6-3, athlon, athlon-tbird, athlon-4, athlon-xp,
	   athlon-mp, winchip-c6, winchip2 and c3.

	   While picking a specific cpu-type will schedule things
	   appropriately for that particular chip, the compiler
	   will not generate any code that does not run on the
	   i386 without the -march=cpu-type option being used.
	   i586 is equivalent to pentium and i686 is equivalent
	   to pentiumpro.  k6 and athlon are the AMD chips as
	   opposed to the Intel ones.

       -march=cpu-type
	   Generate instructions for the machine type cpu-type.
	   The choices for cpu-type are the same as for -mcpu.
	   Moreover, specifying -march=cpu-type implies
	   -mcpu=cpu-type.

       -m386
       -m486
       -mpentium
       -mpentiumpro
	   These options are synonyms for -mcpu=i386, -mcpu=i486,
	   -mcpu=pentium, and -mcpu=pentiumpro respectively.
	   These synonyms are deprecated.

       -mfpmath=unit
	   Generate floating point arithmetics for selected unit
	   unit.  The choices for unit are:

	   387 Use the standard 387 floating point coprocessor
	       present majority of chips and emulated otherwise.
	       Code compiled with this option will run almost
	       everywhere.  The temporary results are computed in
	       80bit precision instead of precision specified by
	       the type resulting in slightly different results
	       compared to most of other chips. See -ffloat-store
	       for more detailed description.

	       This is the default choice for i386 compiler.

	   sse Use scalar floating point instructions present in
	       the SSE instruction set.	 This instruction set is
	       supported by Pentium3 and newer chips, in the AMD
	       line by Athlon-4, Athlon-xp and Athlon-mp chips.
	       The earlier version of SSE instruction set sup-
	       ports only single precision arithmetics, thus the
	       double and extended precision arithmetics is still
	       done using 387.	Later version, present only in
	       Pentium4 and the future AMD x86-64 chips supports
	       double precision arithmetics too.

	       For i387 you need to use -march=cpu-type, -msse or
	       -msse2 switches to enable SSE extensions and make
	       this option effective.  For x86-64 compiler, these
	       extensions are enabled by default.

	       The resulting code should be considerably faster
	       in the majority of cases and avoid the numerical
	       instability problems of 387 code, but may break
	       some existing code that expects temporaries to be
	       80bit.

	       This is the default choice for the x86-64 com-
	       piler.

	   sse,387
	       Attempt to utilize both instruction sets at once.
	       This effectively double the amount of available
	       registers and on chips with separate execution
	       units for 387 and SSE the execution resources too.
	       Use this option with care, as it is still experi-
	       mental, because the gcc register allocator does
	       not model separate functional units well.

       -masm=dialect
	   Output asm instructions using selected dialect. Sup-
	   ported choices are intel or att (the default one).

       -mieee-fp
       -mno-ieee-fp
	   Control whether or not the compiler uses IEEE floating
	   point comparisons.  These handle correctly the case
	   where the result of a comparison is unordered.

       -msoft-float
	   Generate output containing library calls for floating
	   point.  Warning: the requisite libraries are not part
	   of GCC.  Normally the facilities of the machine's
	   usual C compiler are used, but this can't be done
	   directly in cross-compilation.  You must make your own
	   arrangements to provide suitable library functions for
	   cross-compilation.

	   On machines where a function returns floating point
	   results in the 80387 register stack, some floating
	   point opcodes may be emitted even if -msoft-float is
	   used.

       -mno-fp-ret-in-387
	   Do not use the FPU registers for return values of
	   functions.

	   The usual calling convention has functions return val-
	   ues of types "float" and "double" in an FPU register,
	   even if there is no FPU.  The idea is that the operat-
	   ing system should emulate an FPU.

	   The option -mno-fp-ret-in-387 causes such values to be
	   returned in ordinary CPU registers instead.

       -mno-fancy-math-387
	   Some 387 emulators do not support the "sin", "cos" and
	   "sqrt" instructions for the 387.  Specify this option
	   to avoid generating those instructions.  This option
	   is the default on FreeBSD, OpenBSD and NetBSD.  This
	   option is overridden when -march indicates that the
	   target cpu will always have an FPU and so the instruc-
	   tion will not need emulation.  As of revision 2.6.1,
	   these instructions are not generated unless you also
	   use the -funsafe-math-optimizations switch.

       -malign-double
       -mno-align-double
	   Control whether GCC aligns "double", "long double",
	   and "long long" variables on a two word boundary or a
	   one word boundary.  Aligning "double" variables on a
	   two word boundary will produce code that runs somewhat
	   faster on a Pentium at the expense of more memory.

	   Warning: if you use the -malign-double switch, struc-
	   tures containing the above types will be aligned dif-
	   ferently than the published application binary inter-
	   face specifications for the 386 and will not be binary
	   compatible with structures in code compiled without
	   that switch.

       -m96bit-long-double
       -m128bit-long-double
	   These switches control the size of "long double" type.
	   The i386 application binary interface specifies the
	   size to be 96 bits, so -m96bit-long-double is the
	   default in 32 bit mode.

	   Modern architectures (Pentium and newer) would prefer
	   "long double" to be aligned to an 8 or 16 byte bound-
	   ary.	 In arrays or structures conforming to the ABI,
	   this would not be possible.	So specifying a -m128bit-
	   long-double will align "long double" to a 16 byte
	   boundary by padding the "long double" with an addi-
	   tional 32 bit zero.

	   In the x86-64 compiler, -m128bit-long-double is the
	   default choice as its ABI specifies that "long double"
	   is to be aligned on 16 byte boundary.

	   Notice that neither of these options enable any extra
	   precision over the x87 standard of 80 bits for a "long
	   double".

	   Warning: if you override the default value for your
	   target ABI, the structures and arrays containing "long
	   double" variables will change their size as well as
	   function calling convention for function taking "long
	   double" will be modified.  Hence they will not be
	   binary compatible with arrays or structures in code
	   compiled without that switch.

       -msvr3-shlib
       -mno-svr3-shlib
	   Control whether GCC places uninitialized local vari-
	   ables into the "bss" or "data" segments.  -msvr3-shlib
	   places them into "bss".  These options are meaningful
	   only on System V Release 3.



       -mrtd
	   Use a different function-calling convention, in which
	   functions that take a fixed number of arguments return
	   with the "ret" num instruction, which pops their argu-
	   ments while returning.  This saves one instruction in
	   the caller since there is no need to pop the arguments
	   there.

	   You can specify that an individual function is called
	   with this calling sequence with the function attribute
	   stdcall.  You can also override the -mrtd option by
	   using the function attribute cdecl.

	   Warning: this calling convention is incompatible with
	   the one normally used on Unix, so you cannot use it if
	   you need to call libraries compiled with the Unix com-
	   piler.

	   Also, you must provide function prototypes for all
	   functions that take variable numbers of arguments
	   (including "printf"); otherwise incorrect code will be
	   generated for calls to those functions.

	   In addition, seriously incorrect code will result if
	   you call a function with too many arguments.	 (Nor-
	   mally, extra arguments are harmlessly ignored.)

       -mregparm=num
	   Control how many registers are used to pass integer
	   arguments.  By default, no registers are used to pass
	   arguments, and at most 3 registers can be used.  You
	   can control this behavior for a specific function by
	   using the function attribute regparm.

	   Warning: if you use this switch, and num is nonzero,
	   then you must build all modules with the same value,
	   including any libraries.  This includes the system
	   libraries and startup modules.

       -mpreferred-stack-boundary=num
	   Attempt to keep the stack boundary aligned to a 2
	   raised to num byte boundary.	 If -mpreferred-stack-
	   boundary is not specified, the default is 4 (16 bytes
	   or 128 bits), except when optimizing for code size
	   (-Os), in which case the default is the minimum cor-
	   rect alignment (4 bytes for x86, and 8 bytes for
	   x86-64).

	   On Pentium and PentiumPro, "double" and "long double"
	   values should be aligned to an 8 byte boundary (see
	   -malign-double) or suffer significant run time perfor-
	   mance penalties.  On Pentium III, the Streaming SIMD
	   Extension (SSE) data type "__m128" suffers similar
	   penalties if it is not 16 byte aligned.

	   To ensure proper alignment of this values on the
	   stack, the stack boundary must be as aligned as that
	   required by any value stored on the stack.  Further,
	   every function must be generated such that it keeps
	   the stack aligned.  Thus calling a function compiled
	   with a higher preferred stack boundary from a function
	   compiled with a lower preferred stack boundary will
	   most likely misalign the stack.  It is recommended
	   that libraries that use callbacks always use the
	   default setting.

	   This extra alignment does consume extra stack space,
	   and generally increases code size.  Code that is sen-
	   sitive to stack space usage, such as embedded systems
	   and operating system kernels, may want to reduce the
	   preferred alignment to -mpreferred-stack-boundary=2.

       -mmmx
       -mno-mmx
       -msse
       -mno-sse
       -msse2
       -mno-sse2
       -msse3
       -mno-sse3
       -m3dnow
       -mno-3dnow
	   These switches enable or disable the use of built-in
	   functions that allow direct access to the MMX, SSE,
	   SSE2, SSE3 and 3Dnow extensions of the instruction
	   set.

	   To have SSE/SSE2 instructions generated automatically
	   from floating-point code, see -mfpmath=sse.

       -mpush-args
       -mno-push-args
	   Use PUSH operations to store outgoing parameters.
	   This method is shorter and usually equally fast as
	   method using SUB/MOV operations and is enabled by
	   default.  In some cases disabling it may improve per-
	   formance because of improved scheduling and reduced
	   dependencies.

       -maccumulate-outgoing-args
	   If enabled, the maximum amount of space required for
	   outgoing arguments will be computed in the function
	   prologue.  This is faster on most modern CPUs because
	   of reduced dependencies, improved scheduling and
	   reduced stack usage when preferred stack boundary is
	   not equal to 2.  The drawback is a notable increase in
	   code size.  This switch implies -mno-push-args.

       -mthreads
	   Support thread-safe exception handling on Mingw32.
	   Code that relies on thread-safe exception handling
	   must compile and link all code with the -mthreads
	   option.  When compiling, -mthreads defines -D_MT; when
	   linking, it links in a special thread helper library
	   -lmingwthrd which cleans up per thread exception han-
	   dling data.

       -mno-align-stringops
	   Do not align destination of inlined string operations.
	   This switch reduces code size and improves performance
	   in case the destination is already aligned, but gcc
	   don't know about it.

       -minline-all-stringops
	   By default GCC inlines string operations only when
	   destination is known to be aligned at least to 4 byte
	   boundary.  This enables more inlining, increase code
	   size, but may improve performance of code that depends
	   on fast memcpy, strlen and memset for short lengths.



       -momit-leaf-frame-pointer
	   Don't keep the frame pointer in a register for leaf
	   functions.  This avoids the instructions to save, set
	   up and restore frame pointers and makes an extra reg-
	   ister available in leaf functions.  The option -fomit-
	   frame-pointer removes the frame pointer for all func-
	   tions which might make debugging harder.

       These -m switches are supported in addition to the above
       on AMD x86-64 processors in 64-bit environments.

       -m32
       -m64
	   Generate code for a 32-bit or 64-bit environment.  The
	   32-bit environment sets int, long and pointer to 32
	   bits and generates code that runs on any i386 system.
	   The 64-bit environment sets int to 32 bits and long
	   and pointer to 64 bits and generates code for AMD's
	   x86-64 architecture.

       -mno-red-zone
	   Do not use a so called red zone for x86-64 code.  The
	   red zone is mandated by the x86-64 ABI, it is a
	   128-byte area beyond the location of the stack pointer
	   that will not be modified by signal or interrupt han-
	   dlers and therefore can be used for temporary data
	   without adjusting the stack pointer.	 The flag -mno-
	   red-zone disables this red zone.

       -mcmodel=small
	   Generate code for the small code model: the program
	   and its symbols must be linked in the lower 2 GB of
	   the address space.  Pointers are 64 bits.  Programs
	   can be statically or dynamically linked.  This is the
	   default code model.

       -mcmodel=kernel
	   Generate code for the kernel code model.  The kernel
	   runs in the negative 2 GB of the address space.  This
	   model has to be used for Linux kernel code.

       -mcmodel=medium
	   Generate code for the medium model: The program is
	   linked in the lower 2 GB of the address space but sym-
	   bols can be located anywhere in the address space.
	   Programs can be statically or dynamically linked, but
	   building of shared libraries are not supported with
	   the medium model.

       -mcmodel=large
	   Generate code for the large model: This model makes no
	   assumptions about addresses and sizes of sections.
	   Currently GCC does not implement this model.

       HPPA Options

       These -m options are defined for the HPPA family of com-
       puters:

       -march=architecture-type
	   Generate code for the specified architecture.  The
	   choices for architecture-type are 1.0 for PA 1.0, 1.1
	   for PA 1.1, and 2.0 for PA 2.0 processors.  Refer to
	   /usr/lib/sched.models on an HP-UX system to determine
	   the proper architecture option for your machine.  Code
	   compiled for lower numbered architectures will run on
	   higher numbered architectures, but not the other way
	   around.

	   PA 2.0 support currently requires gas snapshot
	   19990413 or later.  The next release of binutils (cur-
	   rent is 2.9.1) will probably contain PA 2.0 support.

       -mpa-risc-1-0
       -mpa-risc-1-1
       -mpa-risc-2-0
	   Synonyms for -march=1.0, -march=1.1, and -march=2.0
	   respectively.

       -mbig-switch
	   Generate code suitable for big switch tables.  Use
	   this option only if the assembler/linker complain
	   about out of range branches within a switch table.

       -mjump-in-delay
	   Fill delay slots of function calls with unconditional
	   jump instructions by modifying the return pointer for
	   the function call to be the target of the conditional
	   jump.

       -mdisable-fpregs
	   Prevent floating point registers from being used in
	   any manner.	This is necessary for compiling kernels
	   which perform lazy context switching of floating point
	   registers.  If you use this option and attempt to per-
	   form floating point operations, the compiler will
	   abort.

       -mdisable-indexing
	   Prevent the compiler from using indexing address
	   modes.  This avoids some rather obscure problems when
	   compiling MIG generated code under MACH.

       -mno-space-regs
	   Generate code that assumes the target has no space
	   registers.  This allows GCC to generate faster indi-
	   rect calls and use unscaled index address modes.

	   Such code is suitable for level 0 PA systems and ker-
	   nels.

       -mfast-indirect-calls
	   Generate code that assumes calls never cross space
	   boundaries.	This allows GCC to emit code which per-
	   forms faster indirect calls.

	   This option will not work in the presence of shared
	   libraries or nested functions.

       -mlong-load-store
	   Generate 3-instruction load and store sequences as
	   sometimes required by the HP-UX 10 linker.  This is
	   equivalent to the +k option to the HP compilers.

       -mportable-runtime
	   Use the portable calling conventions proposed by HP
	   for ELF systems.

       -mgas
	   Enable the use of assembler directives only GAS under-
	   stands.

       -mschedule=cpu-type
	   Schedule code according to the constraints for the
	   machine type cpu-type.  The choices for cpu-type are
	   700 7100, 7100LC, 7200, 7300 and 8000.  Refer to
	   /usr/lib/sched.models on an HP-UX system to determine
	   the proper scheduling option for your machine.  The
	   default scheduling is 8000.

       -mlinker-opt
	   Enable the optimization pass in the HP-UX linker.
	   Note this makes symbolic debugging impossible.  It
	   also triggers a bug in the HP-UX 8 and HP-UX 9 linkers
	   in which they give bogus error messages when linking
	   some programs.

       -msoft-float
	   Generate output containing library calls for floating
	   point.  Warning: the requisite libraries are not
	   available for all HPPA targets.  Normally the facili-
	   ties of the machine's usual C compiler are used, but
	   this cannot be done directly in cross-compilation.
	   You must make your own arrangements to provide suit-
	   able library functions for cross-compilation.  The
	   embedded target hppa1.1-*-pro does provide software
	   floating point support.

	   -msoft-float changes the calling convention in the
	   output file; therefore, it is only useful if you com-
	   pile all of a program with this option.  In particu-
	   lar, you need to compile libgcc.a, the library that
	   comes with GCC, with -msoft-float in order for this to
	   work.

       -msio
	   Generate the predefine, "_SIO", for server IO.  The
	   default is -mwsio.  This generates the predefines,
	   "__hp9000s700", "__hp9000s700__" and "_WSIO", for
	   workstation IO.  These options are available under HP-
	   UX and HI-UX.

       -mgnu-ld
	   Use GNU ld specific options.	 This passes -shared to
	   ld when building a shared library.  It is the default
	   when GCC is configured, explicitly or implicitly, with
	   the GNU linker.  This option does not have any affect
	   on which ld is called, it only changes what parameters
	   are passed to that ld.  The ld that is called is
	   determined by the --with-ld configure option, gcc's
	   program search path, and finally by the user's PATH.
	   The linker used by GCC can be printed using which `gcc
	   -print-prog-name=ld`.

       -mhp-ld
	   Use HP ld specific options.	This passes -b to ld when
	   building a shared library and passes +Accept TypeMis-
	   match to ld on all links.  It is the default when GCC
	   is configured, explicitly or implicitly, with the HP
	   linker.  This option does not have any affect on which
	   ld is called, it only changes what parameters are
	   passed to that ld.  The ld that is called is deter-
	   mined by the --with-ld configure option, gcc's program
	   search path, and finally by the user's PATH.	 The
	   linker used by GCC can be printed using which `gcc
	   -print-prog-name=ld`.


       -mlong-calls
	   Generate code that uses long call sequences.	 This
	   ensures that a call is always able to reach linker
	   generated stubs.  The default is to generate long
	   calls only when the distance from the call site to the
	   beginning of the function or translation unit, as the
	   case may be, exceeds a predefined limit set by the
	   branch type being used.  The limits for normal calls
	   are 7,600,000 and 240,000 bytes, respectively for the
	   PA 2.0 and PA 1.X architectures.  Sibcalls are always
	   limited at 240,000 bytes.

	   Distances are measured from the beginning of functions
	   when using the -ffunction-sections option, or when
	   using the -mgas and -mno-portable-runtime options
	   together under HP-UX with the SOM linker.

	   It is normally not desirable to use this option as it
	   will degrade performance.  However, it may be useful
	   in large applications, particularly when partial link-
	   ing is used to build the application.

	   The types of long calls used depends on the capabili-
	   ties of the assembler and linker, and the type of code
	   being generated.  The impact on systems that support
	   long absolute calls, and long pic symbol-difference or
	   pc-relative calls should be relatively small.  How-
	   ever, an indirect call is used on 32-bit ELF systems
	   in pic code and it is quite long.

       -nolibdld
	   Suppress the generation of link options to search lib-
	   dld.sl when the -static option is specified on HP-UX
	   10 and later.

       -static
	   The HP-UX implementation of setlocale in libc has a
	   dependency on libdld.sl.  There isn't an archive ver-
	   sion of libdld.sl.  Thus, when the -static option is
	   specified, special link options are needed to resolve
	   this dependency.

	   On HP-UX 10 and later, the GCC driver adds the neces-
	   sary options to link with libdld.sl when the -static
	   option is specified.	 This causes the resulting binary
	   to be dynamic.  On the 64-bit port, the linkers gener-
	   ate dynamic binaries by default in any case.	 The
	   -nolibdld option can be used to prevent the GCC driver
	   from adding these link options.

       -threads
	   Add support for multithreading with the dce thread
	   library under HP-UX.	 This option sets flags for both
	   the preprocessor and linker.

       Intel 960 Options

       These -m options are defined for the Intel 960 implementa-
       tions:

       -mcpu-type
	   Assume the defaults for the machine type cpu-type for
	   some of the other options, including instruction
	   scheduling, floating point support, and addressing
	   modes.  The choices for cpu-type are ka, kb, mc, ca,
	   cf, sa, and sb.  The default is kb.

       -mnumerics
       -msoft-float
	   The -mnumerics option indicates that the processor
	   does support floating-point instructions.  The -msoft-
	   float option indicates that floating-point support
	   should not be assumed.

       -mleaf-procedures
       -mno-leaf-procedures
	   Do (or do not) attempt to alter leaf procedures to be
	   callable with the "bal" instruction as well as "call".
	   This will result in more efficient code for explicit
	   calls when the "bal" instruction can be substituted by
	   the assembler or linker, but less efficient code in
	   other cases, such as calls via function pointers, or
	   using a linker that doesn't support this optimization.

       -mtail-call
       -mno-tail-call
	   Do (or do not) make additional attempts (beyond those
	   of the machine-independent portions of the compiler)
	   to optimize tail-recursive calls into branches.  You
	   may not want to do this because the detection of cases
	   where this is not valid is not totally complete.  The
	   default is -mno-tail-call.

       -mcomplex-addr
       -mno-complex-addr
	   Assume (or do not assume) that the use of a complex
	   addressing mode is a win on this implementation of the
	   i960.  Complex addressing modes may not be worthwhile
	   on the K-series, but they definitely are on the C-
	   series.  The default is currently -mcomplex-addr for
	   all processors except the CB and CC.

       -mcode-align
       -mno-code-align
	   Align code to 8-byte boundaries for faster fetching
	   (or don't bother).  Currently turned on by default for
	   C-series implementations only.

       -mic-compat
       -mic2.0-compat
       -mic3.0-compat
	   Enable compatibility with iC960 v2.0 or v3.0.

       -masm-compat
       -mintel-asm
	   Enable compatibility with the iC960 assembler.

       -mstrict-align
       -mno-strict-align
	   Do not permit (do permit) unaligned accesses.

       -mold-align
	   Enable structure-alignment compatibility with Intel's
	   gcc release version 1.3 (based on gcc 1.37).	 This
	   option implies -mstrict-align.

       -mlong-double-64
	   Implement type long double as 64-bit floating point
	   numbers.  Without the option long double is imple-
	   mented by 80-bit floating point numbers.  The only
	   reason we have it because there is no 128-bit long
	   double support in fp-bit.c yet.  So it is only useful
	   for people using soft-float targets.	 Otherwise, we
	   should recommend against use of it.

       DEC Alpha Options

       These -m options are defined for the DEC Alpha implementa-
       tions:

       -mno-soft-float
       -msoft-float
	   Use (do not use) the hardware floating-point instruc-
	   tions for floating-point operations.	 When -msoft-
	   float is specified, functions in libgcc.a will be used
	   to perform floating-point operations.  Unless they are
	   replaced by routines that emulate the floating-point
	   operations, or compiled in such a way as to call such
	   emulations routines, these routines will issue float-
	   ing-point operations.   If you are compiling for an
	   Alpha without floating-point operations, you must
	   ensure that the library is built so as not to call
	   them.

	   Note that Alpha implementations without floating-point
	   operations are required to have floating-point regis-
	   ters.

       -mfp-reg
       -mno-fp-regs
	   Generate code that uses (does not use) the floating-
	   point register set.	-mno-fp-regs implies -msoft-
	   float.  If the floating-point register set is not
	   used, floating point operands are passed in integer
	   registers as if they were integers and floating-point
	   results are passed in "$0" instead of "$f0".	 This is
	   a non-standard calling sequence, so any function with
	   a floating-point argument or return value called by
	   code compiled with -mno-fp-regs must also be compiled
	   with that option.

	   A typical use of this option is building a kernel that
	   does not use, and hence need not save and restore, any
	   floating-point registers.

       -mieee
	   The Alpha architecture implements floating-point hard-
	   ware optimized for maximum performance.  It is mostly
	   compliant with the IEEE floating point standard.  How-
	   ever, for full compliance, software assistance is
	   required.  This option generates code fully IEEE com-
	   pliant code except that the inexact-flag is not main-
	   tained (see below).	If this option is turned on, the
	   preprocessor macro "_IEEE_FP" is defined during compi-
	   lation.  The resulting code is less efficient but is
	   able to correctly support denormalized numbers and
	   exceptional IEEE values such as not-a-number and
	   plus/minus infinity.	 Other Alpha compilers call this
	   option -ieee_with_no_inexact.

       -mieee-with-inexact
	   This is like -mieee except the generated code also
	   maintains the IEEE inexact-flag.  Turning on this
	   option causes the generated code to implement fully-
	   compliant IEEE math.	 In addition to "_IEEE_FP",
	   "_IEEE_FP_EXACT" is defined as a preprocessor macro.
	   On some Alpha implementations the resulting code may
	   execute significantly slower than the code generated
	   by default.	Since there is very little code that
	   depends on the inexact-flag, you should normally not
	   specify this option.	 Other Alpha compilers call this
	   option -ieee_with_inexact.

       -mfp-trap-mode=trap-mode
	   This option controls what floating-point related traps
	   are enabled.	 Other Alpha compilers call this option
	   -fptm trap-mode.  The trap mode can be set to one of
	   four values:

	   n   This is the default (normal) setting.  The only
	       traps that are enabled are the ones that cannot be
	       disabled in software (e.g., division by zero
	       trap).

	   u   In addition to the traps enabled by n, underflow
	       traps are enabled as well.

	   su  Like su, but the instructions are marked to be
	       safe for software completion (see Alpha architec-
	       ture manual for details).

	   sui Like su, but inexact traps are enabled as well.

       -mfp-rounding-mode=rounding-mode
	   Selects the IEEE rounding mode.  Other Alpha compilers
	   call this option -fprm rounding-mode.  The rounding-
	   mode can be one of:

	   n   Normal IEEE rounding mode.  Floating point numbers
	       are rounded towards the nearest machine number or
	       towards the even machine number in case of a tie.

	   m   Round towards minus infinity.

	   c   Chopped rounding mode.  Floating point numbers are
	       rounded towards zero.

	   d   Dynamic rounding mode.  A field in the floating
	       point control register (fpcr, see Alpha architec-
	       ture reference manual) controls the rounding mode
	       in effect.  The C library initializes this regis-
	       ter for rounding towards plus infinity.	Thus,
	       unless your program modifies the fpcr, d corre-
	       sponds to round towards plus infinity.

       -mtrap-precision=trap-precision
	   In the Alpha architecture, floating point traps are
	   imprecise.  This means without software assistance it
	   is impossible to recover from a floating trap and pro-
	   gram execution normally needs to be terminated.  GCC
	   can generate code that can assist operating system
	   trap handlers in determining the exact location that
	   caused a floating point trap.  Depending on the
	   requirements of an application, different levels of
	   precisions can be selected:

	   p   Program precision.  This option is the default and
	       means a trap handler can only identify which pro-
	       gram caused a floating point exception.

	   f   Function precision.  The trap handler can deter-
	       mine the function that caused a floating point
	       exception.

	   i   Instruction precision.  The trap handler can
	       determine the exact instruction that caused a
	       floating point exception.

	   Other Alpha compilers provide the equivalent options
	   called -scope_safe and -resumption_safe.

       -mieee-conformant
	   This option marks the generated code as IEEE confor-
	   mant.  You must not use this option unless you also
	   specify -mtrap-precision=i and either -mfp-trap-
	   mode=su or -mfp-trap-mode=sui.  Its only effect is to
	   emit the line .eflag 48 in the function prologue of
	   the generated assembly file.	 Under DEC Unix, this has
	   the effect that IEEE-conformant math library routines
	   will be linked in.

       -mbuild-constants
	   Normally GCC examines a 32- or 64-bit integer constant
	   to see if it can construct it from smaller constants
	   in two or three instructions.  If it cannot, it will
	   output the constant as a literal and generate code to
	   load it from the data segment at runtime.

	   Use this option to require GCC to construct all inte-
	   ger constants using code, even if it takes more
	   instructions (the maximum is six).

	   You would typically use this option to build a shared
	   library dynamic loader.  Itself a shared library, it
	   must relocate itself in memory before it can find the
	   variables and constants in its own data segment.

       -malpha-as
       -mgas
	   Select whether to generate code to be assembled by the
	   vendor-supplied assembler (-malpha-as) or by the GNU
	   assembler -mgas.

       -mbwx
       -mno-bwx
       -mcix
       -mno-cix
       -mfix
       -mno-fix
       -mmax
       -mno-max
	   Indicate whether GCC should generate code to use the
	   optional BWX, CIX, FIX and MAX instruction sets.  The
	   default is to use the instruction sets supported by
	   the CPU type specified via -mcpu= option or that of
	   the CPU on which GCC was built if none was specified.

       -mfloat-vax
       -mfloat-ieee
	   Generate code that uses (does not use) VAX F and G
	   floating point arithmetic instead of IEEE single and
	   double precision.

       -mexplicit-relocs
       -mno-explicit-relocs
	   Older Alpha assemblers provided no way to generate
	   symbol relocations except via assembler macros.  Use
	   of these macros does not allow optimal instruction
	   scheduling.	GNU binutils as of version 2.12 supports
	   a new syntax that allows the compiler to explicitly
	   mark which relocations should apply to which instruc-
	   tions.  This option is mostly useful for debugging, as
	   GCC detects the capabilities of the assembler when it
	   is built and sets the default accordingly.

       -msmall-data
       -mlarge-data
	   When -mexplicit-relocs is in effect, static data is
	   accessed via gp-relative relocations.  When -msmall-
	   data is used, objects 8 bytes long or smaller are
	   placed in a small data area (the ".sdata" and ".sbss"
	   sections) and are accessed via 16-bit relocations off
	   of the "$gp" register.  This limits the size of the
	   small data area to 64KB, but allows the variables to
	   be directly accessed via a single instruction.

	   The default is -mlarge-data.	 With this option the
	   data area is limited to just below 2GB.  Programs that
	   require more than 2GB of data must use "malloc" or
	   "mmap" to allocate the data in the heap instead of in
	   the program's data segment.

	   When generating code for shared libraries, -fpic
	   implies -msmall-data and -fPIC implies -mlarge-data.

       -mcpu=cpu_type
	   Set the instruction set and instruction scheduling
	   parameters for machine type cpu_type.  You can specify
	   either the EV style name or the corresponding chip
	   number.  GCC supports scheduling parameters for the
	   EV4, EV5 and EV6 family of processors and will choose
	   the default values for the instruction set from the
	   processor you specify.  If you do not specify a pro-
	   cessor type, GCC will default to the processor on
	   which the compiler was built.

	   Supported values for cpu_type are

	   ev4
	   ev45
	   21064
	       Schedules as an EV4 and has no instruction set
	       extensions.

	   ev5
	   21164
	       Schedules as an EV5 and has no instruction set
	       extensions.

	   ev56
	   21164a
	       Schedules as an EV5 and supports the BWX exten-
	       sion.

	   pca56
	   21164pc
	   21164PC
	       Schedules as an EV5 and supports the BWX and MAX
	       extensions.

	   ev6
	   21264
	       Schedules as an EV6 and supports the BWX, FIX, and
	       MAX extensions.


	   ev67
	   21264a
	       Schedules as an EV6 and supports the BWX, CIX,
	       FIX, and MAX extensions.

       -mtune=cpu_type
	   Set only the instruction scheduling parameters for
	   machine type cpu_type.  The instruction set is not
	   changed.

       -mmemory-latency=time
	   Sets the latency the scheduler should assume for typi-
	   cal memory references as seen by the application.
	   This number is highly dependent on the memory access
	   patterns used by the application and the size of the
	   external cache on the machine.

	   Valid options for time are

	   number
	       A decimal number representing clock cycles.

	   L1
	   L2
	   L3
	   main
	       The compiler contains estimates of the number of
	       clock cycles for ``typical'' EV4 & EV5 hardware
	       for the Level 1, 2 & 3 caches (also called Dcache,
	       Scache, and Bcache), as well as to main memory.
	       Note that L3 is only valid for EV5.

       DEC Alpha/VMS Options

       These -m options are defined for the DEC Alpha/VMS imple-
       mentations:

       -mvms-return-codes
	   Return VMS condition codes from main.  The default is
	   to return POSIX style condition (e.g. error) codes.

       H8/300 Options

       These -m options are defined for the H8/300 implementa-
       tions:

       -mrelax
	   Shorten some address references at link time, when
	   possible; uses the linker option -relax.

       -mh Generate code for the H8/300H.

       -ms Generate code for the H8S.

       -mn Generate code for the H8S and H8/300H in the normal
	   mode.  This switch must be used either with -mh or
	   -ms.

       -ms2600
	   Generate code for the H8S/2600.  This switch must be
	   used with -ms.

       -mint32
	   Make "int" data 32 bits by default.


       -malign-300
	   On the H8/300H and H8S, use the same alignment rules
	   as for the H8/300.  The default for the H8/300H and
	   H8S is to align longs and floats on 4 byte boundaries.
	   -malign-300 causes them to be aligned on 2 byte bound-
	   aries.  This option has no effect on the H8/300.

       SH Options

       These -m options are defined for the SH implementations:

       -m1 Generate code for the SH1.

       -m2 Generate code for the SH2.

       -m3 Generate code for the SH3.

       -m3e
	   Generate code for the SH3e.

       -m4-nofpu
	   Generate code for the SH4 without a floating-point
	   unit.

       -m4-single-only
	   Generate code for the SH4 with a floating-point unit
	   that only supports single-precision arithmetic.

       -m4-single
	   Generate code for the SH4 assuming the floating-point
	   unit is in single-precision mode by default.

       -m4 Generate code for the SH4.

       -mb Compile code for the processor in big endian mode.

       -ml Compile code for the processor in little endian mode.

       -mdalign
	   Align doubles at 64-bit boundaries.	Note that this
	   changes the calling conventions, and thus some func-
	   tions from the standard C library will not work unless
	   you recompile it first with -mdalign.

       -mrelax
	   Shorten some address references at link time, when
	   possible; uses the linker option -relax.

       -mbigtable
	   Use 32-bit offsets in "switch" tables.  The default is
	   to use 16-bit offsets.

       -mfmovd
	   Enable the use of the instruction "fmovd".

       -mhitachi
	   Comply with the calling conventions defined by Rene-
	   sas.

       -mnomacsave
	   Mark the "MAC" register as call-clobbered, even if
	   -mhitachi is given.

       -mieee
	   Increase IEEE-compliance of floating-point code.

       -misize
	   Dump instruction size and location in the assembly
	   code.

       -mpadstruct
	   This option is deprecated.  It pads structures to mul-
	   tiple of 4 bytes, which is incompatible with the SH
	   ABI.

       -mspace
	   Optimize for space instead of speed.	 Implied by -Os.

       -mprefergot
	   When generating position-independent code, emit func-
	   tion calls using the Global Offset Table instead of
	   the Procedure Linkage Table.

       -musermode
	   Generate a library function call to invalidate
	   instruction cache entries, after fixing up a trampo-
	   line.  This library function call doesn't assume it
	   can write to the whole memory address space.	 This is
	   the default when the target is "sh-*-linux*".

       Options for System V

       These additional options are available on System V Release
       4 for compatibility with other compilers on those systems:

       -G  Create a shared object.  It is recommended that -sym-
	   bolic or -shared be used instead.

       -Qy Identify the versions of each tool used by the com-
	   piler, in a ".ident" assembler directive in the out-
	   put.

       -Qn Refrain from adding ".ident" directives to the output
	   file (this is the default).

       -YP,dirs
	   Search the directories dirs, and no others, for
	   libraries specified with -l.

       -Ym,dir
	   Look in the directory dir to find the M4 preprocessor.
	   The assembler uses this option.

       TMS320C3x/C4x Options

       These -m options are defined for TMS320C3x/C4x implementa-
       tions:

       -mcpu=cpu_type
	   Set the instruction set, register set, and instruction
	   scheduling parameters for machine type cpu_type.  Sup-
	   ported values for cpu_type are c30, c31, c32, c40, and
	   c44.	 The default is c40 to generate code for the
	   TMS320C40.

       -mbig-memory
       -mbig
       -msmall-memory
       -msmall
	   Generates code for the big or small memory model.  The
	   small memory model assumed that all data fits into one
	   64K word page.  At run-time the data page (DP) regis-
	   ter must be set to point to the 64K page containing
	   the .bss and .data program sections.	 The big memory
	   model is the default and requires reloading of the DP
	   register for every direct memory access.

       -mbk
       -mno-bk
	   Allow (disallow) allocation of general integer
	   operands into the block count register BK.

       -mdb
       -mno-db
	   Enable (disable) generation of code using decrement
	   and branch, DBcond(D), instructions.	 This is enabled
	   by default for the C4x.  To be on the safe side, this
	   is disabled for the C3x, since the maximum iteration
	   count on the C3x is 2^{23 + 1} (but who iterates loops
	   more than 2^{23} times on the C3x?).	 Note that GCC
	   will try to reverse a loop so that it can utilize the
	   decrement and branch instruction, but will give up if
	   there is more than one memory reference in the loop.
	   Thus a loop where the loop counter is decremented can
	   generate slightly more efficient code, in cases where
	   the RPTB instruction cannot be utilized.

       -mdp-isr-reload
       -mparanoid
	   Force the DP register to be saved on entry to an
	   interrupt service routine (ISR), reloaded to point to
	   the data section, and restored on exit from the ISR.
	   This should not be required unless someone has vio-
	   lated the small memory model by modifying the DP reg-
	   ister, say within an object library.

       -mmpyi
       -mno-mpyi
	   For the C3x use the 24-bit MPYI instruction for inte-
	   ger multiplies instead of a library call to guarantee
	   32-bit results.  Note that if one of the operands is a
	   constant, then the multiplication will be performed
	   using shifts and adds.  If the -mmpyi option is not
	   specified for the C3x, then squaring operations are
	   performed inline instead of a library call.

       -mfast-fix
       -mno-fast-fix
	   The C3x/C4x FIX instruction to convert a floating
	   point value to an integer value chooses the nearest
	   integer less than or equal to the floating point value
	   rather than to the nearest integer.	Thus if the
	   floating point number is negative, the result will be
	   incorrectly truncated an additional code is necessary
	   to detect and correct this case.  This option can be
	   used to disable generation of the additional code
	   required to correct the result.

       -mrptb
       -mno-rptb
	   Enable (disable) generation of repeat block sequences
	   using the RPTB instruction for zero overhead looping.
	   The RPTB construct is only used for innermost loops
	   that do not call functions or jump across the loop
	   boundaries.	There is no advantage having nested RPTB
	   loops due to the overhead required to save and restore
	   the RC, RS, and RE registers.  This is enabled by
	   default with -O2.

       -mrpts=count
       -mno-rpts
	   Enable (disable) the use of the single instruction
	   repeat instruction RPTS.  If a repeat block contains a
	   single instruction, and the loop count can be guaran-
	   teed to be less than the value count, GCC will emit a
	   RPTS instruction instead of a RPTB.	If no value is
	   specified, then a RPTS will be emitted even if the
	   loop count cannot be determined at compile time.  Note
	   that the repeated instruction following RPTS does not
	   have to be reloaded from memory each iteration, thus
	   freeing up the CPU buses for operands.  However, since
	   interrupts are blocked by this instruction, it is dis-
	   abled by default.

       -mloop-unsigned
       -mno-loop-unsigned
	   The maximum iteration count when using RPTS and RPTB
	   (and DB on the C40) is 2^{31 + 1} since these instruc-
	   tions test if the iteration count is negative to ter-
	   minate the loop.  If the iteration count is unsigned
	   there is a possibility than the 2^{31 + 1} maximum
	   iteration count may be exceeded.  This switch allows
	   an unsigned iteration count.

       -mti
	   Try to emit an assembler syntax that the TI assembler
	   (asm30) is happy with.  This also enforces compatibil-
	   ity with the API employed by the TI C3x C compiler.
	   For example, long doubles are passed as structures
	   rather than in floating point registers.

       -mregparm
       -mmemparm
	   Generate code that uses registers (stack) for passing
	   arguments to functions.  By default, arguments are
	   passed in registers where possible rather than by
	   pushing arguments on to the stack.

       -mparallel-insns
       -mno-parallel-insns
	   Allow the generation of parallel instructions.  This
	   is enabled by default with -O2.

       -mparallel-mpy
       -mno-parallel-mpy
	   Allow the generation of MPY||ADD and MPY||SUB parallel
	   instructions, provided -mparallel-insns is also speci-
	   fied.  These instructions have tight register con-
	   straints which can pessimize the code generation of
	   large functions.

       V850 Options

       These -m options are defined for V850 implementations:

       -mlong-calls
       -mno-long-calls
	   Treat all calls as being far away (near).  If calls
	   are assumed to be far away, the compiler will always
	   load the functions address up into a register, and
	   call indirect through the pointer.



       -mno-ep
       -mep
	   Do not optimize (do optimize) basic blocks that use
	   the same index pointer 4 or more times to copy pointer
	   into the "ep" register, and use the shorter "sld" and
	   "sst" instructions.	The -mep option is on by default
	   if you optimize.

       -mno-prolog-function
       -mprolog-function
	   Do not use (do use) external functions to save and
	   restore registers at the prologue and epilogue of a
	   function.  The external functions are slower, but use
	   less code space if more than one function saves the
	   same number of registers.  The -mprolog-function
	   option is on by default if you optimize.

       -mspace
	   Try to make the code as small as possible.  At pre-
	   sent, this just turns on the -mep and -mprolog-func-
	   tion options.

       -mtda=n
	   Put static or global variables whose size is n bytes
	   or less into the tiny data area that register "ep"
	   points to.  The tiny data area can hold up to 256
	   bytes in total (128 bytes for byte references).

       -msda=n
	   Put static or global variables whose size is n bytes
	   or less into the small data area that register "gp"
	   points to.  The small data area can hold up to 64
	   kilobytes.

       -mzda=n
	   Put static or global variables whose size is n bytes
	   or less into the first 32 kilobytes of memory.

       -mv850
	   Specify that the target processor is the V850.

       -mbig-switch
	   Generate code suitable for big switch tables.  Use
	   this option only if the assembler/linker complain
	   about out of range branches within a switch table.

       -mapp-regs
	   This option will cause r2 and r5 to be used in the
	   code generated by the compiler.  This setting is the
	   default.

       -mno-app-regs
	   This option will cause r2 and r5 to be treated as
	   fixed registers.

       -mv850e
	   Specify that the target processor is the V850E.  The
	   preprocessor constant __v850e__ will be defined if
	   this option is used.

	   If neither -mv850 nor -mv850e are defined then a
	   default target processor will be chosen and the rele-
	   vant __v850*__ preprocessor constant will be defined.

	   The preprocessor constants __v850 and __v851__ are
	   always defined, regardless of which processor variant
	   is the target.

       -mdisable-callt
	   This option will suppress generation of the CALLT
	   instruction for the v850e flavors of the v850 archi-
	   tecture.  The default is -mno-disable-callt which
	   allows the CALLT instruction to be used.

       ARC Options

       These options are defined for ARC implementations:

       -EL Compile code for little endian mode.	 This is the
	   default.

       -EB Compile code for big endian mode.

       -mmangle-cpu
	   Prepend the name of the cpu to all public symbol
	   names.  In multiple-processor systems, there are many
	   ARC variants with different instruction and register
	   set characteristics.	 This flag prevents code compiled
	   for one cpu to be linked with code compiled for
	   another.  No facility exists for handling variants
	   that are ``almost identical''.  This is an all or
	   nothing option.

       -mcpu=cpu
	   Compile code for ARC variant cpu.  Which variants are
	   supported depend on the configuration.  All variants
	   support -mcpu=base, this is the default.

       -mtext=text-section
       -mdata=data-section
       -mrodata=readonly-data-section
	   Put functions, data, and readonly data in text-sec-
	   tion, data-section, and readonly-data-section respec-
	   tively by default.  This can be overridden with the
	   "section" attribute.

       NS32K Options

       These are the -m options defined for the 32000 series.
       The default values for these options depends on which
       style of 32000 was selected when the compiler was config-
       ured; the defaults for the most common choices are given
       below.

       -m32032
       -m32032
	   Generate output for a 32032.	 This is the default when
	   the compiler is configured for 32032 and 32016 based
	   systems.

       -m32332
       -m32332
	   Generate output for a 32332.	 This is the default when
	   the compiler is configured for 32332-based systems.

       -m32532
       -m32532
	   Generate output for a 32532.	 This is the default when
	   the compiler is configured for 32532-based systems.



       -m32081
	   Generate output containing 32081 instructions for
	   floating point.  This is the default for all systems.

       -m32381
	   Generate output containing 32381 instructions for
	   floating point.  This also implies -m32081.	The 32381
	   is only compatible with the 32332 and 32532 cpus.
	   This is the default for the pc532-netbsd configura-
	   tion.

       -mmulti-add
	   Try and generate multiply-add floating point instruc-
	   tions "polyF" and "dotF".  This option is only avail-
	   able if the -m32381 option is in effect.  Using these
	   instructions requires changes to register allocation
	   which generally has a negative impact on performance.
	   This option should only be enabled when compiling code
	   particularly likely to make heavy use of multiply-add
	   instructions.

       -mnomulti-add
	   Do not try and generate multiply-add floating point
	   instructions "polyF" and "dotF".  This is the default
	   on all platforms.

       -msoft-float
	   Generate output containing library calls for floating
	   point.  Warning: the requisite libraries may not be
	   available.

       -mieee-compare
       -mno-ieee-compare
	   Control whether or not the compiler uses IEEE floating
	   point comparisons.  These handle correctly the case
	   where the result of a comparison is unordered.  Warn-
	   ing: the requisite kernel support may not be avail-
	   able.

       -mnobitfield
	   Do not use the bit-field instructions.  On some
	   machines it is faster to use shifting and masking
	   operations.	This is the default for the pc532.

       -mbitfield
	   Do use the bit-field instructions.  This is the
	   default for all platforms except the pc532.

       -mrtd
	   Use a different function-calling convention, in which
	   functions that take a fixed number of arguments return
	   pop their arguments on return with the "ret" instruc-
	   tion.

	   This calling convention is incompatible with the one
	   normally used on Unix, so you cannot use it if you
	   need to call libraries compiled with the Unix com-
	   piler.

	   Also, you must provide function prototypes for all
	   functions that take variable numbers of arguments
	   (including "printf"); otherwise incorrect code will be
	   generated for calls to those functions.

	   In addition, seriously incorrect code will result if
	   you call a function with too many arguments.	 (Nor-
	   mally, extra arguments are harmlessly ignored.)

	   This option takes its name from the 680x0 "rtd"
	   instruction.

       -mregparam
	   Use a different function-calling convention where the
	   first two arguments are passed in registers.

	   This calling convention is incompatible with the one
	   normally used on Unix, so you cannot use it if you
	   need to call libraries compiled with the Unix com-
	   piler.

       -mnoregparam
	   Do not pass any arguments in registers.  This is the
	   default for all targets.

       -msb
	   It is OK to use the sb as an index register which is
	   always loaded with zero.  This is the default for the
	   pc532-netbsd target.

       -mnosb
	   The sb register is not available for use or has not
	   been initialized to zero by the run time system.  This
	   is the default for all targets except the
	   pc532-netbsd.  It is also implied whenever -mhimem or
	   -fpic is set.

       -mhimem
	   Many ns32000 series addressing modes use displacements
	   of up to 512MB.  If an address is above 512MB then
	   displacements from zero can not be used.  This option
	   causes code to be generated which can be loaded above
	   512MB.  This may be useful for operating systems or
	   ROM code.

       -mnohimem
	   Assume code will be loaded in the first 512MB of vir-
	   tual address space.	This is the default for all plat-
	   forms.

       AVR Options

       These options are defined for AVR implementations:

       -mmcu=mcu
	   Specify ATMEL AVR instruction set or MCU type.

	   Instruction set avr1 is for the minimal AVR core, not
	   supported by the C compiler, only for assembler pro-
	   grams (MCU types: at90s1200, attiny10, attiny11,
	   attiny12, attiny15, attiny28).

	   Instruction set avr2 (default) is for the classic AVR
	   core with up to 8K program memory space (MCU types:
	   at90s2313, at90s2323, attiny22, at90s2333, at90s2343,
	   at90s4414, at90s4433, at90s4434, at90s8515, at90c8534,
	   at90s8535).

	   Instruction set avr3 is for the classic AVR core with
	   up to 128K program memory space (MCU types: atmega103,
	   atmega603, at43usb320, at76c711).

	   Instruction set avr4 is for the enhanced AVR core with
	   up to 8K program memory space (MCU types: atmega8,
	   atmega83, atmega85).

	   Instruction set avr5 is for the enhanced AVR core with
	   up to 128K program memory space (MCU types: atmega16,
	   atmega161, atmega163, atmega32, atmega323, atmega64,
	   atmega128, at43usb355, at94k).

       -msize
	   Output instruction sizes to the asm file.

       -minit-stack=N
	   Specify the initial stack address, which may be a sym-
	   bol or numeric value, __stack is the default.

       -mno-interrupts
	   Generated code is not compatible with hardware inter-
	   rupts.  Code size will be smaller.

       -mcall-prologues
	   Functions prologues/epilogues expanded as call to
	   appropriate subroutines.  Code size will be smaller.

       -mno-tablejump
	   Do not generate tablejump insns which sometimes
	   increase code size.

       -mtiny-stack
	   Change only the low 8 bits of the stack pointer.

       MCore Options

       These are the -m options defined for the Motorola M*Core
       processors.

       -mhardlit
       -mno-hardlit
	   Inline constants into the code stream if it can be
	   done in two instructions or less.

       -mdiv
       -mno-div
	   Use the divide instruction.	(Enabled by default).

       -mrelax-immediate
       -mno-relax-immediate
	   Allow arbitrary sized immediates in bit operations.

       -mwide-bitfields
       -mno-wide-bitfields
	   Always treat bit-fields as int-sized.

       -m4byte-functions
       -mno-4byte-functions
	   Force all functions to be aligned to a four byte
	   boundary.

       -mcallgraph-data
       -mno-callgraph-data
	   Emit callgraph information.

       -mslow-bytes
       -mno-slow-bytes
	   Prefer word access when reading byte quantities.


       -mlittle-endian
       -mbig-endian
	   Generate code for a little endian target.

       -m210
       -m340
	   Generate code for the 210 processor.

       IA-64 Options

       These are the -m options defined for the Intel IA-64
       architecture.

       -mbig-endian
	   Generate code for a big endian target.  This is the
	   default for HP-UX.

       -mlittle-endian
	   Generate code for a little endian target.  This is the
	   default for AIX5 and Linux.

       -mgnu-as
       -mno-gnu-as
	   Generate (or don't) code for the GNU assembler.  This
	   is the default.

       -mgnu-ld
       -mno-gnu-ld
	   Generate (or don't) code for the GNU linker.	 This is
	   the default.

       -mno-pic
	   Generate code that does not use a global pointer reg-
	   ister.  The result is not position independent code,
	   and violates the IA-64 ABI.

       -mvolatile-asm-stop
       -mno-volatile-asm-stop
	   Generate (or don't) a stop bit immediately before and
	   after volatile asm statements.

       -mb-step
	   Generate code that works around Itanium B step errata.

       -mregister-names
       -mno-register-names
	   Generate (or don't) in, loc, and out register names
	   for the stacked registers.  This may make assembler
	   output more readable.

       -mno-sdata
       -msdata
	   Disable (or enable) optimizations that use the small
	   data section.  This may be useful for working around
	   optimizer bugs.

       -mconstant-gp
	   Generate code that uses a single constant global
	   pointer value.  This is useful when compiling kernel
	   code.

       -mauto-pic
	   Generate code that is self-relocatable.  This implies
	   -mconstant-gp.  This is useful when compiling firmware
	   code.

       -minline-float-divide-min-latency
	   Generate code for inline divides of floating point
	   values using the minimum latency algorithm.

       -minline-float-divide-max-throughput
	   Generate code for inline divides of floating point
	   values using the maximum throughput algorithm.

       -minline-int-divide-min-latency
	   Generate code for inline divides of integer values
	   using the minimum latency algorithm.

       -minline-int-divide-max-throughput
	   Generate code for inline divides of integer values
	   using the maximum throughput algorithm.

       -mno-dwarf2-asm
       -mdwarf2-asm
	   Don't (or do) generate assembler code for the DWARF2
	   line number debugging info.	This may be useful when
	   not using the GNU assembler.

       -mfixed-range=register-range
	   Generate code treating the given register range as
	   fixed registers.  A fixed register is one that the
	   register allocator can not use.  This is useful when
	   compiling kernel code.  A register range is specified
	   as two registers separated by a dash.  Multiple regis-
	   ter ranges can be specified separated by a comma.

       D30V Options

       These -m options are defined for D30V implementations:

       -mextmem
	   Link the .text, .data, .bss, .strings, .rodata,
	   .rodata1, .data1 sections into external memory, which
	   starts at location "0x80000000".

       -mextmemory
	   Same as the -mextmem switch.

       -monchip
	   Link the .text section into onchip text memory, which
	   starts at location "0x0".  Also link .data, .bss,
	   .strings, .rodata, .rodata1, .data1 sections into
	   onchip data memory, which starts at location
	   "0x20000000".

       -mno-asm-optimize
       -masm-optimize
	   Disable (enable) passing -O to the assembler when
	   optimizing.	The assembler uses the -O option to auto-
	   matically parallelize adjacent short instructions
	   where possible.

       -mbranch-cost=n
	   Increase the internal costs of branches to n.  Higher
	   costs means that the compiler will issue more instruc-
	   tions to avoid doing a branch.  The default is 2.

       -mcond-exec=n
	   Specify the maximum number of conditionally executed
	   instructions that replace a branch.	The default is 4.

       S/390 and zSeries Options

       These are the -m options defined for the S/390 and zSeries
       architecture.

       -mhard-float
       -msoft-float
	   Use (do not use) the hardware floating-point instruc-
	   tions and registers for floating-point operations.
	   When -msoft-float is specified, functions in libgcc.a
	   will be used to perform floating-point operations.
	   When -mhard-float is specified, the compiler generates
	   IEEE floating-point instructions.  This is the
	   default.

       -mbackchain
       -mno-backchain
	   Generate (or do not generate) code which maintains an
	   explicit backchain within the stack frame that points
	   to the caller's frame.  This is currently needed to
	   allow debugging.  The default is to generate the
	   backchain.

       -msmall-exec
       -mno-small-exec
	   Generate (or do not generate) code using the "bras"
	   instruction to do subroutine calls.	This only works
	   reliably if the total executable size does not exceed
	   64k.	 The default is to use the "basr" instruction
	   instead, which does not have this limitation.

       -m64
       -m31
	   When -m31 is specified, generate code compliant to the
	   Linux for S/390 ABI.	 When -m64 is specified, generate
	   code compliant to the Linux for zSeries ABI.	 This
	   allows GCC in particular to generate 64-bit instruc-
	   tions.  For the s390 targets, the default is -m31,
	   while the s390x targets default to -m64.

       -mmvcle
       -mno-mvcle
	   Generate (or do not generate) code using the "mvcle"
	   instruction to perform block moves.	When -mno-mvcle
	   is specified, use a "mvc" loop instead.  This is the
	   default.

       -mdebug
       -mno-debug
	   Print (or do not print) additional debug information
	   when compiling.  The default is to not print debug
	   information.

       CRIS Options

       These options are defined specifically for the CRIS ports.

       -march=architecture-type
       -mcpu=architecture-type
	   Generate code for the specified architecture.  The
	   choices for architecture-type are v3, v8 and v10 for
	   respectively ETRAX 4, ETRAX 100, and ETRAX 100 LX.
	   Default is v0 except for cris-axis-linux-gnu, where
	   the default is v10.



       -mtune=architecture-type
	   Tune to architecture-type everything applicable about
	   the generated code, except for the ABI and the set of
	   available instructions.  The choices for architecture-
	   type are the same as for -march=architecture-type.

       -mmax-stack-frame=n
	   Warn when the stack frame of a function exceeds n
	   bytes.

       -melinux-stacksize=n
	   Only available with the cris-axis-aout target.
	   Arranges for indications in the program to the kernel
	   loader that the stack of the program should be set to
	   n bytes.

       -metrax4
       -metrax100
	   The options -metrax4 and -metrax100 are synonyms for
	   -march=v3 and -march=v8 respectively.

       -mmul-bug-workaround
       -mno-mul-bug-workaround
	   Work around a bug in the "muls" and "mulu" instruc-
	   tions for CPU models where it applies.  This option is
	   active by default.

       -mpdebug
	   Enable CRIS-specific verbose debug-related information
	   in the assembly code.  This option also has the effect
	   to turn off the #NO_APP formatted-code indicator to
	   the assembler at the beginning of the assembly file.

       -mcc-init
	   Do not use condition-code results from previous
	   instruction; always emit compare and test instructions
	   before use of condition codes.

       -mno-side-effects
	   Do not emit instructions with side-effects in address-
	   ing modes other than post-increment.

       -mstack-align
       -mno-stack-align
       -mdata-align
       -mno-data-align
       -mconst-align
       -mno-const-align
	   These options (no-options) arranges (eliminate
	   arrangements) for the stack-frame, individual data and
	   constants to be aligned for the maximum single data
	   access size for the chosen CPU model.  The default is
	   to arrange for 32-bit alignment.  ABI details such as
	   structure layout are not affected by these options.

       -m32-bit
       -m16-bit
       -m8-bit
	   Similar to the stack- data- and const-align options
	   above, these options arrange for stack-frame, writable
	   data and constants to all be 32-bit, 16-bit or 8-bit
	   aligned.  The default is 32-bit alignment.

       -mno-prologue-epilogue

       -mprologue-epilogue
	   With -mno-prologue-epilogue, the normal function pro-
	   logue and epilogue that sets up the stack-frame are
	   omitted and no return instructions or return sequences
	   are generated in the code.  Use this option only
	   together with visual inspection of the compiled code:
	   no warnings or errors are generated when call-saved
	   registers must be saved, or storage for local variable
	   needs to be allocated.

       -mno-gotplt
       -mgotplt
	   With -fpic and -fPIC, don't generate (do generate)
	   instruction sequences that load addresses for func-
	   tions from the PLT part of the GOT rather than (tradi-
	   tional on other architectures) calls to the PLT.  The
	   default is -mgotplt.

       -maout
	   Legacy no-op option only recognized with the cris-
	   axis-aout target.

       -melf
	   Legacy no-op option only recognized with the cris-
	   axis-elf and cris-axis-linux-gnu targets.

       -melinux
	   Only recognized with the cris-axis-aout target, where
	   it selects a GNU/linux-like multilib, include files
	   and instruction set for -march=v8.

       -mlinux
	   Legacy no-op option only recognized with the cris-
	   axis-linux-gnu target.

       -sim
	   This option, recognized for the cris-axis-aout and
	   cris-axis-elf arranges to link with input-output func-
	   tions from a simulator library.  Code, initialized
	   data and zero-initialized data are allocated consecu-
	   tively.

       -sim2
	   Like -sim, but pass linker options to locate initial-
	   ized data at 0x40000000 and zero-initialized data at
	   0x80000000.

       MMIX Options

       These options are defined for the MMIX:

       -mlibfuncs
       -mno-libfuncs
	   Specify that intrinsic library functions are being
	   compiled, passing all values in registers, no matter
	   the size.

       -mepsilon
       -mno-epsilon
	   Generate floating-point comparison instructions that
	   compare with respect to the "rE" epsilon register.

       -mabi=mmixware
       -mabi=gnu
	   Generate code that passes function parameters and
	   return values that (in the called function) are seen
	   as registers "$0" and up, as opposed to the GNU ABI
	   which uses global registers "$231" and up.

       -mzero-extend
       -mno-zero-extend
	   When reading data from memory in sizes shorter than 64
	   bits, use (do not use) zero-extending load instruc-
	   tions by default, rather than sign-extending ones.

       -mknuthdiv
       -mno-knuthdiv
	   Make the result of a division yielding a remainder
	   have the same sign as the divisor.  With the default,
	   -mno-knuthdiv, the sign of the remainder follows the
	   sign of the dividend.  Both methods are arithmetically
	   valid, the latter being almost exclusively used.

       -mtoplevel-symbols
       -mno-toplevel-symbols
	   Prepend (do not prepend) a : to all global symbols, so
	   the assembly code can be used with the "PREFIX" assem-
	   bly directive.

       -melf
	   Generate an executable in the ELF format, rather than
	   the default mmo format used by the mmix simulator.

       -mbranch-predict
       -mno-branch-predict
	   Use (do not use) the probable-branch instructions,
	   when static branch prediction indicates a probable
	   branch.

       -mbase-addresses
       -mno-base-addresses
	   Generate (do not generate) code that uses base
	   addresses.  Using a base address automatically gener-
	   ates a request (handled by the assembler and the
	   linker) for a constant to be set up in a global regis-
	   ter.	 The register is used for one or more base
	   address requests within the range 0 to 255 from the
	   value held in the register.	The generally leads to
	   short and fast code, but the number of different data
	   items that can be addressed is limited.  This means
	   that a program that uses lots of static data may
	   require -mno-base-addresses.

       -msingle-exit
       -mno-single-exit
	   Force (do not force) generated code to have a single
	   exit point in each function.

       PDP-11 Options

       These options are defined for the PDP-11:

       -mfpu
	   Use hardware FPP floating point.  This is the default.
	   (FIS floating point on the PDP-11/40 is not sup-
	   ported.)

       -msoft-float
	   Do not use hardware floating point.

       -mac0
	   Return floating-point results in ac0 (fr0 in Unix
	   assembler syntax).

       -mno-ac0
	   Return floating-point results in memory.  This is the
	   default.

       -m40
	   Generate code for a PDP-11/40.

       -m45
	   Generate code for a PDP-11/45.  This is the default.

       -m10
	   Generate code for a PDP-11/10.

       -mbcopy-builtin
	   Use inline "movstrhi" patterns for copying memory.
	   This is the default.

       -mbcopy
	   Do not use inline "movstrhi" patterns for copying mem-
	   ory.

       -mint16
       -mno-int32
	   Use 16-bit "int".  This is the default.

       -mint32
       -mno-int16
	   Use 32-bit "int".

       -mfloat64
       -mno-float32
	   Use 64-bit "float".	This is the default.

       -mfloat32
       -mno-float64
	   Use 32-bit "float".

       -mabshi
	   Use "abshi2" pattern.  This is the default.

       -mno-abshi
	   Do not use "abshi2" pattern.

       -mbranch-expensive
	   Pretend that branches are expensive.	 This is for
	   experimenting with code generation only.

       -mbranch-cheap
	   Do not pretend that branches are expensive.	This is
	   the default.

       -msplit
	   Generate code for a system with split I&D.

       -mno-split
	   Generate code for a system without split I&D.  This is
	   the default.

       -munix-asm
	   Use Unix assembler syntax.  This is the default when
	   configured for pdp11-*-bsd.

       -mdec-asm
	   Use DEC assembler syntax.  This is the default when
	   configured for any PDP-11 target other than
	   pdp11-*-bsd.

       Xstormy16 Options

       These options are defined for Xstormy16:

       -msim
	   Choose startup files and linker script suitable for
	   the simulator.

       FRV Options

       -mgpr-32
	   Only use the first 32 general purpose registers.

       -mgpr-64
	   Use all 64 general purpose registers.

       -mfpr-32
	   Use only the first 32 floating point registers.

       -mfpr-64
	   Use all 64 floating point registers

       -mhard-float
	   Use hardware instructions for floating point opera-
	   tions.

       -msoft-float
	   Use library routines for floating point operations.

       -malloc-cc
	   Dynamically allocate condition code registers.

       -mfixed-cc
	   Do not try to dynamically allocate condition code reg-
	   isters, only use "icc0" and "fcc0".

       -mdword
	   Change ABI to use double word insns.

       -mno-dword
	   Do not use double word instructions.

       -mdouble
	   Use floating point double instructions.

       -mno-double
	   Do not use floating point double instructions.

       -mmedia
	   Use media instructions.

       -mno-media
	   Do not use media instructions.

       -mmuladd
	   Use multiply and add/subtract instructions.

       -mno-muladd
	   Do not use multiply and add/subtract instructions.

       -mlibrary-pic
	   Enable PIC support for building libraries


       -macc-4
	   Use only the first four media accumulator registers.

       -macc-8
	   Use all eight media accumulator registers.

       -mpack
	   Pack VLIW instructions.

       -mno-pack
	   Do not pack VLIW instructions.

       -mno-eflags
	   Do not mark ABI switches in e_flags.

       -mcond-move
	   Enable the use of conditional-move instructions
	   (default).

	   This switch is mainly for debugging the compiler and
	   will likely be removed in a future version.

       -mno-cond-move
	   Disable the use of conditional-move instructions.

	   This switch is mainly for debugging the compiler and
	   will likely be removed in a future version.

       -mscc
	   Enable the use of conditional set instructions
	   (default).

	   This switch is mainly for debugging the compiler and
	   will likely be removed in a future version.

       -mno-scc
	   Disable the use of conditional set instructions.

	   This switch is mainly for debugging the compiler and
	   will likely be removed in a future version.

       -mcond-exec
	   Enable the use of conditional execution (default).

	   This switch is mainly for debugging the compiler and
	   will likely be removed in a future version.

       -mno-cond-exec
	   Disable the use of conditional execution.

	   This switch is mainly for debugging the compiler and
	   will likely be removed in a future version.

       -mvliw-branch
	   Run a pass to pack branches into VLIW instructions
	   (default).

	   This switch is mainly for debugging the compiler and
	   will likely be removed in a future version.

       -mno-vliw-branch
	   Do not run a pass to pack branches into VLIW instruc-
	   tions.

	   This switch is mainly for debugging the compiler and
	   will likely be removed in a future version.

       -mmulti-cond-exec
	   Enable optimization of "&&" and "||" in conditional
	   execution (default).

	   This switch is mainly for debugging the compiler and
	   will likely be removed in a future version.

       -mno-multi-cond-exec
	   Disable optimization of "&&" and "||" in conditional
	   execution.

	   This switch is mainly for debugging the compiler and
	   will likely be removed in a future version.

       -mnested-cond-exec
	   Enable nested conditional execution optimizations
	   (default).

	   This switch is mainly for debugging the compiler and
	   will likely be removed in a future version.

       -mno-nested-cond-exec
	   Disable nested conditional execution optimizations.

	   This switch is mainly for debugging the compiler and
	   will likely be removed in a future version.

       -mtomcat-stats
	   Cause gas to print out tomcat statistics.

       -mcpu=cpu
	   Select the processor type for which to generate code.
	   Possible values are simple, tomcat, fr500, fr400,
	   fr300, frv.

       Xtensa Options

       The Xtensa architecture is designed to support many dif-
       ferent configurations.  The compiler's default options can
       be set to match a particular Xtensa configuration by copy-
       ing a configuration file into the GCC sources when build-
       ing GCC.	 The options below may be used to override the
       default options.

       -mbig-endian
       -mlittle-endian
	   Specify big-endian or little-endian byte ordering for
	   the target Xtensa processor.

       -mdensity
       -mno-density
	   Enable or disable use of the optional Xtensa code den-
	   sity instructions.

       -mmac16
       -mno-mac16
	   Enable or disable use of the Xtensa MAC16 option.
	   When enabled, GCC will generate MAC16 instructions
	   from standard C code, with the limitation that it will
	   use neither the MR register file nor any instruction
	   that operates on the MR registers.  When this option
	   is disabled, GCC will translate 16-bit multiply/accu-
	   mulate operations to a combination of core instruc-
	   tions and library calls, depending on whether any
	   other multiplier options are enabled.

       -mmul16
       -mno-mul16
	   Enable or disable use of the 16-bit integer multiplier
	   option.  When enabled, the compiler will generate
	   16-bit multiply instructions for multiplications of 16
	   bits or smaller in standard C code.	When this option
	   is disabled, the compiler will either use 32-bit mul-
	   tiply or MAC16 instructions if they are available or
	   generate library calls to perform the multiply opera-
	   tions using shifts and adds.

       -mmul32
       -mno-mul32
	   Enable or disable use of the 32-bit integer multiplier
	   option.  When enabled, the compiler will generate
	   32-bit multiply instructions for multiplications of 32
	   bits or smaller in standard C code.	When this option
	   is disabled, the compiler will generate library calls
	   to perform the multiply operations using either shifts
	   and adds or 16-bit multiply instructions if they are
	   available.

       -mnsa
       -mno-nsa
	   Enable or disable use of the optional normalization
	   shift amount ("NSA") instructions to implement the
	   built-in "ffs" function.

       -mminmax
       -mno-minmax
	   Enable or disable use of the optional minimum and max-
	   imum value instructions.

       -msext
       -mno-sext
	   Enable or disable use of the optional sign extend
	   ("SEXT") instruction.

       -mbooleans
       -mno-booleans
	   Enable or disable support for the boolean register
	   file used by Xtensa coprocessors.  This is not typi-
	   cally useful by itself but may be required for other
	   options that make use of the boolean registers (e.g.,
	   the floating-point option).

       -mhard-float
       -msoft-float
	   Enable or disable use of the floating-point option.
	   When enabled, GCC generates floating-point instruc-
	   tions for 32-bit "float" operations.	 When this option
	   is disabled, GCC generates library calls to emulate
	   32-bit floating-point operations using integer
	   instructions.  Regardless of this option, 64-bit "dou-
	   ble" operations are always emulated with calls to
	   library functions.

       -mfused-madd
       -mno-fused-madd
	   Enable or disable use of fused multiply/add and multi-
	   ply/subtract instructions in the floating-point
	   option.  This has no effect if the floating-point
	   option is not also enabled.	Disabling fused multi-
	   ply/add and multiply/subtract instructions forces the
	   compiler to use separate instructions for the multiply
	   and add/subtract operations.	 This may be desirable in
	   some cases where strict IEEE 754-compliant results are
	   required: the fused multiply add/subtract instructions
	   do not round the intermediate result, thereby produc-
	   ing results with more bits of precision than specified
	   by the IEEE standard.  Disabling fused multiply
	   add/subtract instructions also ensures that the pro-
	   gram output is not sensitive to the compiler's ability
	   to combine multiply and add/subtract operations.

       -mserialize-volatile
       -mno-serialize-volatile
	   When this option is enabled, GCC inserts "MEMW"
	   instructions before "volatile" memory references to
	   guarantee sequential consistency.  The default is
	   -mserialize-volatile.  Use -mno-serialize-volatile to
	   omit the "MEMW" instructions.

       -mtext-section-literals
       -mno-text-section-literals
	   Control the treatment of literal pools.  The default
	   is -mno-text-section-literals, which places literals
	   in a separate section in the output file.  This allows
	   the literal pool to be placed in a data RAM/ROM, and
	   it also allows the linker to combine literal pools
	   from separate object files to remove redundant liter-
	   als and improve code size.  With -mtext-section-liter-
	   als, the literals are interspersed in the text section
	   in order to keep them as close as possible to their
	   references.	This may be necessary for large assembly
	   files.

       -mtarget-align
       -mno-target-align
	   When this option is enabled, GCC instructs the assem-
	   bler to automatically align instructions to reduce
	   branch penalties at the expense of some code density.
	   The assembler attempts to widen density instructions
	   to align branch targets and the instructions following
	   call instructions.  If there are not enough preceding
	   safe density instructions to align a target, no widen-
	   ing will be performed.  The default is -mtarget-align.
	   These options do not affect the treatment of auto-
	   aligned instructions like "LOOP", which the assembler
	   will always align, either by widening density instruc-
	   tions or by inserting no-op instructions.

       -mlongcalls
       -mno-longcalls
	   When this option is enabled, GCC instructs the assem-
	   bler to translate direct calls to indirect calls
	   unless it can determine that the target of a direct
	   call is in the range allowed by the call instruction.
	   This translation typically occurs for calls to func-
	   tions in other source files.	 Specifically, the assem-
	   bler translates a direct "CALL" instruction into an
	   "L32R" followed by a "CALLX" instruction.  The default
	   is -mno-longcalls.  This option should be used in pro-
	   grams where the call target can potentially be out of
	   range.  This option is implemented in the assembler,
	   not the compiler, so the assembly code generated by
	   GCC will still show direct call instructions---look at
	   the disassembled object code to see the actual
	   instructions.  Note that the assembler will use an
	   indirect call for every cross-file call, not just
	   those that really will be out of range.

       Options for Code Generation Conventions

       These machine-independent options control the interface
       conventions used in code generation.

       Most of them have both positive and negative forms; the
       negative form of -ffoo would be -fno-foo.  In the table
       below, only one of the forms is listed---the one which is
       not the default.	 You can figure out the other form by
       either removing no- or adding it.

       -fbounds-check
	   For front-ends that support it, generate additional
	   code to check that indices used to access arrays are
	   within the declared range.  This is currently only
	   supported by the Java and Fortran 77 front-ends, where
	   this option defaults to true and false respectively.

       -ftrapv
	   This option generates traps for signed overflow on
	   addition, subtraction, multiplication operations.

       -fexceptions
	   Enable exception handling.  Generates extra code
	   needed to propagate exceptions.  For some targets,
	   this implies GCC will generate frame unwind informa-
	   tion for all functions, which can produce significant
	   data size overhead, although it does not affect execu-
	   tion.  If you do not specify this option, GCC will
	   enable it by default for languages like C++ which nor-
	   mally require exception handling, and disable it for
	   languages like C that do not normally require it.
	   However, you may need to enable this option when com-
	   piling C code that needs to interoperate properly with
	   exception handlers written in C++.  You may also wish
	   to disable this option if you are compiling older C++
	   programs that don't use exception handling.

       -fnon-call-exceptions
	   Generate code that allows trapping instructions to
	   throw exceptions.  Note that this requires platform-
	   specific runtime support that does not exist every-
	   where.  Moreover, it only allows trapping instructions
	   to throw exceptions, i.e. memory references or float-
	   ing point instructions.  It does not allow exceptions
	   to be thrown from arbitrary signal handlers such as
	   "SIGALRM".

       -funwind-tables
	   Similar to -fexceptions, except that it will just gen-
	   erate any needed static data, but will not affect the
	   generated code in any other way.  You will normally
	   not enable this option; instead, a language processor
	   that needs this handling would enable it on your
	   behalf.

       -fasynchronous-unwind-tables
	   Generate unwind table in dwarf2 format, if supported
	   by target machine.  The table is exact at each
	   instruction boundary, so it can be used for stack
	   unwinding from asynchronous events (such as debugger
	   or garbage collector).



       -fpcc-struct-return
	   Return ``short'' "struct" and "union" values in memory
	   like longer ones, rather than in registers.	This con-
	   vention is less efficient, but it has the advantage of
	   allowing intercallability between GCC-compiled files
	   and files compiled with other compilers, particularly
	   the Portable C Compiler (pcc).

	   The precise convention for returning structures in
	   memory depends on the target configuration macros.

	   Short structures and unions are those whose size and
	   alignment match that of some integer type.

	   Warning: code compiled with the -fpcc-struct-return
	   switch is not binary compatible with code compiled
	   with the -freg-struct-return switch.	 Use it to con-
	   form to a non-default application binary interface.

       -freg-struct-return
	   Return "struct" and "union" values in registers when
	   possible.  This is more efficient for small structures
	   than -fpcc-struct-return.

	   If you specify neither -fpcc-struct-return nor -freg-
	   struct-return, GCC defaults to whichever convention is
	   standard for the target.  If there is no standard con-
	   vention, GCC defaults to -fpcc-struct-return, except
	   on targets where GCC is the principal compiler.  In
	   those cases, we can choose the standard, and we chose
	   the more efficient register return alternative.

	   Warning: code compiled with the -freg-struct-return
	   switch is not binary compatible with code compiled
	   with the -fpcc-struct-return switch.	 Use it to con-
	   form to a non-default application binary interface.

       -fshort-enums
	   Allocate to an "enum" type only as many bytes as it
	   needs for the declared range of possible values.
	   Specifically, the "enum" type will be equivalent to
	   the smallest integer type which has enough room.

	   Warning: the -fshort-enums switch causes GCC to gener-
	   ate code that is not binary compatible with code gen-
	   erated without that switch.	Use it to conform to a
	   non-default application binary interface.

       -fshort-double
	   Use the same size for "double" as for "float".

	   Warning: the -fshort-double switch causes GCC to gen-
	   erate code that is not binary compatible with code
	   generated without that switch.  Use it to conform to a
	   non-default application binary interface.

       -fshort-wchar
	   Override the underlying type for wchar_t to be short
	   unsigned int instead of the default for the target.
	   This option is useful for building programs to run
	   under WINE.

	   Warning: the -fshort-wchar switch causes GCC to gener-
	   ate code that is not binary compatible with code gen-
	   erated without that switch.	Use it to conform to a
	   non-default application binary interface.

       -fshared-data
	   Requests that the data and non-"const" variables of
	   this compilation be shared data rather than private
	   data.  The distinction makes sense only on certain
	   operating systems, where shared data is shared between
	   processes running the same program, while private data
	   exists in one copy per process.

       -fno-common
	   In C, allocate even uninitialized global variables in
	   the data section of the object file, rather than gen-
	   erating them as common blocks.  This has the effect
	   that if the same variable is declared (without
	   "extern") in two different compilations, you will get
	   an error when you link them.	 The only reason this
	   might be useful is if you wish to verify that the pro-
	   gram will work on other systems which always work this
	   way.

       -fno-ident
	   Ignore the #ident directive.

       -fno-gnu-linker
	   Do not output global initializations (such as C++ con-
	   structors and destructors) in the form used by the GNU
	   linker (on systems where the GNU linker is the stan-
	   dard method of handling them).  Use this option when
	   you want to use a non-GNU linker, which also requires
	   using the collect2 program to make sure the system
	   linker includes constructors and destructors.  (col-
	   lect2 is included in the GCC distribution.)	For sys-
	   tems which must use collect2, the compiler driver gcc
	   is configured to do this automatically.

       -finhibit-size-directive
	   Don't output a ".size" assembler directive, or any-
	   thing else that would cause trouble if the function is
	   split in the middle, and the two halves are placed at
	   locations far apart in memory.  This option is used
	   when compiling crtstuff.c; you should not need to use
	   it for anything else.

       -fverbose-asm
	   Put extra commentary information in the generated
	   assembly code to make it more readable.  This option
	   is generally only of use to those who actually need to
	   read the generated assembly code (perhaps while debug-
	   ging the compiler itself).

	   -fno-verbose-asm, the default, causes the extra infor-
	   mation to be omitted and is useful when comparing two
	   assembler files.

       -fvolatile
	   Consider all memory references through pointers to be
	   volatile.

       -fvolatile-global
	   Consider all memory references to extern and global
	   data items to be volatile.  GCC does not consider
	   static data items to be volatile because of this
	   switch.



       -fvolatile-static
	   Consider all memory references to static data to be
	   volatile.

       -fpic
	   Generate position-independent code (PIC) suitable for
	   use in a shared library, if supported for the target
	   machine.  Such code accesses all constant addresses
	   through a global offset table (GOT).	 The dynamic
	   loader resolves the GOT entries when the program
	   starts (the dynamic loader is not part of GCC; it is
	   part of the operating system).  If the GOT size for
	   the linked executable exceeds a machine-specific maxi-
	   mum size, you get an error message from the linker
	   indicating that -fpic does not work; in that case,
	   recompile with -fPIC instead.  (These maximums are 16k
	   on the m88k, 8k on the SPARC, and 32k on the m68k and
	   RS/6000.  The 386 has no such limit.)

	   Position-independent code requires special support,
	   and therefore works only on certain machines.  For the
	   386, GCC supports PIC for System V but not for the Sun
	   386i.  Code generated for the IBM RS/6000 is always
	   position-independent.

       -fPIC
	   If supported for the target machine, emit position-
	   independent code, suitable for dynamic linking and
	   avoiding any limit on the size of the global offset
	   table.  This option makes a difference on the m68k,
	   m88k, and the SPARC.

	   Position-independent code requires special support,
	   and therefore works only on certain machines.

       -ffixed-reg
	   Treat the register named reg as a fixed register; gen-
	   erated code should never refer to it (except perhaps
	   as a stack pointer, frame pointer or in some other
	   fixed role).

	   reg must be the name of a register.	The register
	   names accepted are machine-specific and are defined in
	   the "REGISTER_NAMES" macro in the machine description
	   macro file.

	   This flag does not have a negative form, because it
	   specifies a three-way choice.

       -fcall-used-reg
	   Treat the register named reg as an allocable register
	   that is clobbered by function calls.	 It may be allo-
	   cated for temporaries or variables that do not live
	   across a call.  Functions compiled this way will not
	   save and restore the register reg.

	   It is an error to used this flag with the frame
	   pointer or stack pointer.  Use of this flag for other
	   registers that have fixed pervasive roles in the
	   machine's execution model will produce disastrous
	   results.

	   This flag does not have a negative form, because it
	   specifies a three-way choice.


       -fcall-saved-reg
	   Treat the register named reg as an allocable register
	   saved by functions.	It may be allocated even for tem-
	   poraries or variables that live across a call.  Func-
	   tions compiled this way will save and restore the reg-
	   ister reg if they use it.

	   It is an error to used this flag with the frame
	   pointer or stack pointer.  Use of this flag for other
	   registers that have fixed pervasive roles in the
	   machine's execution model will produce disastrous
	   results.

	   A different sort of disaster will result from the use
	   of this flag for a register in which function values
	   may be returned.

	   This flag does not have a negative form, because it
	   specifies a three-way choice.

       -fpack-struct
	   Pack all structure members together without holes.

	   Warning: the -fpack-struct switch causes GCC to gener-
	   ate code that is not binary compatible with code gen-
	   erated without that switch.	Additionally, it makes
	   the code suboptimal.	 Use it to conform to a non-
	   default application binary interface.

       -finstrument-functions
	   Generate instrumentation calls for entry and exit to
	   functions.  Just after function entry and just before
	   function exit, the following profiling functions will
	   be called with the address of the current function and
	   its call site.  (On some platforms,
	   "__builtin_return_address" does not work beyond the
	   current function, so the call site information may not
	   be available to the profiling functions otherwise.)

		   void __cyg_profile_func_enter (void *this_fn,
						  void *call_site);
		   void __cyg_profile_func_exit	 (void *this_fn,
						  void *call_site);

	   The first argument is the address of the start of the
	   current function, which may be looked up exactly in
	   the symbol table.

	   This instrumentation is also done for functions
	   expanded inline in other functions.	The profiling
	   calls will indicate where, conceptually, the inline
	   function is entered and exited.  This means that
	   addressable versions of such functions must be avail-
	   able.  If all your uses of a function are expanded
	   inline, this may mean an additional expansion of code
	   size.  If you use extern inline in your C code, an
	   addressable version of such functions must be pro-
	   vided.  (This is normally the case anyways, but if you
	   get lucky and the optimizer always expands the func-
	   tions inline, you might have gotten away without pro-
	   viding static copies.)

	   A function may be given the attribute "no_instru-
	   ment_function", in which case this instrumentation
	   will not be done.  This can be used, for example, for
	   the profiling functions listed above, high-priority
	   interrupt routines, and any functions from which the
	   profiling functions cannot safely be called (perhaps
	   signal handlers, if the profiling routines generate
	   output or allocate memory).

       -fstack-check
	   Generate code to verify that you do not go beyond the
	   boundary of the stack.  You should specify this flag
	   if you are running in an environment with multiple
	   threads, but only rarely need to specify it in a sin-
	   gle-threaded environment since stack overflow is auto-
	   matically detected on nearly all systems if there is
	   only one stack.

	   Note that this switch does not actually cause checking
	   to be done; the operating system must do that.  The
	   switch causes generation of code to ensure that the
	   operating system sees the stack being extended.

       -fstack-limit-register=reg
       -fstack-limit-symbol=sym
       -fno-stack-limit
	   Generate code to ensure that the stack does not grow
	   beyond a certain value, either the value of a register
	   or the address of a symbol.	If the stack would grow
	   beyond the value, a signal is raised.  For most tar-
	   gets, the signal is raised before the stack overruns
	   the boundary, so it is possible to catch the signal
	   without taking special precautions.

	   For instance, if the stack starts at absolute address
	   0x80000000 and grows downwards, you can use the flags
	   -fstack-limit-symbol=__stack_limit and -Wl,--def-
	   sym,__stack_limit=0x7ffe0000 to enforce a stack limit
	   of 128KB.  Note that this may only work with the GNU
	   linker.

       -fargument-alias
       -fargument-noalias
       -fargument-noalias-global
	   Specify the possible relationships among parameters
	   and between parameters and global data.

	   -fargument-alias specifies that arguments (parameters)
	   may alias each other and may alias global stor-
	   age.-fargument-noalias specifies that arguments do not
	   alias each other, but may alias global storage.-fargu-
	   ment-noalias-global specifies that arguments do not
	   alias each other and do not alias global storage.

	   Each language will automatically use whatever option
	   is required by the language standard.  You should not
	   need to use these options yourself.

       -fleading-underscore
	   This option and its counterpart, -fno-leading-under-
	   score, forcibly change the way C symbols are repre-
	   sented in the object file.  One use is to help link
	   with legacy assembly code.

	   Warning: the -fleading-underscore switch causes GCC to
	   generate code that is not binary compatible with code
	   generated without that switch.  Use it to conform to a
	   non-default application binary interface.  Not all
	   targets provide complete support for this switch.

       -ftls-model=model
	   Alter the thread-local storage model to be used.  The
	   model argument should be one of "global-dynamic",
	   "local-dynamic", "initial-exec" or "local-exec".

	   The default without -fpic is "initial-exec"; with
	   -fpic the default is "global-dynamic".

ENVIRONMENT
       This section describes several environment variables that
       affect how GCC operates.	 Some of them work by specifying
       directories or prefixes to use when searching for various
       kinds of files.	Some are used to specify other aspects of
       the compilation environment.

       Note that you can also specify places to search using
       options such as -B, -I and -L.  These take precedence over
       places specified using environment variables, which in
       turn take precedence over those specified by the configu-
       ration of GCC.

       LANG
       LC_CTYPE
       LC_MESSAGES
       LC_ALL
	   These environment variables control the way that GCC
	   uses localization information that allow GCC to work
	   with different national conventions.	 GCC inspects the
	   locale categories LC_CTYPE and LC_MESSAGES if it has
	   been configured to do so.  These locale categories can
	   be set to any value supported by your installation.	A
	   typical value is en_UK for English in the United King-
	   dom.

	   The LC_CTYPE environment variable specifies character
	   classification.  GCC uses it to determine the charac-
	   ter boundaries in a string; this is needed for some
	   multibyte encodings that contain quote and escape
	   characters that would otherwise be interpreted as a
	   string end or escape.

	   The LC_MESSAGES environment variable specifies the
	   language to use in diagnostic messages.

	   If the LC_ALL environment variable is set, it over-
	   rides the value of LC_CTYPE and LC_MESSAGES; other-
	   wise, LC_CTYPE and LC_MESSAGES default to the value of
	   the LANG environment variable.  If none of these vari-
	   ables are set, GCC defaults to traditional C English
	   behavior.

       TMPDIR
	   If TMPDIR is set, it specifies the directory to use
	   for temporary files.	 GCC uses temporary files to hold
	   the output of one stage of compilation which is to be
	   used as input to the next stage: for example, the out-
	   put of the preprocessor, which is the input to the
	   compiler proper.

       GCC_EXEC_PREFIX
	   If GCC_EXEC_PREFIX is set, it specifies a prefix to
	   use in the names of the subprograms executed by the
	   compiler.  No slash is added when this prefix is com-
	   bined with the name of a subprogram, but you can spec-
	   ify a prefix that ends with a slash if you wish.

	   If GCC_EXEC_PREFIX is not set, GCC will attempt to
	   figure out an appropriate prefix to use based on the
	   pathname it was invoked with.

	   If GCC cannot find the subprogram using the specified
	   prefix, it tries looking in the usual places for the
	   subprogram.

	   The default value of GCC_EXEC_PREFIX is pre-
	   fix/lib/gcc-lib/ where prefix is the value of "prefix"
	   when you ran the configure script.

	   Other prefixes specified with -B take precedence over
	   this prefix.

	   This prefix is also used for finding files such as
	   crt0.o that are used for linking.

	   In addition, the prefix is used in an unusual way in
	   finding the directories to search for header files.
	   For each of the standard directories whose name nor-
	   mally begins with /usr/local/lib/gcc-lib (more pre-
	   cisely, with the value of GCC_INCLUDE_DIR), GCC tries
	   replacing that beginning with the specified prefix to
	   produce an alternate directory name.	 Thus, with
	   -Bfoo/, GCC will search foo/bar where it would nor-
	   mally search /usr/local/lib/bar.  These alternate
	   directories are searched first; the standard directo-
	   ries come next.

       COMPILER_PATH
	   The value of COMPILER_PATH is a colon-separated list
	   of directories, much like PATH.  GCC tries the direc-
	   tories thus specified when searching for subprograms,
	   if it can't find the subprograms using GCC_EXEC_PRE-
	   FIX.

       LIBRARY_PATH
	   The value of LIBRARY_PATH is a colon-separated list of
	   directories, much like PATH.	 When configured as a
	   native compiler, GCC tries the directories thus speci-
	   fied when searching for special linker files, if it
	   can't find them using GCC_EXEC_PREFIX.  Linking using
	   GCC also uses these directories when searching for
	   ordinary libraries for the -l option (but directories
	   specified with -L come first).

       LANG
	   This variable is used to pass locale information to
	   the compiler.  One way in which this information is
	   used is to determine the character set to be used when
	   character literals, string literals and comments are
	   parsed in C and C++.	 When the compiler is configured
	   to allow multibyte characters, the following values
	   for LANG are recognized:

	   C-JIS
	       Recognize JIS characters.

	   C-SJIS
	       Recognize SJIS characters.

	   C-EUCJP
	       Recognize EUCJP characters.

	   If LANG is not defined, or if it has some other value,
	   then the compiler will use mblen and mbtowc as defined
	   by the default locale to recognize and translate
	   multibyte characters.

       Some additional environments variables affect the behavior
       of the preprocessor.

       CPATH
       C_INCLUDE_PATH
       CPLUS_INCLUDE_PATH
       OBJC_INCLUDE_PATH
	   Each variable's value is a list of directories sepa-
	   rated by a special character, much like PATH, in which
	   to look for header files.  The special character,
	   "PATH_SEPARATOR", is target-dependent and determined
	   at GCC build time.  For Windows-based targets it is a
	   semicolon, and for almost all other targets it is a
	   colon.

	   CPATH specifies a list of directories to be searched
	   as if specified with -I, but after any paths given
	   with -I options on the command line.	 This environment
	   variable is used regardless of which language is being
	   preprocessed.

	   The remaining environment variables apply only when
	   preprocessing the particular language indicated.  Each
	   specifies a list of directories to be searched as if
	   specified with -isystem, but after any paths given
	   with -isystem options on the command line.

	   In all these variables, an empty element instructs the
	   compiler to search its current working directory.
	   Empty elements can appear at the beginning or end of a
	   path.  For instance, if the value of CPATH is ":/spe-
	   cial/include", that has the same effect as -I. -I/spe-
	   cial/include.

       DEPENDENCIES_OUTPUT
	   If this variable is set, its value specifies how to
	   output dependencies for Make based on the non-system
	   header files processed by the compiler.  System header
	   files are ignored in the dependency output.

	   The value of DEPENDENCIES_OUTPUT can be just a file
	   name, in which case the Make rules are written to that
	   file, guessing the target name from the source file
	   name.  Or the value can have the form file target, in
	   which case the rules are written to file file using
	   target as the target name.

	   In other words, this environment variable is equiva-
	   lent to combining the options -MM and -MF, with an
	   optional -MT switch too.

       SUNPRO_DEPENDENCIES
	   This variable is the same as DEPENDENCIES_OUTPUT (see
	   above), except that system header files are not
	   ignored, so it implies -M rather than -MM.  However,
	   the dependence on the main input file is omitted.

BUGS
       For instructions on reporting bugs, see
       <http://gcc.gnu.org/bugs.html>.	Use of the gccbug script
       to report bugs is recommended.

FOOTNOTES
       1.  On some systems, gcc -shared needs to build supplemen-
	   tary stub code for constructors to work.  On multi-
	   libbed systems, gcc -shared must select the correct
	   support libraries to link against.  Failing to supply
	   the correct flags may lead to subtle defects.  Supply-
	   ing them in cases where they are not necessary is
	   innocuous.

SEE ALSO
       gpl(7), gfdl(7), fsf-funding(7), cpp(1), gcov(1), g77(1),
       as(1), ld(1), gdb(1), adb(1), dbx(1), sdb(1) and the Info
       entries for gcc, cpp, g77, as, ld, binutils and gdb.

AUTHOR
       See the Info entry for gcc, or <http://gcc.gnu.org/online-
       docs/gcc/Contributors.html>, for contributors to GCC.

COPYRIGHT
       Copyright (c) 1988, 1989, 1992, 1993, 1994, 1995, 1996,
       1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software
       Foundation, Inc.

       Permission is granted to copy, distribute and/or modify
       this document under the terms of the GNU Free Documenta-
       tion License, Version 1.2 or any later version published
       by the Free Software Foundation; with the Invariant Sec-
       tions being ``GNU General Public License'' and ``Funding
       Free Software'', the Front-Cover texts being (a) (see
       below), and with the Back-Cover Texts being (b) (see
       below).	A copy of the license is included in the gfdl(7)
       man page.

       (a) The FSF's Front-Cover Text is:

	    A GNU Manual

       (b) The FSF's Back-Cover Text is:

	    You have freedom to copy and modify this GNU Manual, like GNU
	    software.  Copies published by the Free Software Foundation raise
	    funds for GNU development.




2004-05-31		    gcc-3.3.4			   GCC(1)